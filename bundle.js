require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js":[function(require,module,exports){

},{}],"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/inherits/inherits_browser.js":[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/os-browserify/browser.js":[function(require,module,exports){
exports.endianness = function () { return 'LE' };

exports.hostname = function () {
    if (typeof location !== 'undefined') {
        return location.hostname
    }
    else return '';
};

exports.loadavg = function () { return [] };

exports.uptime = function () { return 0 };

exports.freemem = function () {
    return Number.MAX_VALUE;
};

exports.totalmem = function () {
    return Number.MAX_VALUE;
};

exports.cpus = function () { return [] };

exports.type = function () { return 'Browser' };

exports.release = function () {
    if (typeof navigator !== 'undefined') {
        return navigator.appVersion;
    }
    return '';
};

exports.networkInterfaces
= exports.getNetworkInterfaces
= function () { return {} };

exports.arch = function () { return 'javascript' };

exports.platform = function () { return 'browser' };

exports.tmpdir = exports.tmpDir = function () {
    return '/tmp';
};

exports.EOL = '\n';

},{}],"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/process/browser.js":[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/util/support/isBufferBrowser.js":[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/util/util.js":[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        void(0);
      } else {
        void(0);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        void(0);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  void(0);
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/util/support/isBufferBrowser.js","_process":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/process/browser.js","inherits":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/inherits/inherits_browser.js"}],"/Users/youzi/dev/mtv-play/api/email.js":[function(require,module,exports){
var Value = require('vigour-js/value')
  , config = require('vigour-js/util/config')
  , cases = require('vigour-js/browser/cases')
  , location = window.location

//TODO: script defer type / css defer type / file api
//TODO: localflags e.g. facebook api
/* usage
  email.share.val = {
    subject: 'subs'
  , body: 'body'
  , address: 'addres'
  }
*/
//api flag
module.exports = exports = new Value(
{ send:
  { apiDefer: function( update, args ) {

      if( this.body || this.address || this.subject ) 
      {
        var body = this.body && this.body.val
          , subject = this.subject && this.subject.val
          , address = this.address && this.address.val
          , _this = this

        if( cases.android && !!window.cordova && window.plugins.socialsharing ) 
        {
          window.plugins.socialsharing
             .shareViaEmail
            ( body // can contain HTML tags, but support on Android is rather limited:  http://stackoverflow.com/questions/15136480/how-to-send-html-content-with-image-through-android-default-email-client
            , subject
            , address ? [ address ] : [] // TO: must be null or an array
            , null // CC: must be null or an array
            , null // BCC: must be null or an array
            , null// FILES: can be null, a string, or an array
            , function( response ){
                update( 'success' )
                this.$empty('loading')
              } // called when sharing worked, but also when the user cancelled sharing via email (I've found no way to detect the difference)
            , function( err ){
                _this.type = err
                update( 'error' )
                this.$empty('loading')
              } // called when sh*t hits the fan
            )
        }
        else
        {
          redirect = "mailto:" + ( address || '' ) 
                   + "?subject=" + ( subject || '' ) 
                   + "&body=" + ( body || '' )

          if( cases.android ) 
          { 
            location.replace( redirect ) 
            // window.location.replace( redirect ) 
          }
          else 
          { 
            //need to clear this unfortunately
            var old = location.href
            location.href = redirect  
          }
          update( 'success' )
          this.$empty('loading')
        }

      }
      else
      {
        update( true )
      }
     
    }
  }
, share: 
  { apiDefer: function( update, args ) {
      var email = this._parent
      if( this.val === true || args[0]===true ) {
        email.send.once( function( val ) {
          update( val )
        })
        email.send.val = 
        { address: this.address.val
        , body: this.body.val
        , subject: this.subject.val
        , val: true
        }
      } else {
        update( true )
      }
    }
  }
})


},{"vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/facebook/index.js":[function(require,module,exports){
var Value = require('vigour-js/value')
  , config = require('vigour-js/util/config')
  , facebookApi
  , defer = require('vigour-js/value/flags/process')
 

//TODO: script defer type / css defer type / file api
//TODO: localflags e.g. facebook api

//api flag
module.exports = exports = new Value(
{ api: 
  { defer: function( update, args ) {

      if( args[0] !== true || facebookApi ) return true
    
      if( !!window.cordova && !facebookApi ) 
      {
        facebookApi = true
        update()
      }
      else
      {

        if( args[0] !== true || facebookApi ) return true

        var script = document.createElement('script')
          , _this = this
          , error = script.onerror = function() {
               _this.clearCache()
               _this.val = args[0] = 'error'
               update()
            }

        script.src = config.facebook.web
        script.id = 'facebook-jssdk'

        window.fbAsyncInit = function() {
          try {
            window.FB.init(
            { appId : config.facebook.id 
            , xfbml : true
            , version : 'v2.1'
            })
            facebookApi = true //select it!
            update()
          } catch(e) {
            _this.type = e.message
            error()
          }
        }
        document.getElementsByTagName('head')[0].appendChild( script )
      }
    }
  }
})

//TODO: this is a tempfix
exports._name = 'facebook'

//TODO: coding style for nested modules purely for smaller filesizes
require('./login')
require('./share')
},{"./login":"/Users/youzi/dev/mtv-play/api/facebook/login.js","./share":"/Users/youzi/dev/mtv-play/api/facebook/share.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","vigour-js/value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/api/facebook/login.js":[function(require,module,exports){
var Value = require('vigour-js/value')
  , config = require('vigour-js/util/config')
  , util = require('vigour-js/util')
  , facebook = require('./index.js')
  , ua = require('vigour-js/browser/ua')
  , url = require('vigour-js/browser/network/url')
  , app = require('vigour-js/app/')

//TODO: script defer type / css defer type / file api
//TODO: localflags e.g. facebook api

/*
  app.api.facebook.login = true (requests facebook login window)
*/

facebook.val = {
  login:  
  { apiDefer: function facebookLogin( update, args ) 
    {

      var _this = this
      //api update
      if( args[0] !== true ) 
      {
        update( 'error' )
        this.type = 'type'
      }
      else
      {
        //TODO: replace this later
        if( !!window.cordova && !(ua.platform === "windows" && ua.device === "phone"))
        {

          facebookConnectPlugin.login( 
              [ 'public_profile', 'email' ]
            , function cordovaFBSuccess( res ){
                
                if( res.status === 'connected' ){

                  if( !_this.token || _this.token.val !== res.authResponse.accessToken ){ //block for double callback
                    _this.set( 'token' , res.authResponse.accessToken )
                    _this.set( 'id' , res.authResponse.userID )
                    //userID: "1607598096139074"
                    update( 'success' )
                  }
                  else
                  {
                    update( 'error' )
                  }

                }else{
                  _this.type = res
                  update( 'error' )
                }
              }
            , function cordovaFBFail( status ){
                _this.type = status
                update( 'error' )
              }
          )
        }
        else
        {
          window.FB.login( function( res ) {
            if(res.status === 'connected') 
            {
              _this.set( 'token' , res.authResponse.accessToken )
              _this.set( 'id' , res.authResponse.userID )
              update( 'success' )
            }
            else
            {
              _this.type = res
              // console.warn( 'fb error', res)
              update( 'error' )
            } 
          }, { scope: 'public_profile,email' })
        }
      }
    }
  }
}

// document.addEventListener('resume', function () {
//   // console.log("RESUME")
//   // console.log("window.location.href")
//   // console.log(window.location.href)
//   // try {
//   //   console.log(JSON.stringify(url.raw))
//   // } catch (e) {
//   //   console.log("Can't stringify")
//   //   console.log(e)

//   // }
//   // var parsed = url.parse()
//   // try {
//   //   console.log(JSON.stringify(parsed))
//   // } catch (e) {
//   //   console.log("Can't stringify")
//   //   for (var key in parsed) {
//   //     console.log("key: " + key)
//   //     console.log("value: " + parsed[key])
//   //   }
//   // }
//   // try {
//   //   for (var key in url) {
//   //     console.log("key: " + key)
//   //     console.log("value: " + url[key])
//   //   }
//   // } catch (e) {
//   //   console.log(e)
//   // }

//   // try {
//   //   for (var key in url.params) {
//   //     console.log("key: " + key)
//   //     console.log("value: " + url.params[key])
//   //   }
//   // } catch (e) {
//   //   console.log(e)
//   // }
  
// }, false)

/*
TODO:logout // login = false
 logout:function(params, cb) {
    // console.log('logout! > am i tv?', cases.tv)
    if(!cases.tv)
      control.cloud.leave()
    if(cases.FB_loggedin.val){
      if(!!window.cordova)
        facebookConnectPlugin.logout()
      else
        FB.logout()
    }
    cases.FB_loggedin.val = false
    control.cloud.emit('logout',1)
  }
*/
},{"./index.js":"/Users/youzi/dev/mtv-play/api/facebook/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/network/url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/url.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/facebook/share.js":[function(require,module,exports){
var Value = require('vigour-js/value')
  , config = require('vigour-js/util/config')
  , util = require('vigour-js/util')
  , facebook = require('./index.js')
  , cases = require('vigour-js/browser/cases')
  , cordovaFallback
  , url = require('vigour-js/browser/network/url')
  , ua = require('vigour-js/browser/ua')
  , app = require('vigour-js/app/')

//TODO: replace cordova!

/*
  app.api.facebook.share = {
    url:'http://bla.com'
  , img:'img.png'
  , title:'blabla!'
  }
*/

facebook.val = {
  share:  
  { apiDefer: function( update, args ) {

      var _this = this
        , url = this.url && this.url.val  //shareUrl(this.parent.data)

      if( !url ) 
      {
        update( true )
      }
      else if( !!window.cordova ) 
      {
        if (ua.platform === "windows" && ua.device === "phone") {
          window.plugins.socialsharing.share(
            null
            , this.title && this.title.val
            , null
            , this.url && this.url.val /* url */
            , function (msg) {
              update('success')
            }
            , function (err) {
              if (err) {
                if( cordovaFallback ) 
                { 
                  cordovaFallback.call( _this, update, args ) 
                }
                else 
                {
                  _this.type = 'no cordovaFallback'
                  update( 'error' )
                }
              }
            })
        } else {

          window.plugins.socialsharing
            .shareViaFacebook
              ( null
              , null//this.img ? this.img.val : null
              , this.url ? this.url.val : null/* url */
              , function( msg ) {
                  update( 'success' )  
                }
              , function( err ) {
                  if( err )
                  {
                    if( cordovaFallback ) 
                    { 
                      cordovaFallback.call( _this, update, args ) 
                    }
                    else 
                    {
                      _this.type = 'no cordovaFallback'
                      update( 'error' )
                    }
                  }
                }
              )
        }
      } 
      else 
      {
        void(0)
        //TODO: add img and title support!
        FB.ui(
        { method: 'share'
        , href: url 
        }, function( res ) {
          if( !res || res && res.error_code ) {
            if( res && res.error_code == 4201 ) _this.type = 'cancelled'   
            update( 'error' )
          }
          else
          {
            update( 'success' )
          }
        })
      }
    }
  }
}

if( !!window.cordova ) 
{
  //TODO: cordovaFallback will be replaced later!
  ;(function() {
    cordovaFallback = function shareThroughFBFallback( update, args ) {

      var url = this.url && this.url.val
        , _this = this

      function share() {
        window.facebookConnectPlugin
          .showDialog
          ( { method: 'share'
            , href: url
            , link: url
            }
            , function( val ) {
                if( (typeof val !== 'string') )
                {
                  update( 'success' )
                } else if( ~val.indexOf('User cancelled') ) 
                {
                  _this.type = 'cancelled'
                  update( 'error' )
                }
              }
            , function( err ) {
              if( typeof err === 'string' && err.indexOf('User cancelled') ) 
              {
                _this.type = 'cancelled'    
              }
              update( 'error' )
            }
          )
      }

      function login() {
        window.facebookConnectPlugin
          .login
          ( [ 'public_profile' ]
          , share
          , function( error ) { 
              _this.type = 'login'
              update( 'error' ) 
            }
        )
      }

      if( cases.android )
      {
        window.facebookConnectPlugin
          .getLoginStatus
          ( function( msg ) {
              ;( msg.status === 'connected' ? share() : login() )
            },
            login
          )
      }
      else
      {
        share()
      }

    }
  })()
}

},{"./index.js":"/Users/youzi/dev/mtv-play/api/facebook/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/network/url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/url.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/index.js":[function(require,module,exports){
exports.login = require( './login' )
exports.verify = require( './verify' )
exports.register = require( './register' )
exports.facebook = require( './facebook' )
exports.email = require( './email' )
exports.network = require( './network' )
exports.password = require( './password' )
exports.mobile = require( './mobile' )
exports.user = require( './user'  )
exports.purchase = require( './purchase' )
exports.receipt = require( './receipt' )
exports.url = require( './url' )
exports.player = require( './player' )
exports.price = require( './purchase/pricing' )
},{"./email":"/Users/youzi/dev/mtv-play/api/email.js","./facebook":"/Users/youzi/dev/mtv-play/api/facebook/index.js","./login":"/Users/youzi/dev/mtv-play/api/login.js","./mobile":"/Users/youzi/dev/mtv-play/api/mobile.js","./network":"/Users/youzi/dev/mtv-play/api/network.js","./password":"/Users/youzi/dev/mtv-play/api/password.js","./player":"/Users/youzi/dev/mtv-play/api/player.js","./purchase":"/Users/youzi/dev/mtv-play/api/purchase/index.js","./purchase/pricing":"/Users/youzi/dev/mtv-play/api/purchase/pricing.js","./receipt":"/Users/youzi/dev/mtv-play/api/receipt.js","./register":"/Users/youzi/dev/mtv-play/api/register.js","./url":"/Users/youzi/dev/mtv-play/api/url.js","./user":"/Users/youzi/dev/mtv-play/api/user.js","./verify":"/Users/youzi/dev/mtv-play/api/verify.js"}],"/Users/youzi/dev/mtv-play/api/login.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
	, Value = require('vigour-js/value') 
	, util = require('./util')
	, url = config.api.url
  , defer = require('vigour-js/value/flags/process')


/*
login.val = 
{ email:'jim@vigour.io'
, password:'schaap99'
}

login.val = { facebook: 'FBoAuthtoken' }
*/

module.exports = exports = new Value(
{ ajax: {
    condition:function( ajax, val ) {

      //TODO: clearing perhaps? or handle from login/logout
    	if( this.email && this.password ) 
    	{
    		ajax.url = url + 'api/v1/sessions.json'
    		ajax.data = 
    		{ user: 
          { email: this.email.val
          , password: this.password.val
          , app_version: window.package.version
          }
     		}
     		return true
    	} 
      else if( this.region && this.facebook && this.facebook.token ) 
      {
        ajax.url = url + 'api/v2/sessions.json'
        ajax.data = 
        { auth_method: 1
        , user:
          { oauth_token: this.facebook.token.val
          , accept_data_protection_tcs: true
          , accept_mtv_country_tcs_for: this.region.val
          , app_version: window.package.version
          }
        }
        return true
      }
  	}
  , headers: { appVersion: 3 }
  , method: 'POST'
  , encode: 'json'
  , defer: function( update , args, err, data ) {

      if( err || !data || !data.success ) 
      {
      	this.type = err ? err.message : util.findError( data ) 
        update( 'error' )
        this.$empty( ['loading', 'region'] )
      } 
      else 
      {
      	this.set( 'token', data.authentication_token )
        if (data.new_record) {
          this.set('new_record', data.new_record)
        }
      	update( 'success' )
      }

  	}
  }
})

//TODO: get rid of this temp fix
exports._name = '_mtvlogin'


},{"./util":"/Users/youzi/dev/mtv-play/api/util.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","vigour-js/value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/api/mobile.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
	, Value = require('vigour-js/value') 
	, util = require('./util')
	, url = config.api.url

/*
mobile.verify.val = 
{ phone:'jim@vigour.io'
, country:'schaap99'
}
*/
module.exports = exports = new Value(
{ verify://this validates that the number is ok and sends sms
  { ajax: 
    { url: url+'api/v2/mbl_verifications.json'
    , encode: 'json'
    , method: 'POST'
    , headers: 
      { Accept:'*/*'
      , redirectUrl: config.packer.domain + '/?m=$data'
    } 
      //TODO: double check, maybe just use .json ?
    , data: function( ajax, val ) {
        if( this.token && this.token.val 
         && this.phonenumber && this.phonenumber.val
         && this.country && this.country.val ) 
        {
          return {
            auth_token: this.token.val
            , user: 
              { mobile_number: Number( this.phonenumber.val )
              , mobile_country_prefix: Number( this.country.val )
              , app_version: window.package.version
              }
          }
        }
      }
    , defer: function( update , args, err, data ) {
        if( err || !data || !data.valid ) 
        {
          this.type = err ? err.message : util.findError( data ) 
          update( 'error' )
          //this way you make sure you can retry on error
          this.$empty( [ 'loading', 'token' ] )
        } 
        else 
        {
          update( 'success' )
        }
      }
    }
  }
, sms: 
  { ajax: //this verifies sms token
    { url: function( ajax, val ) {
        return typeof val === 'string' && url + 'api/v2/mblconfirmation/' + val + '.json'
      }
    , method: 'GET'
    , defer: function( update , args, err, data ) {
        if( !data.success ) {
          this.type = err ? err.message : util.findError( data ) 
          update( 'error' )
        } else {
          //TODO: get token, no token very bad!
          this.set( 'token', data.authentication_token )
          update( 'success' )
        }
      }
    }
  }
, available: 
  { ajax:
    { url: function() { 
        //todo make this an internal part of ajax defer --- add to the defer tempars and compare there
        //TODO: add from - self
        var val = this._val instanceof Value ? this._val : this
        if( typeof val.val === 'string') {
          var str = url + 'api/v1/utt_info/c153f28d950ae49a/'+val.val //+.json
          this._cached = val.val
          return str
        }
      }
    , defer: function( update , args, err, data ) {
        var val = this._val instanceof Value ? this._val : this
        if( val.val !== this._cached ) {
          update(true)
          this._update()
        } else {
          if(!data || !data.success ) {
            update( true )
          } else {
            this.set
            ('transform', ( data && data.country_info && data.country_info.mbl_available && true ) || false
            )
            update()
          }
        }
      }
    }
  }
})


},{"./util":"/Users/youzi/dev/mtv-play/api/util.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/network.js":[function(require,module,exports){
var Value = require('vigour-js/value') 

module.exports = exports = new Value()

if(!!window.cordova)
{
  
  document.addEventListener("offline", function(){
    
    exports.val = false

  }, false)

  document.addEventListener("online", function(){
    
    exports.val = navigator.connection.type

  }, false)
  
}
},{"vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/password.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
	, Value = require('vigour-js/value') //all process flags
	, util = require('./util')
  , cases = require('vigour-js/browser/cases')
  , url = config.api.url


/*
  password.reset = {
    val:token
  , password: 'newpassword'
  }

  password.forgot.val = 'email'
*/

module.exports = exports = new Value(
{ reset: 
  { ajax:
    { url: function( ajax, val ) {
        val = typeof val === 'string' 
            ? val
            : this.token && this.token.val
        return typeof val === 'string' && url+'api/v1/password_resets/'+val+'.json'
      }
    , data: function( ajax, val ) {
        return this.password && this.password.val && 
        { user: 
          { password: this.password.val
          , password_confirmation: this.password.val
          , app_version: window.package.version
          }
        }
      }
    , encode: 'json'
    , method: 'PUT'
    , defer: function( update , args, err, data ) {
        if( !data.success ) {
          this.type = err ? err.message : util.findError( data ) 
          update( 'error' )
        } else {
          this.set( 'token', data.authentication_token )
          update( 'success' )
        }
      }
    }
  }
, forgot: 
  { ajax:
    { url: url + 'api/v1/password_resets.json'
    , method: 'POST'
    , encode: 'uri'
    , headers: 
      { appVersion: 3
      , redirectUrl: config.packer.domain + "/?reset=$data"
      }
    , data: function( ajax, val ) {
        if( typeof val === 'string' ) {
          //verify check
          return { email: val }
        }
      }
    , defer: function( update , args, err, data ) {
        if( !data.success ) {
          this.type = err ? err.message : util.findError( data ) 
          update( 'error' )
        } else {
          //TODO: get token, no token very bad!
          update( 'success' )
        }
      }
    }
  }
})

//control.resetToken 
exports._name = 'password'

},{"./util":"/Users/youzi/dev/mtv-play/api/util.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/player.js":[function(require,module,exports){
var config = require('vigour-js/util/config'),
  Value = require('vigour-js/value'),
  playerApi

module.exports = exports = new Value({
  api: {
    defer: function(update, args) {

      if (args[0] !== true || playerApi) return true

      playerApi = true

      window.$ = require('zepto-browserify').$
      window.jQuery = $

      var _this = this,
        script = document.createElement('script'),
        error = script.onerror = function(err) {
          _this.type = 'script'
          _this.clearCache()
          _this.val = args[0] = 'error'
          update()
        }

      script.onload = function() {
        update('success')
      }
      script.src = config.player.web
      script.id = 'player-script'

      this._parent.debug = config.player.debug
      this._parent.settings = config.player.settings

      document.getElementsByTagName('head')[0].appendChild(script)
    }
  },
  apiDefer: function(update, args) {
    update('success')
  }
})

},{"vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","zepto-browserify":"/Users/youzi/dev/mtv-play/node_modules/zepto-browserify/zepto.js"}],"/Users/youzi/dev/mtv-play/api/purchase/index.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
	, Value = require('vigour-js/value') 
	, util = require('../util')
	, url = config.api.url
  , cases = require( 'vigour-js/browser/cases' )

/*
  purchase.val = 
  { subscription: 'year'
  , product: 'id'
  }
*/

// window.Store = {
//   buy:function( product, cb ) {
//     console.error('wtf ....')
//     cb(false, {

//     })
//   }
// }

module.exports = exports = new Value(
{ apiDefer: function( update ) {
    var _this = this

    if ( this.subscription && this.subscription.val ) {
      void(0)
    }
    if ( this.product && this.product.val ) {
      void(0)
    }

    if( !window.Store ) 
    {
      this.type = 'no store available'
     
      update( 'error' ) 
       if( this.subscription ) this.subscription.val = false
      if( this.product ) this.product.val = false 
    } 
    else {
      var product = ( this.subscription && this.subscription.val ) //monthly_de
                 || ( this.product && this.product.val ) //single_nl

      void(0)
      void(0)

      if( !product ) 
      {

        void(0)
        // console.log('suzler')
        update( true )
        if( this.subscription ) this.subscription.val = false
        if( this.product ) this.product.val = false 
      } 
      else if( cases.ios ) 
      {
        //TODO: buy product
        void(0)

        Store.buy( product, function(err, response) {

          void(0)
          void(0)

          if( response ) err = null
          if( !err ) 
          {
            try {
              localStorage.setItem( 'receiptData', JSON.stringify( response ) )
            } catch (e) {
              _this.type = e
              update('error')
            }

            _this.set
            ( 'token'
            , window.atob
              ( response.restoreTransaction
              ? response.restoreTransaction.transactionReceipt
              : response.completeTransaction.transactionReceipt
              ) 
            )
            //"{\n\t\"signature\" = \"AsaOGUF..."0\";\n}"
            //nice for debugging if stuff crashes

            //format: "{\n\t\"signature\" = \"AsaOGUF..."0\";\n}"
            //set receipt data
            //now it can't buy again after buying a subs -- is correct but for testing you may want to do this
            /*
              this.product._val = false
              this.subscription._val = false
            */

            //_this.productId.val = 'lorem'

            update( 'success' )
          }   
          else 
          {
            _this.type = err.description
            // _this.blurf = true
            update( 'error' )
          }
          if( _this.subscription ) _this.subscription.val = false
          if( _this.product ) _this.product.val = false
        })
      }
      else if ( cases.windowsMobile )
      {
        Store.buy( product, function (err, response) {
          if(response) err = null
          if(!err) 
          {
            try {
              localStorage.setItem( 'receiptData', JSON.stringify( response ) )
            } catch (e) {
              // console.error(e)
              _this.type = e
              update('error')
            }
            if (response.purchaseResults
              && response.purchaseResults.status === "Succeeded") {

              _this.set
              ( 'token'
              , response.purchaseResults.receiptXml
              )

              _this.set
              ( 'transactionId'
              , response.purchaseResults.transactionId
              )
             
              update('success')
            } else {
              _this.type = response.purchaseResults
              update('error')
            }
          }
          else 
          {
            _this.type = err
            update( 'error' )
          }
          if( _this.subscription ) _this.subscription.val = false
          if( _this.product ) _this.product.val = false 
        })
      }
      else 
      {
        void(0)
        // it's android
        function callback ( err, response ) {
          void(0)
          void(0)
          // alert(JSON.stringify(response))
          if(response) err = null
          if(!err) 
          {
            try {
              void(0)
              // alert("response " + JSON.stringify(response, false, 2))
              localStorage.setItem( 'receiptData', JSON.stringify( response ) )
            } catch (e) {
              // console.error(e)
              _this.type = e
              update('error')
              void(0)
            }
            
            void(0)

            _this.set('packageName', response.packageName)
            _this.set('subscriptionId', response.productId)
            _this.set('orderId', response.orderId)
            _this.set('purchaseTime', response.purchaseTime)
            _this.set('purchaseState', response.purchaseState)
            _this.set('developerPayload', response.developerPayload)
            _this.set('signature', response.signature)
            // if ( _this.subscription && _this.subscription.val ) {
            //   //this can become a little bit smoother
            //   _this.set('subscriptionId', response.productId)
            // }

            void(0)
            void(0)

            _this.set('token', response.purchaseToken )

            update( 'success' )

          } else {
            _this.type = err
             
            void(0)
            void(0)

            update( 'error' )
          }
          if( _this.subscription ) _this.subscription.val = false
          if( _this.product ) _this.product.val = false
        }

        if ( this.subscription && this.subscription.val ) { 
          void(0)
          Store.subscribe(product, callback)
        } else { 
          void(0)
          Store.buy(product, callback)
        }
      }
    }
  }
})

exports._name = 'purchase'

},{"../util":"/Users/youzi/dev/mtv-play/api/util.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/purchase/pricing.js":[function(require,module,exports){

var cases = require('vigour-js/browser/cases')
  , app = require('vigour-js/app')
  , config = require('vigour-js/util/config')
  , ua = require('vigour-js/browser/ua')
  , Value = require('vigour-js/value')
  , store = config.store[ ua.platform ]
  , typeMap = {}
  , currencyMap = {
      EUR:'€'
    , PLN:'zł'
    , RON:'Lei'
    }

function iosParseCurrency(val) {
  var currency = val.split('=')[1]
  return currencyMap[currency] || currency
}

function prepare( types ){
  for (var i = types.length - 1; i >= 0; i--) {
    var productId = store && store[ types[i] ]
    // console.log( productId, store, store[ types[i]] )
    if( productId ){
      typeMap[types[i]] = types[i] = productId.replace( '$region', ( app.region.val || '' ).toLowerCase())
    } else {
      types.splice(i,1)
    }
  }
}

function findType( productIdentifier ){
  for( var type in typeMap ){
    if( typeMap[type] === productIdentifier ) return type
  }
}

module.exports = exports = function( types ) {

  if( !types ) types = [ 'single', 'yearly', 'monthly' ]
  else if( !( types instanceof Array ) ) types = [ types ]

  // console.log('prep these',types)

  prepare( types )

  if( !exports._fetching && window.cordova && window.Store && types.length ) {
    void(0)
    exports._fetching = true
    Store.fetch( types, function ( err, data ) {
      exports._fetching = null
      try {
        void(0)
      } catch (e) {
        void(0)
      }
      if( err || !data ){
        void(0)
        exports.single._fetching = null // bad but im in a hurry
        exports.monthly._fetching = null
        exports.yearly._fetching = null
        return
      }
      var validProducts = data.validProducts
        , typeSpecific
        , validProduct
        , productIdentifier
        , type
        , i

      if( cases.ios ) {
        for (i = validProducts.length - 1; i >= 0; i--) {
          validProduct = validProducts[i]
          productIdentifier = validProduct.productIdentifier
          type = findType( productIdentifier )
          if( exports[type] ) {
            exports[type].val = iosParseCurrency( validProduct.priceLocale )
            + validProduct.price
          }else{
            void(0)
          }
        }
      } else {  // android
        for (i = validProducts.length - 1; i >= 0; i--) {
          validProduct = validProducts[i]
          for(type in typeMap) {
            productIdentifier = typeMap[type]
            if( validProduct[ productIdentifier ] ){
              exports[type].val = validProduct[ productIdentifier ].price
            } else {
              void(0)
            }
          }
        }
      }
    })
  }
}

exports.single = new Value(
{ val:function(){
    if( !this._fetching ) exports()
    this._fetching = true
  }
})
exports.monthly = new Value(
{ val:function(){
    if( !this._fetching ) exports()
    this._fetching = true
  }
})
exports.yearly = new Value(
{ val:function(){
    if( !this._fetching ) exports()
    this._fetching = true
  }
})

},{"vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/receipt.js":[function(require,module,exports){
var config = require( 'vigour-js/util/config' )
	, Value = require( 'vigour-js/value' ) 
	, util = require( './util' )
	, url = config.api.url
  , cases = require( 'vigour-js/browser/cases' )
  , base64 = require('vigour-js/util/encode64.js')
  , dataKey = 'receiptData'
  , retryTimer

/*
single episodes ?
receipt.val = 
{ token: user.token
, receipt: parsedReceipt for ios / android
, package: only android - pckgName
, id: only android - productId //may be nessacary later for ios
}
*/
var loginTimeout = 10000
  , previousRetryTime = 0
// document.body.style.color = 'white'

function retryAfterTimeout(){
  var retryTime
  if( retryTimer )
  { 
    clearTimeout( retryTimer )
    retryTimer = null
  }

  retryTime = previousRetryTime + ( 0.08 * loginTimeout )
  previousRetryTime = retryTime <= 60000 ? retryTime : 0

  retryTimer = setTimeout( function(){
    retryTimer = null
    finish()
  }, retryTime )
}

module.exports = exports = new Value(
{ ajax: 
  { url: url+'api/v2/subscriptions'
  , encode: 'json'
  , method: 'POST'
  , headers: { Accept:'*/*' } 
  , data: function( ajax, val ) {
      var data

      // try{
      //   alert('receipt!'+JSON.stringify(this.raw,false,2))
      // }catch(e){
      //   alert('nope!')
      // }

      if( this.token && this.token.val
       && this.receipt && this.receipt.val )
      {
        try {
          localStorage.setItem( dataKey, JSON.stringify(this.raw))  
        } catch (e) {
          this.type = e
          update('error')
        }

    
        // DO DIFFERENT THINGS FOR PRODUCTS OR SUBSCRIPTIONS!

        if( cases.ios ) {
          data = 
          { receipt: this.receipt.val
          , vendor:'apple'
          }

          if (this.episodeId) {
            data.episode = this.episodeId.val
          }
        } else if( cases.android ) {

          if( !this.packageName ) {
            void(0)
            return;
          }

          // if( !this.subscriptionId ) {
          //   alert(' add a productId for android!' )
          //   return;
          // }

          data = 
          { packageName: this.packageName.val
          , token: this.receipt.val
          , orderId: this.orderId.val
          , purchaseTime: this.purchaseTime.val
          , purchaseState: this.purchaseState.val
          , developerPayload: this.developerPayload.val
          , signature: this.signature.val
          , vendor:'google'
          }

          if ( this.episodeId ) {
            data.episode = this.episodeId.val
          }

          if ( this.subscriptionId ) {
            data.subscriptionId = this.subscriptionId.val
          }
        } else if( cases.windowsMobile ) {
          data =
          { receipt: base64.encode(this.receipt.val)
          , vendor: "microsoft"
          }
          if (this.episodeId) {
            data.episode = this.episodeId.val
          }
        }

        if ( data ) {
          data.auth_token = this.token.val
          retryAfterTimeout()
        }
      }

      // alert('mich '+JSON.stringify(data,false,2))

      // console.error('this is for michael',data)

      return data //data to send to Michael
    }
  , defer: function( update , args, err, data ) {
      // alert('response'+JSON.stringify(data,false,2))
      // console.log("receipt returns " + JSON.stringify(data, false, 2))

      localStorage.removeItem(dataKey)

      if( err || !data || !data.success ) 
      {
        this.type = err ? err.message : util.findError( data )
        update( 'error' )
        this.$empty( 'loading' )
      } 
      else 
      {
        previousRetryTime = 0
        update( 'success' )
      }
    }
  }
})

exports._name = 'receipt'

function finish () {
  var data = localStorage.getItem( dataKey )
    , token
  if ( data ) {
    token = exports.token && exports.token._val
    
    exports.once('success', resetAuthToken)
      .once('error', resetAuthToken)

    try {
      void(0)
      exports.val = JSON.parse( data )
    } catch (e) {
      void(0)
    }
  }
  else
  {
    return true
  }

  function resetAuthToken () {
    if ( token ) {
      void(0)
      exports.token.val = token
    }
  }
}

if( cases.native ) {
  document.addEventListener('resume', finish, false)
  finish()
}
},{"./util":"/Users/youzi/dev/mtv-play/api/util.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/util/encode64.js":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/encode64.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/register.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
	, Value = require('vigour-js/value') 
  , cases = require('vigour-js/browser/cases')
	, util = require('./util')
	, url = config.api.url

/*
register.val = 
{ email:'jim@vigour.io'
, password:'schaap99'
, age: *
, gender: *
, newsletter: *
}
*/

module.exports = exports = new Value(
{ ajax: 
  { url: url+'api/v1/users.json'
  , headers: {
    appVersion: 3
    , redirectUrl: config.packer.domain + "/?e=$data"
  }
  , method: 'POST'
  , encode: 'json'
  , data: function() {
      //Error 
      if( !this.email || !this.password ) return
      var devicetype = cases.iphone && 'iphone' 
                    || cases.android && 'android' 
        , data = 
          { 
            user:
            { email: this.email.val
            , password: this.password.val
            , password_confirmation: this.password.val
            , accept_data_protection_tcs: true
            , accept_mtv_country_tcs_for: this.region.val
            , app_version: window.package.version
            }
          }
        , year
        , now
        //, 'user[oauth_token]': params.FB_token
      if( this.gender ) data.user.gender = this.gender.val
      if( this.newsletter ) data.user.accept_newsletter = this.newsletter.val
      if( this.age && this.age.min_age ) 
      {
        data.user.min_age = this.age.min_age.val
        data.user.max_age = this.age.max_age.val
      }
      if( devicetype ) 
      {
        data.user.device_type = devicetype
        //TODO: figure out what this is!
        // data['user[push_notification_id]'] = cases[devicetype].val
      }
      return data
    }
  , defer: function( update , args, err, data ) {
      //err
      if( err || !data || !data.success ) {
      	this.type = err ? err.message : util.findError( data )
        update( 'error' )
        this.$empty( 'region' )
      } else {
      	update( 'success' )
      }
  	}
  }
})

exports._name = 'register'
},{"./util":"/Users/youzi/dev/mtv-play/api/util.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/tracking/context.js":[function(require,module,exports){
var map = require('./map')
  , ua = require('vigour-js/browser/ua')
  , config = require('vigour-js/util/config')
  , omniture = require('./omniture')
  , cases = require('vigour-js/browser/cases')
  , app = require('vigour-js/app/')

module.exports = function context( title, pageView, franchise ) {

  var user = omniture.user
    , pckg = window.package
    , userData = user && user.data && user.data.from.cloud && user.data.from 

  var role = user ? user.role.val : 0
    , d = new Date()
    , select
    , prop
    , _contextMap
    , branch = pckg ? pckg.repository && pckg.repository.branch : 'master'
    , device
    , userId = ( userData && userData._name ) || 'not available'

  if(userId==='userData') userId = 'unregistered'

  if(branch==='master') branch = 'dev'

  if(pageView) {
    select = 0
    prop = 'prop'
  } else {
    select = 1
    prop = 'eVar'
    // alert('evars?')
  }

  if(role===0) {
    role = 'free'
  } else if(role===1) {
    role = 'premium'
  } else if(role===2) {
    role = 'mtv mobile'
  } else if(role===3) {
    role = 'trial'
  } else {
    role = 'unregistered'
  }
  
  if( ua.platform === 'ios' ) {
    if(ua.device==='phone') {
      device = 'iPhone'
    } else {
      device = 'iPad'
    }
  }

  // console.log( '-------->', title )

  _contextMap = 
  { branch: branch 
  , title: title
  , version: window.package && window.package.version
  , role: role
  , device: device || (ua.platform + ' ' + ua.device)
  , region: config.region.val
  , lang: config.language.val
  , weekDay: map.weekDays[d.getDay()]
  , hour: d.getHours() || 24
  //age gender
  , age: userData && userData.get && userData.get( 'birthday', false).val || 'not available' 
  , gender: userData && userData.get && userData.get( 'gender', false ).val ||'not available' 
  , native: ( window.cordova || ( ua.device === 'tv' || ua.device === 'cast' ) ) ? 'native' : 'web'
  , userId: userId || 'unregistered'
  , connected: String(cases.$hasReceiver.val) || 'none'  
  , secondscreen: String(!cases.$isActive.val) || 'none'
  , devicesPresent: String(cases.$hasDevices.val) || 'none'
  , loginStyle: cases.$isLoggedIn.val && userData
              ? userData.facebook_id 
                  && userData.facebook_id.val 
                   ? 'facebook' 
                   : 'email' 
              : 'none'
  , network: app.network.val || 'not available'
  , networkOperator: 'not available'
  }

  if(!franchise) _contextMap.title = 'none'
  
  for(var i in _contextMap) {
    omniture[prop+map.vars[i][select]] = _contextMap[i]
  }

}
},{"./map":"/Users/youzi/dev/mtv-play/api/tracking/map.js","./omniture":"/Users/youzi/dev/mtv-play/api/tracking/omniture.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/api/tracking/ga.js":[function(require,module,exports){
var omniture = require('./omniture')
  , config = require('vigour-js/util/config')
  , cases = require('vigour-js/browser/cases');


  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');


  // if (cases.native && window.device && window.device.uuid) {
  //   var UUID = window.device.uuid
  //   ga('create', 'UA-43955457-6', {
  //       'storage': 'none',
  //       'clientId': UUID
  //   })
  // } else {
    ga('create', 'UA-43955457-6', 'auto')
  // }


  module.exports = window.ga
},{"./omniture":"/Users/youzi/dev/mtv-play/api/tracking/omniture.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/api/tracking/index.js":[function(require,module,exports){
  var omniture = require('./omniture'),
      postpone = require('vigour-js/browser/events/util').postpone,
      ua = require('vigour-js/browser/ua'),
      config = require('vigour-js/util/config'),
      url = require('vigour-js/browser/network/url'),
      util = require('vigour-js/util'),
      map = require('./map'),
      config = require('vigour-js/util/config'),
      context = require('./context'),
      pageName = require('./pagename'),
      ajax = require('vigour-js/browser/network/ajax'),
      facebookShare = require('../facebook/share'),
      user = require('../../app/user'),
      cases = require('vigour-js/browser/cases')

      require('./ga')

  //TODO: this is very dirty! make it work with app.user for example

  exports.omniture = omniture


  omniture.account = config.omniture

  var tlDelayed = postpone(function() {
      omniture.tl.apply(this, arguments)
      delete omniture.events
  }, 1e3)

  //omniture['prop'+map.vars.search[1]] = search
  exports.setSearchProp = postpone(function(search) {
      if (search) {
          omniture['prop' + map.vars.search[0]] = search
      }
  }, 1e3)


  var lastVid

  exports.video = function(val, media, title) {

      if (!title) title = media

      if (media.from) {
          title = media.from._cachedPath
      }

      if (typeof title !== 'string') return

      var eventType = (val === 'videoPlay' || val === 'videoPause') ? val : '',
          compare, vidEventMap = {
              videostart: [0, 0.1],
              video25: [0.25, 0.26],
              video50: [0.5, 0.51],
              video75: [0.75, 0.76],
              videofinished: [0.9, 0.95]
          }
      val = -1 * val
      if (!eventType) {
          for (var event$ in vidEventMap) {
              if (val > vidEventMap[event$][0] && val < vidEventMap[event$][1]) {
                  eventType = event$
                  compare = eventType + title
                  if (lastVid && (eventType + title) === lastVid) return
                  lastVid = eventType + title
                  break
              }
          }
      }

      //track watch, id to utt backend
      if (eventType && media.from._parent._parent) {
          var pageNameObj = pageName(media.from._parent._parent._parent._cachedPath),
              vidname = 'video > ' + pageNameObj.name

          context(pageNameObj.title, false, true)

          if (vidname.split('>').length < 7) vidname += ' > seasons 1 > episodes 1'

          vidname += (' : ' + media.get('title', '').val).toLowerCase()

          omniture['eVar' + map.vars.videoName[1]] = vidname
          omniture.events = 'event' + map.events[eventType]
              // omniture['eVar'+map.events[eventType]] = true

          if (eventType === "videostart") {
              triggerWatch(media.id.val)
          }
          omniture.tl(true, 'o', eventType)
      }
  }

  function triggerWatch(id) {
      var token = user.token.val,
          url = config.api.url + "api/v1/users/" + token + "/activities",
          isChannel = cases.$isOnChannel.val,
          payload = {
              activity: {
                  action: "watch",
                  resource_type: (isChannel) ? "simulcast" : "episode",
                  resource_id: id,
                  repository: "sensei",
                  environment: "production"
              }
          }
      ga('send', 'event', 'video', 'watch')
      if (token) {
          ajax({
              url: url,
              method: "POST",
              headers: {
                  accept: "application/json"
              },
              encode: "json",
              data: payload,
              error: function(err) {
                  void(0)
              }
          })
      }
  }

  exports.event = postpone(function(eventType, flag, link, video) {

      //send event same for all
      if (eventType === 'swipeUp') {
          ga('send', 'event', 'multiscreen', 'swipe-up');
      };


      omniture.events = 'event' + map.events[eventType]

      context()

      if (eventType === 'upgradeMtvFailed') {
          omniture['eVar' + map.events.mtvMobileFailed] = flag
      } else if (eventType === 'teaserClick') {
          // alert('fuckery')
          // omniture['eVar'+map.events.teaserCollection ] = flag
          // omniture['eVar'+map.events.teaserClicked ] = link && pageName(link).name //get link yourself its a path
      } else if (eventType) {
          // omniture['eVar'+map.events[eventType] ] = flag || true
      }
      if (eventType === 'search') {
          tlDelayed(true, 'o', eventType)
      } {
          omniture.tl(true, 'o', eventType)
          delete omniture.events
      }
      if (eventType === 'sharingFacebookSucces') {
          void(0)
          triggerFbShare()
      }
  }, 1e3)
  function triggerFbShare() {
      var auth_token = user.token.val,
          resourceType = "UNKNOWN",
          id = "UNKNOWN",
          url = config.api.url + "/api/v1/users/" + auth_token + "/activities",
          payload = {
              "activity": {
                  "action": "share",
                  "resource_type": resourceType,
                  "resource_id": id,
                  "repository": "sensei",
                  "environment": "production"
              }
          }
      void(0)
      void(0)
      void(0)
      void(0)
      void(0)
          // ajax({
          //   url: url
          //   , method: "POST"
          //   , headers: {
          //     accept: "application/json"
          //   }
          //   , data: payload
          //   , error: function (err) {
          //     console.error("POST", url, payload, err)
          //   }
          // })
          ga('send', 'event', 'sharing', 'facebook')
  }

  exports.popup = postpone(function(name) {
      if (!name) return
      var platform = ua.device === 'desktop' ? 'web' : ua.platform,
          pageName = config.region.val + ' > ' + platform + ' > '
      context(name, true, false)
      omniture.pageName = (pageName + 'other > ' + name).toLowerCase()
      omniture.t()
  }, 1e3)

  exports.pageView = postpone(function(obj) {

      if (obj.from) {
          obj = obj.from._cachedPath
      }

      if (typeof obj !== 'string') return

      var pageNameObj = pageName(obj),
          title = pageNameObj.title

      omniture.pageName = (pageNameObj.name).toLowerCase()
      context(title, true, ~obj.lastIndexOf('.'))

      omniture.t()

      //USERLEVEL DIMENSION
      // if(userID) {
      //   ga('set', 'dimensionage', 16);  &cd2=M                                  // Gender (M/F)
      // }

      if (cases.$isLoggedIn) {
          ga('set', 'userId', user.id.val);
      };

      ga('set', {
          'anonymizeIp': true,
          'appName': 'MTV Play',
      });

      ga('send', 'screenview', {
              'screenName': pageNameObj.name
          })
          //send set appview
      if (cases.chromecast) {
          ga('set', 'dimension2', 'Chromecast')
      }
      if (cases.tv) {
          ga('set', 'dimension3', 'tv')
              ajax({
                  url: 'http://www.google-analytics.com/collect?v=1&tid=' + 'UA-43955457-6' + '-1&cid='+ 5555 +'&t=screenview&dp=%2F'+ pageNameObj.name,
                  method: "POST",
                  headers: {
                      accept: "application/json"
                  }
              })
      }


      // console.log(pageNameObj.name)

  }, 1e3)

},{"../../app/user":"/Users/youzi/dev/mtv-play/app/user.js","../facebook/share":"/Users/youzi/dev/mtv-play/api/facebook/share.js","./context":"/Users/youzi/dev/mtv-play/api/tracking/context.js","./ga":"/Users/youzi/dev/mtv-play/api/tracking/ga.js","./map":"/Users/youzi/dev/mtv-play/api/tracking/map.js","./omniture":"/Users/youzi/dev/mtv-play/api/tracking/omniture.js","./pagename":"/Users/youzi/dev/mtv-play/api/tracking/pagename.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js","vigour-js/browser/network/ajax":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/ajax.js","vigour-js/browser/network/url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/url.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/api/tracking/lib/AppMeasurement.js":[function(require,module,exports){
/*
 ============== DO NOT ALTER ANYTHING BELOW THIS LINE ! ===============

 AppMeasurement for JavaScript version: 1.4.1
 Copyright 1996-2013 Adobe, Inc. All Rights Reserved
 More info available at http://www.omniture.com
*/
function AppMeasurement(){var s=this;s.version="1.4.1";var w=window;if(!w.s_c_in)w.s_c_il=[],w.s_c_in=0;s._il=w.s_c_il;s._in=w.s_c_in;s._il[s._in]=s;w.s_c_in++;s._c="s_c";var k=w.sb;k||(k=null);var m=w,i,o;try{i=m.parent;for(o=m.location;i&&i.location&&o&&""+i.location!=""+o&&m.location&&""+i.location!=""+m.location&&i.location.host==o.host;)m=i,i=m.parent}catch(p){}s.eb=function(s){try{void(0)}catch(a){}};s.ta=function(s){return""+parseInt(s)==""+s};s.replace=function(s,a,c){if(!s||s.indexOf(a)<
0)return s;return s.split(a).join(c)};s.escape=function(b){var a,c;if(!b)return b;b=encodeURIComponent(b);for(a=0;a<7;a++)c="+~!*()'".substring(a,a+1),b.indexOf(c)>=0&&(b=s.replace(b,c,"%"+c.charCodeAt(0).toString(16).toUpperCase()));return b};s.unescape=function(b){if(!b)return b;b=b.indexOf("+")>=0?s.replace(b,"+"," "):b;try{return decodeURIComponent(b)}catch(a){}return unescape(b)};s.Va=function(){var b=w.location.hostname,a=s.fpCookieDomainPeriods,c;if(!a)a=s.cookieDomainPeriods;if(b&&!s.cookieDomain&&
!/^[0-9.]+$/.test(b)&&(a=a?parseInt(a):2,a=a>2?a:2,c=b.lastIndexOf("."),c>=0)){for(;c>=0&&a>1;)c=b.lastIndexOf(".",c-1),a--;s.cookieDomain=c>0?b.substring(c):b}return s.cookieDomain};s.c_r=s.cookieRead=function(b){b=s.escape(b);var a=" "+s.d.cookie,c=a.indexOf(" "+b+"="),e=c<0?c:a.indexOf(";",c);b=c<0?"":s.unescape(a.substring(c+2+b.length,e<0?a.length:e));return b!="[[B]]"?b:""};s.c_w=s.cookieWrite=function(b,a,c){var e=s.Va(),d=s.cookieLifetime,f;a=""+a;d=d?(""+d).toUpperCase():"";c&&d!="SESSION"&&
d!="NONE"&&((f=a!=""?parseInt(d?d:0):-60)?(c=new Date,c.setTime(c.getTime()+f*1E3)):c==1&&(c=new Date,f=c.getYear(),c.setYear(f+5+(f<1900?1900:0))));if(b&&d!="NONE")return s.d.cookie=b+"="+s.escape(a!=""?a:"[[B]]")+"; path=/;"+(c&&d!="SESSION"?" expires="+c.toGMTString()+";":"")+(e?" domain="+e+";":""),s.cookieRead(b)==a;return 0};s.C=[];s.B=function(b,a,c){if(s.ma)return 0;if(!s.maxDelay)s.maxDelay=250;var e=0,d=(new Date).getTime()+s.maxDelay,f=s.d.qb,g=["webkitvisibilitychange","visibilitychange"];
if(!f)f=s.d.rb;if(f&&f=="prerender"){if(!s.X){s.X=1;for(c=0;c<g.length;c++)s.d.addEventListener(g[c],function(){var a=s.d.qb;if(!a)a=s.d.rb;if(a=="visible")s.X=0,s.delayReady()})}e=1;d=0}else c||s.q("_d")&&(e=1);e&&(s.C.push({m:b,a:a,t:d}),s.X||setTimeout(s.delayReady,s.maxDelay));return e};s.delayReady=function(){var b=(new Date).getTime(),a=0,c;for(s.q("_d")&&(a=1);s.C.length>0;){c=s.C.shift();if(a&&!c.t&&c.t>b){s.C.unshift(c);setTimeout(s.delayReady,parseInt(s.maxDelay/2));break}s.ma=1;s[c.m].apply(s,
c.a);s.ma=0}};s.setAccount=s.sa=function(b){var a,c;if(!s.B("setAccount",arguments))if(s.account=b,s.allAccounts){a=s.allAccounts.concat(b.split(","));s.allAccounts=[];a.sort();for(c=0;c<a.length;c++)(c==0||a[c-1]!=a[c])&&s.allAccounts.push(a[c])}else s.allAccounts=b.split(",")};s.foreachVar=function(b,a){var c,e,d,f,g="";d=e="";if(s.lightProfileID)c=s.H,(g=s.lightTrackVars)&&(g=","+g+","+s.ba.join(",")+",");else{c=s.c;if(s.pe||s.linkType)if(g=s.linkTrackVars,e=s.linkTrackEvents,s.pe&&(d=s.pe.substring(0,
1).toUpperCase()+s.pe.substring(1),s[d]))g=s[d].pb,e=s[d].ob;g&&(g=","+g+","+s.z.join(",")+",");e&&g&&(g+=",events,")}a&&(a=","+a+",");for(e=0;e<c.length;e++)d=c[e],(f=s[d])&&(!g||g.indexOf(","+d+",")>=0)&&(!a||a.indexOf(","+d+",")>=0)&&b(d,f)};s.J=function(b,a,c,e,d){var f="",g,j,w,q,i=0;b=="contextData"&&(b="c");if(a){for(g in a)if(!Object.prototype[g]&&(!d||g.substring(0,d.length)==d)&&a[g]&&(!c||c.indexOf(","+(e?e+".":"")+g+",")>=0)){w=!1;if(i)for(j=0;j<i.length;j++)g.substring(0,i[j].length)==
i[j]&&(w=!0);if(!w&&(f==""&&(f+="&"+b+"."),j=a[g],d&&(g=g.substring(d.length)),g.length>0))if(w=g.indexOf("."),w>0)j=g.substring(0,w),w=(d?d:"")+j+".",i||(i=[]),i.push(w),f+=s.J(j,a,c,e,w);else if(typeof j=="boolean"&&(j=j?"true":"false"),j){if(e=="retrieveLightData"&&d.indexOf(".contextData.")<0)switch(w=g.substring(0,4),q=g.substring(4),g){case "transactionID":g="xact";break;case "channel":g="ch";break;case "campaign":g="v0";break;default:s.ta(q)&&(w=="prop"?g="c"+q:w=="eVar"?g="v"+q:w=="list"?
g="l"+q:w=="hier"&&(g="h"+q,j=j.substring(0,255)))}f+="&"+s.escape(g)+"="+s.escape(j)}}f!=""&&(f+="&."+b)}return f};s.Xa=function(){var b="",a,c,e,d,f,g,j,w,i="",k="",m=c="";if(s.lightProfileID)a=s.H,(i=s.lightTrackVars)&&(i=","+i+","+s.ba.join(",")+",");else{a=s.c;if(s.pe||s.linkType)if(i=s.linkTrackVars,k=s.linkTrackEvents,s.pe&&(c=s.pe.substring(0,1).toUpperCase()+s.pe.substring(1),s[c]))i=s[c].pb,k=s[c].ob;i&&(i=","+i+","+s.z.join(",")+",");k&&(k=","+k+",",i&&(i+=",events,"));s.events2&&(m+=(m!=
""?",":"")+s.events2)}s.AudienceManagement&&s.AudienceManagement.isReady()&&(b+=s.J("d",s.AudienceManagement.getEventCallConfigParams()));for(c=0;c<a.length;c++){d=a[c];f=s[d];e=d.substring(0,4);g=d.substring(4);!f&&d=="events"&&m&&(f=m,m="");if(f&&(!i||i.indexOf(","+d+",")>=0)){switch(d){case "supplementalDataID":d="sdid";break;case "timestamp":d="ts";break;case "dynamicVariablePrefix":d="D";break;case "visitorID":d="vid";break;case "marketingCloudVisitorID":d="mid";break;case "analyticsVisitorID":d=
"aid";break;case "audienceManagerLocationHint":d="aamlh";break;case "audienceManagerBlob":d="aamb";break;case "authState":d="as";break;case "pageURL":d="g";if(f.length>255)s.pageURLRest=f.substring(255),f=f.substring(0,255);break;case "pageURLRest":d="-g";break;case "referrer":d="r";break;case "vmk":case "visitorMigrationKey":d="vmt";break;case "visitorMigrationServer":d="vmf";s.ssl&&s.visitorMigrationServerSecure&&(f="");break;case "visitorMigrationServerSecure":d="vmf";!s.ssl&&s.visitorMigrationServer&&
(f="");break;case "charSet":d="ce";break;case "visitorNamespace":d="ns";break;case "cookieDomainPeriods":d="cdp";break;case "cookieLifetime":d="cl";break;case "variableProvider":d="vvp";break;case "currencyCode":d="cc";break;case "channel":d="ch";break;case "transactionID":d="xact";break;case "campaign":d="v0";break;case "latitude":d="lat";break;case "longitude":d="lon";break;case "resolution":d="s";break;case "colorDepth":d="c";break;case "javascriptVersion":d="j";break;case "javaEnabled":d="v";
break;case "cookiesEnabled":d="k";break;case "browserWidth":d="bw";break;case "browserHeight":d="bh";break;case "connectionType":d="ct";break;case "homepage":d="hp";break;case "events":m&&(f+=(f!=""?",":"")+m);if(k){g=f.split(",");f="";for(e=0;e<g.length;e++)j=g[e],w=j.indexOf("="),w>=0&&(j=j.substring(0,w)),w=j.indexOf(":"),w>=0&&(j=j.substring(0,w)),k.indexOf(","+j+",")>=0&&(f+=(f?",":"")+g[e])}break;case "events2":f="";break;case "contextData":b+=s.J("c",s[d],i,d);f="";break;case "lightProfileID":d=
"mtp";break;case "lightStoreForSeconds":d="mtss";s.lightProfileID||(f="");break;case "lightIncrementBy":d="mti";s.lightProfileID||(f="");break;case "retrieveLightProfiles":d="mtsr";break;case "deleteLightProfiles":d="mtsd";break;case "retrieveLightData":s.retrieveLightProfiles&&(b+=s.J("mts",s[d],i,d));f="";break;default:s.ta(g)&&(e=="prop"?d="c"+g:e=="eVar"?d="v"+g:e=="list"?d="l"+g:e=="hier"&&(d="h"+g,f=f.substring(0,255)))}f&&(b+="&"+d+"="+(d.substring(0,3)!="pev"?s.escape(f):f))}d=="pev3"&&s.g&&
(b+=s.g)}return b};s.u=function(s){var a=s.tagName;if(""+s.wb!="undefined"||""+s.ib!="undefined"&&(""+s.ib).toUpperCase()!="HTML")return"";a=a&&a.toUpperCase?a.toUpperCase():"";a=="SHAPE"&&(a="");a&&((a=="INPUT"||a=="BUTTON")&&s.type&&s.type.toUpperCase?a=s.type.toUpperCase():!a&&s.href&&(a="A"));return a};s.oa=function(s){var a=s.href?s.href:"",c,e,d;c=a.indexOf(":");e=a.indexOf("?");d=a.indexOf("/");if(a&&(c<0||e>=0&&c>e||d>=0&&c>d))e=s.protocol&&s.protocol.length>1?s.protocol:l.protocol?l.protocol:
"",c=l.pathname.lastIndexOf("/"),a=(e?e+"//":"")+(s.host?s.host:l.host?l.host:"")+(h.substring(0,1)!="/"?l.pathname.substring(0,c<0?0:c)+"/":"")+a;return a};s.D=function(b){var a=s.u(b),c,e,d="",f=0;if(a){c=b.protocol;e=b.onclick;if(b.href&&(a=="A"||a=="AREA")&&(!e||!c||c.toLowerCase().indexOf("javascript")<0))d=s.oa(b);else if(e)d=s.replace(s.replace(s.replace(s.replace(""+e,"\r",""),"\n",""),"\t","")," ",""),f=2;else if(a=="INPUT"||a=="SUBMIT"){if(b.value)d=b.value;else if(b.innerText)d=b.innerText;
else if(b.textContent)d=b.textContent;f=3}else if(b.src&&a=="IMAGE")d=b.src;if(d)return{id:d.substring(0,100),type:f}}return 0};s.tb=function(b){for(var a=s.u(b),c=s.D(b);b&&!c&&a!="BODY";)if(b=b.parentElement?b.parentElement:b.parentNode)a=s.u(b),c=s.D(b);if(!c||a=="BODY")b=0;if(b&&(a=b.onclick?""+b.onclick:"",a.indexOf(".tl(")>=0||a.indexOf(".trackLink(")>=0))b=0;return b};s.hb=function(){var b,a,c=s.linkObject,e=s.linkType,d=s.linkURL,f,g;s.ca=1;if(!c)s.ca=0,c=s.clickObject;if(c){b=s.u(c);for(a=
s.D(c);c&&!a&&b!="BODY";)if(c=c.parentElement?c.parentElement:c.parentNode)b=s.u(c),a=s.D(c);if(!a||b=="BODY")c=0;if(c){var j=c.onclick?""+c.onclick:"";if(j.indexOf(".tl(")>=0||j.indexOf(".trackLink(")>=0)c=0}}else s.ca=1;!d&&c&&(d=s.oa(c));d&&!s.linkLeaveQueryString&&(f=d.indexOf("?"),f>=0&&(d=d.substring(0,f)));if(!e&&d){var i=0,k=0,m;if(s.trackDownloadLinks&&s.linkDownloadFileTypes){j=d.toLowerCase();f=j.indexOf("?");g=j.indexOf("#");f>=0?g>=0&&g<f&&(f=g):f=g;f>=0&&(j=j.substring(0,f));f=s.linkDownloadFileTypes.toLowerCase().split(",");
for(g=0;g<f.length;g++)(m=f[g])&&j.substring(j.length-(m.length+1))=="."+m&&(e="d")}if(s.trackExternalLinks&&!e&&(j=d.toLowerCase(),s.ra(j))){if(!s.linkInternalFilters)s.linkInternalFilters=w.location.hostname;f=0;s.linkExternalFilters?(f=s.linkExternalFilters.toLowerCase().split(","),i=1):s.linkInternalFilters&&(f=s.linkInternalFilters.toLowerCase().split(","));if(f){for(g=0;g<f.length;g++)m=f[g],j.indexOf(m)>=0&&(k=1);k?i&&(e="e"):i||(e="e")}}}s.linkObject=c;s.linkURL=d;s.linkType=e;if(s.trackClickMap||
s.trackInlineStats)if(s.g="",c){e=s.pageName;d=1;c=c.sourceIndex;if(!e)e=s.pageURL,d=0;if(w.s_objectID)a.id=w.s_objectID,c=a.type=1;if(e&&a&&a.id&&b)s.g="&pid="+s.escape(e.substring(0,255))+(d?"&pidt="+d:"")+"&oid="+s.escape(a.id.substring(0,100))+(a.type?"&oidt="+a.type:"")+"&ot="+b+(c?"&oi="+c:"")}};s.Ya=function(){var b=s.ca,a=s.linkType,c=s.linkURL,e=s.linkName;if(a&&(c||e))a=a.toLowerCase(),a!="d"&&a!="e"&&(a="o"),s.pe="lnk_"+a,s.pev1=c?s.escape(c):"",s.pev2=e?s.escape(e):"",b=1;s.abort&&(b=
0);if(s.trackClickMap||s.trackInlineStats){a={};c=0;var d=s.cookieRead("s_sq"),f=d?d.split("&"):0,g,j,w;d=0;if(f)for(g=0;g<f.length;g++)j=f[g].split("="),e=s.unescape(j[0]).split(","),j=s.unescape(j[1]),a[j]=e;e=s.account.split(",");if(b||s.g){b&&!s.g&&(d=1);for(j in a)if(!Object.prototype[j])for(g=0;g<e.length;g++){d&&(w=a[j].join(","),w==s.account&&(s.g+=(j.charAt(0)!="&"?"&":"")+j,a[j]=[],c=1));for(f=0;f<a[j].length;f++)w=a[j][f],w==e[g]&&(d&&(s.g+="&u="+s.escape(w)+(j.charAt(0)!="&"?"&":"")+j+
"&u=0"),a[j].splice(f,1),c=1)}b||(c=1);if(c){d="";g=2;!b&&s.g&&(d=s.escape(e.join(","))+"="+s.escape(s.g),g=1);for(j in a)!Object.prototype[j]&&g>0&&a[j].length>0&&(d+=(d?"&":"")+s.escape(a[j].join(","))+"="+s.escape(j),g--);s.cookieWrite("s_sq",d)}}}return b};s.Za=function(){if(!s.nb){var b=new Date,a=m.location,c,e,d=e=c="",f="",g="",w="1.2",i=s.cookieWrite("s_cc","true",0)?"Y":"N",k="",n="";if(b.setUTCDate&&(w="1.3",(0).toPrecision&&(w="1.5",b=[],b.forEach))){w="1.6";e=0;c={};try{e=new Iterator(c),
e.next&&(w="1.7",b.reduce&&(w="1.8",w.trim&&(w="1.8.1",Date.parse&&(w="1.8.2",Object.create&&(w="1.8.5")))))}catch(o){}}c=screen.width+"x"+screen.height;d=navigator.javaEnabled()?"Y":"N";e=screen.pixelDepth?screen.pixelDepth:screen.colorDepth;f=s.w.innerWidth?s.w.innerWidth:s.d.documentElement.offsetWidth;g=s.w.innerHeight?s.w.innerHeight:s.d.documentElement.offsetHeight;try{s.b.addBehavior("#default#homePage"),k=s.b.ub(a)?"Y":"N"}catch(p){}try{s.b.addBehavior("#default#clientCaps"),n=s.b.connectionType}catch(r){}s.resolution=
c;s.colorDepth=e;s.javascriptVersion=w;s.javaEnabled=d;s.cookiesEnabled=i;s.browserWidth=f;s.browserHeight=g;s.connectionType=n;s.homepage=k;s.nb=1}};s.I={};s.loadModule=function(b,a){var c=s.I[b];if(!c){c=w["AppMeasurement_Module_"+b]?new w["AppMeasurement_Module_"+b](s):{};s.I[b]=s[b]=c;c.Fa=function(){return c.Ja};c.Ka=function(a){if(c.Ja=a)s[b+"_onLoad"]=a,s.B(b+"_onLoad",[s,c],1)||a(s,c)};try{Object.defineProperty?Object.defineProperty(c,"onLoad",{get:c.Fa,set:c.Ka}):c._olc=1}catch(e){c._olc=
1}}a&&(s[b+"_onLoad"]=a,s.B(b+"_onLoad",[s,c],1)||a(s,c))};s.q=function(b){var a,c;for(a in s.I)if(!Object.prototype[a]&&(c=s.I[a])){if(c._olc&&c.onLoad)c._olc=0,c.onLoad(s,c);if(c[b]&&c[b]())return 1}return 0};s.bb=function(){var b=Math.floor(Math.random()*1E13),a=s.visitorSampling,c=s.visitorSamplingGroup;c="s_vsn_"+(s.visitorNamespace?s.visitorNamespace:s.account)+(c?"_"+c:"");var e=s.cookieRead(c);if(a){e&&(e=parseInt(e));if(!e){if(!s.cookieWrite(c,b))return 0;e=b}if(e%1E4>v)return 0}return 1};
s.K=function(b,a){var c,e,d,f,g,w;for(c=0;c<2;c++){e=c>0?s.ia:s.c;for(d=0;d<e.length;d++)if(f=e[d],(g=b[f])||b["!"+f]){if(!a&&(f=="contextData"||f=="retrieveLightData")&&s[f])for(w in s[f])g[w]||(g[w]=s[f][w]);s[f]=g}}};s.Aa=function(b,a){var c,e,d,f;for(c=0;c<2;c++){e=c>0?s.ia:s.c;for(d=0;d<e.length;d++)f=e[d],b[f]=s[f],!a&&!b[f]&&(b["!"+f]=1)}};s.Ua=function(s){var a,c,e,d,f,g=0,w,i="",k="";if(s&&s.length>255&&(a=""+s,c=a.indexOf("?"),c>0&&(w=a.substring(c+1),a=a.substring(0,c),d=a.toLowerCase(),
e=0,d.substring(0,7)=="http://"?e+=7:d.substring(0,8)=="https://"&&(e+=8),c=d.indexOf("/",e),c>0&&(d=d.substring(e,c),f=a.substring(c),a=a.substring(0,c),d.indexOf("google")>=0?g=",q,ie,start,search_key,word,kw,cd,":d.indexOf("yahoo.co")>=0&&(g=",p,ei,"),g&&w)))){if((s=w.split("&"))&&s.length>1){for(e=0;e<s.length;e++)d=s[e],c=d.indexOf("="),c>0&&g.indexOf(","+d.substring(0,c)+",")>=0?i+=(i?"&":"")+d:k+=(k?"&":"")+d;i&&k?w=i+"&"+k:k=""}c=253-(w.length-k.length)-a.length;s=a+(c>0?f.substring(0,c):
"")+"?"+w}return s};s.U=!1;s.O=!1;s.Ia=function(b){s.marketingCloudVisitorID=b;s.O=!0;s.k()};s.R=!1;s.L=!1;s.Ca=function(b){s.analyticsVisitorID=b;s.L=!0;s.k()};s.T=!1;s.N=!1;s.Ea=function(b){s.audienceManagerLocationHint=b;s.N=!0;s.k()};s.S=!1;s.M=!1;s.Da=function(b){s.audienceManagerBlob=b;s.M=!0;s.k()};s.isReadyToTrack=function(){var b=!0,a=s.visitor;if(a&&a.isAllowed()){if(!s.U&&!s.marketingCloudVisitorID&&a.getMarketingCloudVisitorID&&(s.U=!0,s.marketingCloudVisitorID=a.getMarketingCloudVisitorID([s,
s.Ia]),s.marketingCloudVisitorID))s.O=!0;if(!s.R&&!s.analyticsVisitorID&&a.getAnalyticsVisitorID&&(s.R=!0,s.analyticsVisitorID=a.getAnalyticsVisitorID([s,s.Ca]),s.analyticsVisitorID))s.L=!0;if(!s.T&&!s.audienceManagerLocationHint&&a.getAudienceManagerLocationHint&&(s.T=!0,s.audienceManagerLocationHint=a.getAudienceManagerLocationHint([s,s.Ea]),s.audienceManagerLocationHint))s.N=!0;if(!s.S&&!s.audienceManagerBlob&&a.getAudienceManagerBlob&&(s.S=!0,s.audienceManagerBlob=a.getAudienceManagerBlob([s,
s.Da]),s.audienceManagerBlob))s.M=!0;if(s.U&&!s.O&&!s.marketingCloudVisitorID||s.R&&!s.L&&!s.analyticsVisitorID||s.T&&!s.N&&!s.audienceManagerLocationHint||s.S&&!s.M&&!s.audienceManagerBlob)b=!1}return b};s.j=k;s.l=0;s.callbackWhenReadyToTrack=function(b,a,c){var e;e={};e.Oa=b;e.Na=a;e.La=c;if(s.j==k)s.j=[];s.j.push(e);if(s.l==0)s.l=setInterval(s.k,100)};s.k=function(){var b;if(s.isReadyToTrack()){if(s.l)clearInterval(s.l),s.l=0;if(s.j!=k)for(;s.j.length>0;)b=s.j.shift(),b.Na.apply(b.Oa,b.La)}};s.Ga=
function(b){var a,c,e=k,d=k;if(!s.isReadyToTrack()){a=[];if(b!=k)for(c in e={},b)e[c]=b[c];d={};s.Aa(d,!0);a.push(e);a.push(d);s.callbackWhenReadyToTrack(s,s.track,a);return!0}return!1};s.Wa=function(){var b=s.cookieRead("s_fid"),a="",c="",e;e=8;var d=4;if(!b||b.indexOf("-")<0){for(b=0;b<16;b++)e=Math.floor(Math.random()*e),a+="0123456789ABCDEF".substring(e,e+1),e=Math.floor(Math.random()*d),c+="0123456789ABCDEF".substring(e,e+1),e=d=16;b=a+"-"+c}s.cookieWrite("s_fid",b,1)||(b=0);return b};s.t=s.track=
function(b,a){var c,e=new Date,d="s"+Math.floor(e.getTime()/108E5)%10+Math.floor(Math.random()*1E13),f=e.getYear();f="t="+s.escape(e.getDate()+"/"+e.getMonth()+"/"+(f<1900?f+1900:f)+" "+e.getHours()+":"+e.getMinutes()+":"+e.getSeconds()+" "+e.getDay()+" "+e.getTimezoneOffset());if(s.visitor){if(s.visitor.getAuthState)s.authState=s.visitor.getAuthState();if(!s.supplementalDataID&&s.visitor.getSupplementalDataID)s.supplementalDataID=s.visitor.getSupplementalDataID("AppMeasurement:"+s._in,s.expectSupplementalData?
!1:!0)}s.q("_s");if(!s.B("track",arguments)){if(!s.Ga(b)){a&&s.K(a);b&&(c={},s.Aa(c,0),s.K(b));if(s.bb()){if(!s.analyticsVisitorID&&!s.marketingCloudVisitorID)s.fid=s.Wa();s.hb();s.usePlugins&&s.doPlugins&&s.doPlugins(s);if(s.account){if(!s.abort){if(s.trackOffline&&!s.timestamp)s.timestamp=Math.floor(e.getTime()/1E3);e=w.location;if(!s.pageURL)s.pageURL=e.href?e.href:e;if(!s.referrer&&!s.Ba)s.referrer=m.document.referrer,s.Ba=1;s.referrer=s.Ua(s.referrer);s.q("_g")}if(s.Ya()&&!s.abort)s.Za(),f+=
s.Xa(),s.gb(d,f),s.q("_t"),s.referrer=""}}b&&s.K(c,1)}s.abort=s.supplementalDataID=s.timestamp=s.pageURLRest=s.linkObject=s.clickObject=s.linkURL=s.linkName=s.linkType=w.vb=s.pe=s.pev1=s.pev2=s.pev3=s.g=0}};s.tl=s.trackLink=function(b,a,c,e,d){s.linkObject=b;s.linkType=a;s.linkName=c;if(d)s.i=b,s.p=d;return s.track(e)};s.trackLight=function(b,a,c,e){s.lightProfileID=b;s.lightStoreForSeconds=a;s.lightIncrementBy=c;return s.track(e)};s.clearVars=function(){var b,a;for(b=0;b<s.c.length;b++)if(a=s.c[b],
a.substring(0,4)=="prop"||a.substring(0,4)=="eVar"||a.substring(0,4)=="hier"||a.substring(0,4)=="list"||a=="channel"||a=="events"||a=="eventList"||a=="products"||a=="productList"||a=="purchaseID"||a=="transactionID"||a=="state"||a=="zip"||a=="campaign")s[a]=void 0};s.tagContainerMarker="";s.gb=function(b,a){var c,e=s.trackingServer;c="";var d=s.dc,f="sc.",w=s.visitorNamespace;if(e){if(s.trackingServerSecure&&s.ssl)e=s.trackingServerSecure}else{if(!w)w=s.account,e=w.indexOf(","),e>=0&&(w=w.substring(0,
e)),w=w.replace(/[^A-Za-z0-9]/g,"");c||(c="2o7.net");d=d?(""+d).toLowerCase():"d1";c=="2o7.net"&&(d=="d1"?d="112":d=="d2"&&(d="122"),f="");e=w+"."+d+"."+f+c}c=s.ssl?"https://":"http://";d=s.AudienceManagement&&s.AudienceManagement.isReady();c+=e+"/b/ss/"+s.account+"/"+(s.mobile?"5.":"")+(d?"10":"1")+"/JS-"+s.version+(s.mb?"T":"")+(s.tagContainerMarker?"-"+s.tagContainerMarker:"")+"/"+b+"?AQB=1&ndh=1&pf=1&"+(d?"callback=s_c_il["+s._in+"].AudienceManagement.passData&":"")+a+"&AQE=1";s.Sa(c);s.Y()};
s.Sa=function(b){s.e||s.$a();s.e.push(b);s.aa=s.r();s.za()};s.$a=function(){s.e=s.cb();if(!s.e)s.e=[]};s.cb=function(){var b,a;if(s.fa()){try{(a=w.localStorage.getItem(s.da()))&&(b=w.JSON.parse(a))}catch(c){}return b}};s.fa=function(){var b=!0;if(!s.trackOffline||!s.offlineFilename||!w.localStorage||!w.JSON)b=!1;return b};s.pa=function(){var b=0;if(s.e)b=s.e.length;s.v&&b++;return b};s.Y=function(){if(!s.v)if(s.qa=k,s.ea)s.aa>s.G&&s.xa(s.e),s.ha(500);else{var b=s.Ma();if(b>0)s.ha(b);else if(b=s.na())s.v=
1,s.fb(b),s.jb(b)}};s.ha=function(b){if(!s.qa)b||(b=0),s.qa=setTimeout(s.Y,b)};s.Ma=function(){var b;if(!s.trackOffline||s.offlineThrottleDelay<=0)return 0;b=s.r()-s.wa;if(s.offlineThrottleDelay<b)return 0;return s.offlineThrottleDelay-b};s.na=function(){if(s.e.length>0)return s.e.shift()};s.fb=function(b){if(s.debugTracking){var a="AppMeasurement Debug: "+b;b=b.split("&");var c;for(c=0;c<b.length;c++)a+="\n\t"+s.unescape(b[c]);s.eb(a)}};s.Ha=function(){return s.marketingCloudVisitorID||s.analyticsVisitorID};
s.Q=!1;var n;try{n=JSON.parse('{"x":"y"}')}catch(r){n=null}n&&n.x=="y"?(s.Q=!0,s.P=function(s){return JSON.parse(s)}):w.$&&w.$.parseJSON?(s.P=function(s){return w.$.parseJSON(s)},s.Q=!0):s.P=function(){return null};s.jb=function(b){var a,c,e;if(s.Ha()&&b.length>2047&&(typeof XMLHttpRequest!="undefined"&&(a=new XMLHttpRequest,"withCredentials"in a?c=1:a=0),!a&&typeof XDomainRequest!="undefined"&&(a=new XDomainRequest,c=2),a&&s.AudienceManagement&&s.AudienceManagement.isReady()))s.Q?a.ja=!0:a=0;!a&&
s.ab&&(b=b.substring(0,2047));if(!a&&s.d.createElement&&s.AudienceManagement&&s.AudienceManagement.isReady()&&(a=s.d.createElement("SCRIPT"))&&"async"in a)(e=(e=s.d.getElementsByTagName("HEAD"))&&e[0]?e[0]:s.d.body)?(a.type="text/javascript",a.setAttribute("async","async"),c=3):a=0;if(!a)a=new Image,a.alt="";a.la=function(){try{if(s.ga)clearTimeout(s.ga),s.ga=0;if(a.timeout)clearTimeout(a.timeout),a.timeout=0}catch(b){}};a.onload=a.lb=function(){a.la();s.Ra();s.V();s.v=0;s.Y();if(a.ja){a.ja=!1;try{var b=
s.P(a.responseText);AudienceManagement.passData(b)}catch(c){}}};a.onabort=a.onerror=a.Ta=function(){a.la();(s.trackOffline||s.ea)&&s.v&&s.e.unshift(s.Qa);s.v=0;s.aa>s.G&&s.xa(s.e);s.V();s.ha(500)};a.onreadystatechange=function(){a.readyState==4&&(a.status==200?a.lb():a.Ta())};s.wa=s.r();if(c==1||c==2){var d=b.indexOf("?");e=b.substring(0,d);d=b.substring(d+1);d=d.replace(/&callback=[a-zA-Z0-9_.\[\]]+/,"");c==1?(a.open("POST",e,!0),a.send(d)):c==2&&(a.open("POST",e),a.send(d))}else if(a.src=b,c==3){if(s.ua)try{e.removeChild(s.ua)}catch(f){}e.firstChild?
e.insertBefore(a,e.firstChild):e.appendChild(a);s.ua=s.Pa}if(a.abort)s.ga=setTimeout(a.abort,5E3);s.Qa=b;s.Pa=w["s_i_"+s.replace(s.account,",","_")]=a;if(s.useForcedLinkTracking&&s.A||s.p){if(!s.forcedLinkTrackingTimeout)s.forcedLinkTrackingTimeout=250;s.W=setTimeout(s.V,s.forcedLinkTrackingTimeout)}};s.Ra=function(){if(s.fa()&&!(s.va>s.G))try{w.localStorage.removeItem(s.da()),s.va=s.r()}catch(b){}};s.xa=function(b){if(s.fa()){s.za();try{w.localStorage.setItem(s.da(),w.JSON.stringify(b)),s.G=s.r()}catch(a){}}};
s.za=function(){if(s.trackOffline){if(!s.offlineLimit||s.offlineLimit<=0)s.offlineLimit=10;for(;s.e.length>s.offlineLimit;)s.na()}};s.forceOffline=function(){s.ea=!0};s.forceOnline=function(){s.ea=!1};s.da=function(){return s.offlineFilename+"-"+s.visitorNamespace+s.account};s.r=function(){return(new Date).getTime()};s.ra=function(s){s=s.toLowerCase();if(s.indexOf("#")!=0&&s.indexOf("about:")!=0&&s.indexOf("opera:")!=0&&s.indexOf("javascript:")!=0)return!0;return!1};s.setTagContainer=function(b){var a,
c,e;s.mb=b;for(a=0;a<s._il.length;a++)if((c=s._il[a])&&c._c=="s_l"&&c.tagContainerName==b){s.K(c);if(c.lmq)for(a=0;a<c.lmq.length;a++)e=c.lmq[a],s.loadModule(e.n);if(c.ml)for(e in c.ml)if(s[e])for(a in b=s[e],e=c.ml[e],e)if(!Object.prototype[a]&&(typeof e[a]!="function"||(""+e[a]).indexOf("s_c_il")<0))b[a]=e[a];if(c.mmq)for(a=0;a<c.mmq.length;a++)e=c.mmq[a],s[e.m]&&(b=s[e.m],b[e.f]&&typeof b[e.f]=="function"&&(e.a?b[e.f].apply(b,e.a):b[e.f].apply(b)));if(c.tq)for(a=0;a<c.tq.length;a++)s.track(c.tq[a]);
c.s=s;break}};s.Util={urlEncode:s.escape,urlDecode:s.unescape,cookieRead:s.cookieRead,cookieWrite:s.cookieWrite,getQueryParam:function(b,a,c){var e;a||(a=s.pageURL?s.pageURL:w.location);c||(c="&");if(b&&a&&(a=""+a,e=a.indexOf("?"),e>=0&&(a=c+a.substring(e+1)+c,e=a.indexOf(c+b+"="),e>=0&&(a=a.substring(e+c.length+b.length+1),e=a.indexOf(c),e>=0&&(a=a.substring(0,e)),a.length>0))))return s.unescape(a);return""}};s.z=["supplementalDataID","timestamp","dynamicVariablePrefix","visitorID","marketingCloudVisitorID",
"analyticsVisitorID","audienceManagerLocationHint","authState","fid","vmk","visitorMigrationKey","visitorMigrationServer","visitorMigrationServerSecure","charSet","visitorNamespace","cookieDomainPeriods","fpCookieDomainPeriods","cookieLifetime","pageName","pageURL","referrer","contextData","currencyCode","lightProfileID","lightStoreForSeconds","lightIncrementBy","retrieveLightProfiles","deleteLightProfiles","retrieveLightData","pe","pev1","pev2","pev3","pageURLRest"];s.c=s.z.concat(["purchaseID",
"variableProvider","channel","server","pageType","transactionID","campaign","state","zip","events","events2","products","audienceManagerBlob","tnt"]);s.ba=["timestamp","charSet","visitorNamespace","cookieDomainPeriods","cookieLifetime","contextData","lightProfileID","lightStoreForSeconds","lightIncrementBy"];s.H=s.ba.slice(0);s.ia=["account","allAccounts","debugTracking","visitor","trackOffline","offlineLimit","offlineThrottleDelay","offlineFilename","usePlugins","doPlugins","configURL","visitorSampling",
"visitorSamplingGroup","linkObject","clickObject","linkURL","linkName","linkType","trackDownloadLinks","trackExternalLinks","trackClickMap","trackInlineStats","linkLeaveQueryString","linkTrackVars","linkTrackEvents","linkDownloadFileTypes","linkExternalFilters","linkInternalFilters","useForcedLinkTracking","forcedLinkTrackingTimeout","trackingServer","trackingServerSecure","ssl","abort","mobile","dc","lightTrackVars","maxDelay","expectSupplementalData","AudienceManagement"];for(i=0;i<=250;i++)i<76&&
(s.c.push("prop"+i),s.H.push("prop"+i)),s.c.push("eVar"+i),s.H.push("eVar"+i),i<6&&s.c.push("hier"+i),i<4&&s.c.push("list"+i);i=["latitude","longitude","resolution","colorDepth","javascriptVersion","javaEnabled","cookiesEnabled","browserWidth","browserHeight","connectionType","homepage"];s.c=s.c.concat(i);s.z=s.z.concat(i);s.ssl=w.location.protocol.toLowerCase().indexOf("https")>=0;s.charSet="UTF-8";s.contextData={};s.offlineThrottleDelay=0;s.offlineFilename="AppMeasurement.offline";s.wa=0;s.aa=0;
s.G=0;s.va=0;s.linkDownloadFileTypes="exe,zip,wav,mp3,mov,mpg,avi,wmv,pdf,doc,docx,xls,xlsx,ppt,pptx";s.w=w;s.d=w.document;try{s.ab=navigator.appName=="Microsoft Internet Explorer"}catch(t){}s.V=function(){if(s.W)w.clearTimeout(s.W),s.W=k;s.i&&s.A&&s.i.dispatchEvent(s.A);if(s.p)if(typeof s.p=="function")s.p();else if(s.i&&s.i.href)s.d.location=s.i.href;s.i=s.A=s.p=0};s.ya=function(){s.b=s.d.body;if(s.b)if(s.o=function(b){var a,c,e,d,f;if(!(s.d&&s.d.getElementById("cppXYctnr")||b&&b["s_fe_"+s._in])){if(s.ka)if(s.useForcedLinkTracking)s.b.removeEventListener("click",
s.o,!1);else{s.b.removeEventListener("click",s.o,!0);s.ka=s.useForcedLinkTracking=0;return}else s.useForcedLinkTracking=0;s.clickObject=b.srcElement?b.srcElement:b.target;try{if(s.clickObject&&(!s.F||s.F!=s.clickObject)&&(s.clickObject.tagName||s.clickObject.parentElement||s.clickObject.parentNode)){var g=s.F=s.clickObject;if(s.Z)clearTimeout(s.Z),s.Z=0;s.Z=setTimeout(function(){if(s.F==g)s.F=0},1E4);e=s.pa();s.track();if(e<s.pa()&&s.useForcedLinkTracking&&b.target){for(d=b.target;d&&d!=s.b&&d.tagName.toUpperCase()!=
"A"&&d.tagName.toUpperCase()!="AREA";)d=d.parentNode;if(d&&(f=d.href,s.ra(f)||(f=0),c=d.target,b.target.dispatchEvent&&f&&(!c||c=="_self"||c=="_top"||c=="_parent"||w.name&&c==w.name))){try{a=s.d.createEvent("MouseEvents")}catch(i){a=new w.MouseEvent}if(a){try{a.initMouseEvent("click",b.bubbles,b.cancelable,b.view,b.detail,b.screenX,b.screenY,b.clientX,b.clientY,b.ctrlKey,b.altKey,b.shiftKey,b.metaKey,b.button,b.relatedTarget)}catch(k){a=0}if(a)a["s_fe_"+s._in]=a.s_fe=1,b.stopPropagation(),b.kb&&b.kb(),
b.preventDefault(),s.i=b.target,s.A=a}}}}else s.clickObject=0}catch(m){s.clickObject=0}}},s.b&&s.b.attachEvent)s.b.attachEvent("onclick",s.o);else{if(s.b&&s.b.addEventListener){if(navigator&&(navigator.userAgent.indexOf("WebKit")>=0&&s.d.createEvent||navigator.userAgent.indexOf("Firefox/2")>=0&&w.MouseEvent))s.ka=1,s.useForcedLinkTracking=1,s.b.addEventListener("click",s.o,!0);s.b.addEventListener("click",s.o,!1)}}else setTimeout(s.ya,30)};s.ya()}
function s_gi(s){var w,k=window.s_c_il,m,i,o=s.split(","),p,n,r=0;if(k)for(m=0;!r&&m<k.length;){w=k[m];if(w._c=="s_c"&&(w.account||w.oun))if(w.account&&w.account==s)r=1;else{i=w.account?w.account:w.oun;i=w.allAccounts?w.allAccounts:i.split(",");for(p=0;p<o.length;p++)for(n=0;n<i.length;n++)o[p]==i[n]&&(r=1)}m++}r||(w=new AppMeasurement);w.setAccount?w.setAccount(s):w.sa&&w.sa(s);return w}AppMeasurement.getInstance=s_gi;window.s_objectID||(window.s_objectID=0);
function s_pgicq(){var s=window,w=s.s_giq,k,m,i;if(w)for(k=0;k<w.length;k++)m=w[k],i=s_gi(m.oun),i.setAccount(m.un),i.setTagContainer(m.tagContainerName);s.s_giq=0}s_pgicq();


window.AppMeasurement = AppMeasurement;




},{}],"/Users/youzi/dev/mtv-play/api/tracking/map.js":[function(require,module,exports){
/*  0 = sprop, 1 = evar */
exports.vars = 
  { branch:[13,13]
  , title:[49,49]
  , version:[3,3]
  , role:[4,4]
  , device:[5,5]
  , region:[6,6]
  , lang:[7,7]
  , age:[19,19]
  , gender:[20,20]
  , weekDay:[8,8]
  , hour:[9,9]
  , native:[21,21]
  , userId:[10,10]
  , connected:[16,16]
  , network: [11,11]
  , networkOperator: [12,12]
  , secondscreen:[17,17]
  , devicesPresent:[18,18]
  , search:[14,14]
  , mtvMobileFailed:[null,22]
  , loginStyle:[15,15]
  , teaserCollection:[null,23]
  , teaserClicked:[null,24]
  , videoName:[null,33]
  , franchiseName:[49,49]
  , subscriptionFailure: [null,25]
  }

  /*

eVars:
eVar1: video name (example awkward > season 01 > episode 01
eVar2: franchise name (example awkward)
events (all counters):
event1: video started
event2: video reaches 25%
event3: video reaches 50%
event4: video reaches 75%
event5: video finished (at 90% because of the outro that may be skipped)
*/

exports.events = 
  { appstart:8
  , menu:9
  , enable3g:10 
  , disable3g:11
  , favoAdded:12
  , favoRemoved:13
  , sharingFacebookStart:34
  , sharingFacebookSucces:35
  , swipeUp:32  //right here
  , swipeDown:33
  , sharingEmailStart:16
  , sharingEmailSucces:17
  , search:18 //eVar , sProp
  , upgradeMonthFailed:26
  , upgradeMonthSucces:25
  , upgradeAnFailed:28
  , upgradeAnSucces:27
  , upgradeMtvFailed:30
  , upgradeMtvSucces:29
  , loginSucces:23
  , loginFailed:24
  , signupSucces:21
  , signupFailed:22
  , introSkipped:20
  , introCompleted:19
  , teaserClick:31
  , videofinished: 76
  , videoPlay:6
  , videoPause:7
 // , videoName: 33  //video name (example awkward > season 01 > episode 01 -- user pagename
  , videostart: 15
  , video25: 2
  , video50: 3
  , video75: 4
  //, videoEnd: 5
  , purchaseFailed: 35
  , receiptFailed: 36
  }

exports.weekDays = 
  [ 'sunday'
  , 'monday'
  , 'tuesday'
  , 'wednesday'
  , 'thursday'
  , 'friday'
  , 'saturday'
  ]
/*

Video name: eVar1 -> eVar33
Franchise Name: eVar2 -> eVar49
Franchise Name: sProp2 -> sProp49

Video Started: event1 -> event15

fb sharing start: event14 -> event34
fb sharing success: event15 -> event35
video finished: event5 -> event76

*/

},{}],"/Users/youzi/dev/mtv-play/api/tracking/omniture.js":[function(require,module,exports){
var omni = require('./lib/AppMeasurement.js')
  , map = require('./map')
  
module.exports = new AppMeasurement()

// var find = function(number, obj, field) {
// 	var nr 
// 	if(number) {
// 		nr =  number.match(/\d+$/i)
// 		if(nr) nr = nr[0]
// 	} 
//   for(var i in obj) {
//     if( obj[i][field] == nr ) {
//       return i
//     }
//   }
//   return ' '
// }

// exports.t = function() {
//   console.warn('omniture T')
//   console.info('THIS WOULD BE SEND TO OMNI')
//   for(var i in exports) {
//     if(i!=='t' && i!== 'tl') {
//       var mapped = find( i , map.vars, 0 )
//       console.log( i,  '   value:', exports[i], '   name:', mapped )
//     }
//   }
//   console.log('\n\n\n\n\n')
// }

// exports.tl = function() {
//   console.warn('\n\nomniture Tl', exports.event)
//   console.warn( 'EVENT', exports.events )

//   var nr = exports.events.match(/\d+$/i)[0]

//   for(var n in map.events) {
//   	if(map.events[n] == nr) {
//   		console.log( '-------->', n )
//   	}
//   }

//   var mapped
//   console.info('THIS WOULD BE SEND TO OMNI')
//   for(var i in exports) {
//     if(i!=='t' && i!== 'tl' && i!=='account' && i!=='user' ) {
//       mapped = find( i , map.vars , 1 ) 
//       if( i.indexOf('prop')!==0 )  console.log( i,'   name:', mapped,   '   value:', exports[i] )
//     }
//   }
//   console.log('\n\n\n\n\n')
// }
},{"./lib/AppMeasurement.js":"/Users/youzi/dev/mtv-play/api/tracking/lib/AppMeasurement.js","./map":"/Users/youzi/dev/mtv-play/api/tracking/map.js"}],"/Users/youzi/dev/mtv-play/api/tracking/pagename.js":[function(require,module,exports){
var omniture = require('./omniture')
  , postpone = require('vigour-js/browser/events/util').postpone
  , ua = require('vigour-js/browser/ua')
  , config = require('vigour-js/util/config')
  , url = require('vigour-js/browser/network/url')
  , apiTrack
  , util = require('vigour-js/util')
  , map = require( './map' )
  , config = require( 'vigour-js/util/config' )
  , context = require('./context')

module.exports = function pagename(current) {
  
  // if(!current) current = control.data.current.from.val 
    
  if(typeof current !== 'string') current = ''

  var user = omniture.user
    , cloud = user.cloud

  var arr = current.split('.')
    , platform = ua.device=== 'desktop' ? 'web' : ua.platform
    , pageName = config.region.val +' > '+ platform + ' > '
    , title
    , titlefallback
    , match
    , piv

  if(arr.length>1) {
    titlefallback = arr[4]

    if (~current.indexOf('shows') ) 
    {
      title = cloud.data.get(current)
        .checkParent('_parent._name','shows')
        .get('title','')
        .val

      arr[4] = title
      if(arr[6]) arr[6]++
      if(arr[8]) arr[8]++
    } else {
      title = cloud.data.get( current+'.title','' ).val
      arr[4] = title
    }
    if(!arr[4]) {
      match = url.val && url.val.match(/\-(.*?)$/)
      if(match && match[1]) {
        piv = match[1].indexOf('/')
        title = arr[4] = piv !== -1 ? match[1].slice(0, piv) : match[1]
      } else {
        arr[4] = titlefallback
      }
    }

    if(~current.indexOf('.channels.')) {
      pageName+= 'tv > ' + arr.slice(4).join(' > ')
    } else {
      pageName+=(arr.slice(3).join(' > '))
    }
  } else {
    pageName+=current
  }

  return { 
    current:current
  , name:pageName
  , title:title
  }

}
},{"./context":"/Users/youzi/dev/mtv-play/api/tracking/context.js","./map":"/Users/youzi/dev/mtv-play/api/tracking/map.js","./omniture":"/Users/youzi/dev/mtv-play/api/tracking/omniture.js","vigour-js/browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js","vigour-js/browser/network/url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/url.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/api/url.js":[function(require,module,exports){
var Value = require('vigour-js/value')
  , cases = require('vigour-js/browser/cases')

//use apiDefer method -- fallback for web etc
module.exports = exports = new Value(
  { apiDefer: function( update, args ) {
      this.clearCache()
      if ( typeof this.val !== "string" )
      {
        update( true )
      } 
      else 
      {
        if( cases.native )
        { 
          if(navigator.app && navigator.app.loadUrl)
          {
            //TODO:shawn check maybe for error handeling for this plugin
            navigator.app.loadUrl(this.val, { openExternal:true } )
            update('success')  
          }
          else if ( cases.windowsMobile )
          {
            window.open( this.val, '_system' ) // returns an InAppBrowser (see https://git-wip-us.apache.org/repos/asf?p=cordova-plugin-inappbrowser.git;a=blob_plain;f=www/inappbrowser.js;hb=HEAD)
            update('success')
          }
          else if (cases.ios) {
            window.open(this.val, '_system')
            update('success')
          }
          else
          {
            this.type = 'can not find navigator.app.loadUrl'
            update('error')  
          }
        }
        else 
        {
          var ref = window.open( this.val, this.val )
          ref.focus()
          update('success')  
        }
      }
    }
  })

exports._name = '_urlApi'

},{"vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/api/user.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
  , Value = require('vigour-js/value') //all process flags
  , util = require('./util')
  , cases = require('vigour-js/browser/cases')
  , url = config.api.url
  , defer = require('vigour-js/value/flags/process')

/*
  user.newsletter.val = true/false

  role.poll = number || false
*/

module.exports = exports = new Value(
{ newsletter: {
    ajax: {
      url: function( ajax, val ) { 
        if( this._parent.token && this._parent.token.val ) {
          return url + 'api/v1/users/' + this._parent.token.val + '.json'
        }
      }
    , method: 'PUT'
    , encode: 'json'
    , data: function( ajax, val ) {
        this.clearCache()
        return ( this.val === true || this.val === false ) 
            && { user:
              { accept_newsletter: this.val
              , app_version: window.package.version
              }
            }
      }
    }
  }
, role: {
    poll:false
  , ajax:{
      url: function( ajax, val ) {
        return ( this._parent.token && this._parent.token.val )
            && url + 'api/v1/users/' + this._parent.token.val + '.json'
      }
    , defer: function( update , args, err, data ) {
        if( data.user ) {
          this.val = args[0] = data.user.role
          //poll
          update() 
        } else {
          update( true )
        }
      }
    }
  }
})

exports.role.poll.on(function( val ) {
  if( val === true ) val = 1e3
  if( val > 0  )
  {
    if( this._d ) clearInterval( this._id )
    this._id = setInterval( function() {
      exports.role._update()
    }, val )
  }
  else
  {
    clearInterval( this._id )
    this._d = null
  }
})

exports._name = 'userApi'

},{"./util":"/Users/youzi/dev/mtv-play/api/util.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","vigour-js/value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/api/util.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
	, errors = { emailExists: 'Email has already been taken' 
						 , invalid: 'Username or password is invalid'
						 , expired: 'Your confirmation link expired. Please sign up again using the app.'
             , mobileTimeout: 'Timeout error'
             , terms: 'MTV country terms and conditions must be accepted'
						 , email: 'Email can\'t be blank'
             , password: 'Password can\'t be blank'
             , privacy: 'Data protection terms and conditions must be accepted'
             , numberExists: 'Mobile number has already been taken'
             , subscription: 'Subscription is not verified'
             , resetTokenExpired: 'Outdated password reset token.'
             , invalidPasswordToken: 'Invalid password reset token.'
             , invalidEmail: 'Email is invalid'
             }

//[ exists, invalid ]
exports.findError = function( data ){
	if( !data ) return;
  var errs = data && data.errors

  if( data.error_message ) {
  	for( var key in errors ) {
    	if( data.error_message === errors[key] ) return key
    }
  }

  if( errs instanceof Array ){
    for(var i = errs.length, err; err = errs[--i];){
    	for( var key in errors ) {
    		if(err.description === errors[key] ) return key
    	}
    }
  }
  return 'invalid'
}


},{"vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/api/verify.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
	, Value = require('vigour-js/value') //all process flags
	, util = require('./util')
  , cases = require('vigour-js/browser/cases')
	, url = config.api.url


/*
  verify.email.val = 'token'
*/

//these functions verify tokens

//move into register!!!!!!

module.exports = exports = new Value(
{ email: 
  { ajax:
    { url: function( ajax, val ) {
        return typeof val === 'string' && url+'api/v2/confirmations/'+val+'.json'
      }
    , method: 'GET'
    , defer: function( update , args, err, data ) {
        if( !data.success ) {
          this.type = err ? err.message : util.findError( data ) 
          update( 'error' )
        } else {
          this.set( 'token', data.authentication_token )
          update( 'success' )
        }
      }
    }
  }
})

exports._name = 'verify'

//TODO: verify mtv mobile
//TODO: hasMtvmobule
//TODO: verifyNumber mobile

//call it vip.js etc

//http://utt.mtvnn.com/api/v2/confirmations/9e0de83228f97865
//http://utt.mtvnn.com/api/v2/confirmations/error.json
//mtvmobile
//forgotpassword
},{"./util":"/Users/youzi/dev/mtv-play/api/util.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/app/config.js":[function(require,module,exports){
//TODO: unify config with package.json

module.exports = exports = require( 'vigour-js/util/config' )

var util = require( 'vigour-js/util' )

var ua = require( 'vigour-js/browser/ua' )
  , cases = require('vigour-js/browser/cases' )
  , Value = require('vigour-js/value')

exports.language = new Value()
exports.region = new Value() 

if( exports.dictionary === 'webtranslateit' ) 
{
  exports.dictionary = function( val ) {
    return 'https://webtranslateit.com/api/projects/'
         + exports.webtranslateit.token
         + '/files/' 
         + exports.webtranslateit.files[ val ]
         + '/locales/'
         + val
  }
}
else 
{
  var dict = exports.dictionary
  exports.dictionary = function( val ) {
    return dict.replace( '$language', val )
  }
}

var protocol
  , port

if( exports.cloud === 'production' ) 
{
  protocol = cases.tv ?  'http://' : 'https://'
  port = protocol === 'https://' ? 443 : 80

  if( exports.cloud === 'production' ) 
  {
    exports.cloud = new Value({
      val: exports.region,
      transform: function( c, cv ) {
        if(cv === 'PL') { cv = 'po' }    
        return cv ? protocol + cv.toLowerCase() + '-hubs.mtvplay.tv:'+port
                  : false
      }
    })
  }
  else 
  {
    exports.cloud = protocol 
      + ( exports.regionOverride || 'nl' ).toLowerCase() 
      + '-hubs.mtvplay.tv:'+port
  }
}

if( exports.player && exports.player.settings.ads.viralSID === 'production' )
{
  var viralSID
  
  if( cases.tv ) viralSID = 'mtvplaytv/smarttv'
  else if( cases.native ) viralSID = 'mtvplaytv/app'
  else  viralSID = 'mtvplaytv/web'

  exports.player.settings.ads.viralSID = viralSID
}

// if( exports.facebook ) 
// {
  
//    "facebook": {
//       "id": "709421825777638",
//       "web": "https://connect.facebook.net/de_DE/sdk.js"
//     },
  

// }

/* region moet optional 
   double check translations
   add type to error
   set all correct branch info
   cloud - geo forced wel production
*/

},{"vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/app/index.js":[function(require,module,exports){
//TODO:not connnected to internet app thing
//TODO:verander responseData naam
var app = module.exports = require( 'vigour-js/app' )
  .inject(
    require( 'vigour-js/app/content' ),
    require( 'vigour-js/app/user' )
  )
var config = app.config = require( './config' )
var Value = require( 'vigour-js/value' )
var cases = app.cases
var user = require( './user' )
var Data = require( 'vigour-js/data' )
var raf = require( 'vigour-js/browser/animation/raf' )
var ua = require( 'vigour-js/browser/ua' )
var util = require( 'vigour-js/util' )
var api

/* ------------ setup , cases and values ------------ */

app.cloud = {
  api: {
    auth: config.api.url + 'api/v1/users/'
  },
  url: config.cloud
}

//TODO: maybe take care of cast situation here instead of a defer?
app.state.val = {
  default: 'first'
}

app.frame = require( 'vigour-js/browser/animation/frame' )
app.ua = require( 'vigour-js/browser/ua' )
app.util = require( './util' )

app.versionData.on( function() {
  app.notification.val = 'appUpgrade'
} )

app.telCode = new Value( {
  default: {
    val: app.region,
    transform: function( v, cv ) {
      return cv && cv.toLowerCase()
    }
  }
} )

// POSSIBLE REFERRER's
// mtv.de, at.mtv.de
// mtv.ch
// mtv.nl
// mtv.be, fr.mtv.be, nl.mtv.be 
// mtv.dk
// mtv.no
// mtv.se
// musictelevision.fi
// mtv.pl

var referrer = document.referrer
if( referrer ) {
  var arr = [
    'mtv.de',
    'at.mtv.de',
    'mtv.ch',
    'mtv.nl',
    'mtv.be',
    'fr.mtv.be',
    'nl.mtv.be',
    'mtv.dk',
    'mtv.no',
    'mtv.se',
    'musictelevision.fi',
    'mtv.pl'
  ]
  for (var i = arr.length - 1; i >= 0; i--) {
    var url = arr[i]
    if(referrer.indexOf(url) !== -1){
      app.fromMtvSite = referrer
      break
    }
  }
}

cases.$fromMtvSite = new Value(!!app.fromMtvSite)

cases.$storeAvailable = new Value(
  cases.native && ( cases.ios || cases.android || cases.windowsMobile ) //&& window.Store
)

//TODO: replace /w $hasMobile
cases.hasMobile = new Value( {
  val: function() {
    return util.checkArray(
      config.mtvmobile, app.region.val.toLowerCase()
    ) !== false ? true : false
  },
  listen: app.region
} )

/* ------------ intro ------------ */
require( './intro' )

/* ------------ localisation ------------ */
require( './localisation' )

/* ------------  api ------------  */
api = app.api = require( '../api' )

/* ------------  newsletter ------------  */
api.user.val = {
  token: user.token,
  newsletter: user.accept_newsletter
}

/* ------------  login ------------  */
require( './login' )

/* ------------  share ------------  */
require( './share' )

/* ------------  register ------------  */
require( './register' )

/* ------------  upgrade ------------  */
require( './upgrade' )

/* ------------  playback ------------  */
require( './playback' )

/* ------------  popup ------------  */
require( './popup' )

/* ------------ TRACK ------------ */
require( './tracking' )

/* ------------ app init ------------ */
require( './init' )

},{"../api":"/Users/youzi/dev/mtv-play/api/index.js","./config":"/Users/youzi/dev/mtv-play/app/config.js","./init":"/Users/youzi/dev/mtv-play/app/init.js","./intro":"/Users/youzi/dev/mtv-play/app/intro.js","./localisation":"/Users/youzi/dev/mtv-play/app/localisation.js","./login":"/Users/youzi/dev/mtv-play/app/login.js","./playback":"/Users/youzi/dev/mtv-play/app/playback.js","./popup":"/Users/youzi/dev/mtv-play/app/popup.js","./register":"/Users/youzi/dev/mtv-play/app/register.js","./share":"/Users/youzi/dev/mtv-play/app/share.js","./tracking":"/Users/youzi/dev/mtv-play/app/tracking.js","./upgrade":"/Users/youzi/dev/mtv-play/app/upgrade.js","./user":"/Users/youzi/dev/mtv-play/app/user.js","./util":"/Users/youzi/dev/mtv-play/app/util.js","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/content":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/content.js","vigour-js/app/user":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/index.js","vigour-js/browser/animation/frame":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/frame.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/app/init.js":[function(require,module,exports){
var app = require('vigour-js/app')
  , user = app.user
  , cases = app.cases
  , Promise = require('promise')

app.css = { addClass:'preload' }

if( (cases.chromecast || cases.tv) && !user.token.val) {
  user.token = true
}

app.region
.is(function() { return typeof this.val === 'string' }) //regExp support in is also types?
.then(function() { return app.cloud.connected.is(true) })
.then(function() {
   if(user.token.val === true) {
    //TODO: replace this with hashedSubscription true
    return new Promise(function(resolve) {
      var loaded = user.data.is('loaded')
      var timeout = setTimeout(function() {
        Promise.reject(loaded)
        resolve()
      },500)
      loaded.done(function() {
        clearTimeout(timeout)
        resolve()
      })
    })
   } else if( user.token.val ) {
    return user.data.is('loaded')
   }
 })
.then(function() {
  app.ready.val = true
  //TODO: device exclusion for urls.... (never on cast and tv)
  if(!cases.chromecast) user.$execUrl('discover')
  //TODO: double check this -- wtf is the difference between tv and normall app?
  // app.state.val = cases.$isActive.val ? 'first' : 'second'
  return app.content.is('loaded')
})
.done( function() {
  app.css = { removeClass:'preload'}
  if( window.clearPackerLoader ) window.clearPackerLoader()
  if( cases.touch ) app.node.style.backgroundColor = 'black' 
})


},{"promise":"/Users/youzi/dev/mtv-play/node_modules/promise/index.js","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js"}],"/Users/youzi/dev/mtv-play/app/intro.js":[function(require,module,exports){
var app = module.exports = require( 'vigour-js/app' )
var cases = app.cases

/* ------------ intro ------------ */

if( cases.native && !localStorage.getItem('haveSeenIntro') )
{
  app.ready.on(true,function(){
    setTimeout(function(){
      app.popup.val = 'intro'
    },1000)
    localStorage.setItem('haveSeenIntro',true)
  })
}



},{"vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js"}],"/Users/youzi/dev/mtv-play/app/localisation.js":[function(require,module,exports){
var app = require( 'vigour-js/app' )
var config = app.config = require( './config' )
var cases = app.cases
var dictionary = require('vigour-js/app/dictionary')
var util = require('vigour-js/util')
var ua = require('vigour-js/browser/ua')
app.dictionary = dictionary

//TODO: handle false in ajax

if( config.regionOverride ) {
  app.region.val =
  { ajax: config.geo
  , transform: function(c, cv ) {
      return config.regionOverride || 0
    }
  }
} else {
  app.region.val =
  { responseData: function( c, cv ) {
      var country = this.country_code && this.country_code.val
      util.checkArray( config.availableRegions, country )
      return util.checkArray( config.availableRegions, country ) !== false 
          && country
    }
  , ajax: config.geo
  , transform: function(c, cv ) {
      if( !cv 
        || typeof cv !== 'string' 
        || cv === 'error' 
        || util.checkArray( config.availableRegions, cv ) === false )  
      {
        return config.defaultRegion 
               || ( ua.platform === 'lg' && ua.device === 'tv' ? 'DE' : 0 )
      }
      return cv
    }
  }
}

config.language.val = app.language
config.region.val = app.region

/* ------------ dictionary ------------ */
//TODO:make dictionary init after ready
app.dictionary.val =
{ ajax: function( ajax, val ) {
    if( this.val ) {
      if( this._cached === this.val ) return;
      this._cached = this.val
      return this.val && config.dictionary( this.val )
    }
  }
, val: app.language
}
},{"./config":"/Users/youzi/dev/mtv-play/app/config.js","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/app/login.js":[function(require,module,exports){
  var config = require( './config' )
    , dictionary = require('vigour-js/app/dictionary')
    , app = require( 'vigour-js/app/' )
    , user = app.user
    , api = require('../api')

/* ------------ login ------------ */

api.user.role.val = { token: app.user.token }

api.login.val = {
  region: config.region
}

api.user.role
  .on( function() {
    if(user.role.$userOrigin.cloud) {
      user.role.$userOrigin = api.user.role.val
    }
  })

//TODO: fix /w localstorage flag on token
user.token
  .on( function() {
      if( !user.token.val )
      {
        api.login.$empty([ 'loading', 'region' ])
        app.state.val = 'empty'
        app.state.val = 'first'
        //CAST WARNINGL make a case here when there is nog first available -- should not be nessecary!!!
        //make a defer in app.state to on cast only second or even beter make it in the switcher
      }
    })
  .on( function() {
      //so dirty! make it better maybe on activity /w throttle
      //every 10 min
      api.user.role.poll.val = user.token.val ? 6e5 : false
    }) 

api.login
  .on( 'error', function() {
    if( !api.timeout ) {
      app.notification.type = this.type
      app.notification.val = 'loginError'
    }
  })
  .on( 'success', function() {
    app.notification.val = 'loginSuccess'

    if( this.facebook 
     && this.facebook.token 
     && this.facebook.token.val ) 
    {
      var facebookToken = this.facebook.token.val
        , facebookId = this.facebook.id.val

      user.token.once(function( val ) {
        if( this.val ) {
          user.FB_token.$userOrigin = facebookToken
          user.facebook_id.$userOrigin = facebookId
        }
        //staging does not set session from login -- is possible double check
      })
    }

    user.token = this.token.val
    //TODO: maybe check error here aswell? --- to redirect someone to login page
    if( app.popup.val === 'login' 
     || app.popup.val === 'loginEmail' 
     || app.popup.val === 'register'  
    )
    { 
      app.popup.val = false
    }

  })
  .loading.on(function( val ) {
    if( val === true && !api.timeout) {
      app.loading.val = 'login'
    } else if( app.loading.val === 'login' ) {
      app.loading.val = false
    }

  })

api.facebook.login
  .on( 'success', function( val ) {
    api.login.val = 
    { facebook: 
      { token: this.token.val 
      , id: this.id.val
      }
    }
  })
  .on( 'error', function() {
    // app.notification.type = this.type
    app.notification.val = 'facebookError'
  })
  .loading.on( app.loading )


},{"../api":"/Users/youzi/dev/mtv-play/api/index.js","./config":"/Users/youzi/dev/mtv-play/app/config.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js"}],"/Users/youzi/dev/mtv-play/app/playback.js":[function(require,module,exports){
var app = require( 'vigour-js/app' )
var config = app.config = require( './config' )
var Value = require('vigour-js/value')
var cases = app.cases
var user = app.user

cases.$playing = app.playing

cases.$isFullscreen = new Value(
{ val:function(){
    return app.state.val === 'player'
  }
, listen:app.state
})

cases.$isPlayingAd = new Value()

cases.$isLoadingVideo = new Value(
{ val:false
, defer:function( update ){
    var _this = this
    if( this._timer )
    {
      clearTimeout( this._timer )
      this._timer = null
    }
    if( this._val )
    { 
      this._timer = setTimeout(function(){
        _this.val = false
        _this._timer = null
      },2000)
    }
    update()
  }
})

cases.$isOnChannel = new Value()
// cases.$isPlayingAd.on(false,function(){
//   app.adProgress.val = 0
// })

//make injectable
app.wifiOnly = new Value(
{ val:localStorage.getItem('wifiOnly') || false
, defer:function( update ){
    if(this._val) localStorage.setItem('wifiOnly',true)
    else localStorage.removeItem('wifiOnly')
    update()
  }
})

app.restrictPlayback.val = 
{ val: app.wifiOnly
, transform:function(v,cv){
    return ( cv && cases.native && api.network.val !== 'wifi' )
      ? true
      : false
  }
}

//playing
app.playing.on( function( val ) {
  if( cases.$isLoggedIn.val ) 
  {
    if( val === true ) 
    {
      var media = app.user.navigation.media.from
      if( media._parent._name !== 'channels' )
      {
        var epi = app.user.usage.from.get( media._contentPath )
          , show = epi._parent._parent._parent._parent

        if( show )
        {
          show.set( 'media', media )
        }
      }
    }
  }
})

app.playing.val = {
  defer:function checkAccess( update, args ){
    // console.error('1')
    var media = user.navigation.media.from
      , access =  media 
               && media.access 
               && media.access.val
      , id = media
          && media.id
          && media.id.val
      , trial = user.role.val === 3

    //TODO: handle lsiteners beter
    if( args[0] === true  && ( app.wifiOnly.val && app.api.network.val  ) )
    {
      // console.error('2', this.val, this.from, args[0])
      this.val = args[0] = false
      app.notification.from.val = 'enable4g' //real noticication
    }
    else if( args[0] === true 
      && access
      && this.val //TODO: double check - this may not be good!
    )
    {
      if( !cases.$isLoggedIn.val )
      {
        this.val = args[0] = false
        app.popup.from.val = 'roadblock'
      }
      else if( media._parent._name === 'channels' && ( trial || !cases.$isUpgraded.val ) ){
        this.val = args[0] = false
        app.popup.from.val = 'upgrade'
      }
      /*
      , transform: function( val, cv ) {
          return app.util.access( cv, this.data && this.data.media )
        }
      */
      else if( !cases.$isUpgraded.val
        && !user.purchases.$userOrigin[id] // not purchased by the user
        || ( media._parent._name === 'channels' && trial ) 
        || ( trial && access === 2 )
      )
      {
        this.val = args[0] = false
        app.popup.from.data = media
        app.popup.from.val = 'roadblockMedia'
      }
    }

    update()  
  }
}
},{"./config":"/Users/youzi/dev/mtv-play/app/config.js","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/app/popup.js":[function(require,module,exports){
var app = require( 'vigour-js/app' )
var cases = app.cases

//popup
app.popup.val = {
  defer: function( update, args ) {
    var val = args[0]
    //TODO: al deze vervangen door .val zodat het te reusen is met of zonder __4
    if(cases.windows && cases.native && args[0] === 'share')
    {
      app.api.facebook.share.val = { val: true, url: true }
      this._val = args[0] = false
    }
    else if( val === 'upgrade' && !cases.hasMobile.val && !cases.$storeAvailable.val  ) 
    {
      this._val = args[0] = 'roadblockUpgrade'  
      // this._val = args[0] = 'roadblock'
    }
    else if( val === 'devices' && !cases.$isLoggedIn.val ) 
    {
      this._val = args[0] = 'roadblock'  
    }
    update()
  }
}
},{"vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js"}],"/Users/youzi/dev/mtv-play/app/register.js":[function(require,module,exports){
  var config = require( './config' )
    , dictionary = require('vigour-js/app/dictionary')
    , app = require( 'vigour-js/app/' )
    , user = app.user
    , api = require('../api')
    , cases = require('vigour-js/browser/cases')
    , timeout
// app.api.facebook.share.val = { url: app.share }
// app.api.email.share.val = { url: app.share }
//TODO: land without hash!
// console.log('URL PARAMS', this.raw, val)

/* ------------  register ------------  */

api.register.val = {
  age: {
    defer:function( update, args ) {
      //you can put any integer value in min_age and max_age
      // console.log( 'AGE DEFER!', args )

      var val = args[0]

      if( !val || val.defer ) 
      {
        update( true )
      }
      else 
      {
        if( val == 1 ) 
        {
          this.val = {
            min_age: 1
          , max_age: 20
          }
        }
        else if( val == 2 ) 
        {
          this.val = {
            min_age: 20
          , max_age: 30
          }
        }
        else if( val == 3 ) 
        {
          this.val = {
            min_age: 30
          , max_age: 40
          }
        }

        update()
      }

    }  
  }
  , region: config.region
}

api.register
  .on( 'error', function() {
    app.notification.type = this.type
    app.notification.val = 'registerError'
  })
  .on( 'success', function() {
    //special handelings open popup /w button open your email
    //then it check for a userToken and uses that to login make sperate value
    app.notification.val = 'registerSuccess'
    app.popup.val = false
    if( this.email && this.email.val ) 
    {
      var email = this.email.val
        , password = this.password.val
    }

    if( api.timeout ) clearInterval( api.timeout )

    //nu gaan pollen voor login!
    if( cases.native ) {
      api.timeout = setInterval(function() {
        api.login.val = {
          email: email
        , password: password
        }
      }, 500 )
      api.login.once( 'success', function() {
        //block login error notifications

        clearInterval( api.timeout )
        api.timeout = false

        // show hasMobile blabla

        if( cases.hasMobile.val )
        {
          app.popup.val = 'getStarted'
        }
        //api.timeout
      })
    }

  })
  .loading.on( app.loading )

api.verify.email
  .on( 'success', function( val ) {
    if( cases.phone || cases.tablet ) {
      app.popup.val = 'getApp'
    } 
    user.token.val = this.token.val
    app.notification.val = 'verifyEmailSuccess'
  })
  .on( 'error', function( val ) {
    app.notification.type = this.type
    app.notification.val = 'verifyEmailError'
  })
  .loading.on( app.loading )

app.url.params
  .on(function( val ){
    if( this.e ) {
      api.verify.email.val = this.e.val  
      this.val = ''  
    }
  })
  
/* ------------  forgot password ------------  */

api.password.forgot
  .on( 'success', function() {
    app.notification.val = 'passwordForgot'
    app.popup.val = false
  })
  .on( 'error', function() {
    app.notification.type = this.type
    app.notification.val = 'passwordForgotError'
  })
  .loading.on( app.loading )

// document.body.base.api.password.forgot.on(function(){ console.log('do it!') })

api.password.reset
  .on( 'success', function() {
    app.notification.val = 'passwordResetSuccess'
    app.popup.val = false
    user.token.val = this.token.val
  })
  .on( 'error', function() {
    app.notification.type = this.type
    app.notification.val = 'passwordResetError'
  })
  .loading.on( app.loading )

app.url.params
  .on(function( val ){
    if( this.reset ) {
      api.password.reset.val = { token : this.reset.val }
      app.popup.from.val = 'passwordReset'
      this.val = ''
    }
  })

  //http://play.mtvutt.com/?reset=MFRceiLn5xtsLYtsCGjE
  //http://play.mtvutt.com/?reset=MFRceiLn5xtsLYtsCGjE

  //TODO: notifcations longer
},{"../api":"/Users/youzi/dev/mtv-play/api/index.js","./config":"/Users/youzi/dev/mtv-play/app/config.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/app/share.js":[function(require,module,exports){
  var config = require( './config' )
    , dictionary = require('vigour-js/app/dictionary')
    , app = require( 'vigour-js/app/' )
    , vObject = require('vigour-js/object')
    , user = app.user
    , api = require('../api')

/* ------------ sharing ------------ */
//TODO: move this and clean it up! make string
//TODO:make the packer server capabale of sending correct metaData
//also very important for the google!

/* ------------ facebook ------------ */
api.facebook.share.val = 
{ url: 
  { transform: function parseFacebook( val, cv ) {
      if( !cv ) return false
      var obj = cv instanceof vObject  
              ? cv.from 
              : user.navigation.media.from
        , parsed = user.$parse( obj )
        //TODO: add +#
        , url =  config.packer.url + parsed.url
        , data = obj
        , query = ''
        , number
        , title
        , img
        , description

      if( data && parsed.title ) {
        if(parsed.episode < 10) parsed.episode = '0' + parsed.episode

        number =  parsed.season + parsed.episode

        title = parsed.title 
          ? 'og:title='   
              + encodeURIComponent(
                ( parsed.show.title.val 
                  ? parsed.show.title.val 
                  + ( number ? '#'+number : '' )  
                  + ' | ' 
                  : '' ) 
                + parsed.title 
                + ' - MTV Play'
                )
              + '&'
          : ''  
        img = data.img 
          ? 'og:image=' 
            + encodeURIComponent(data.img.val)
            + '&' 
          : ''
        description = data.description 
          ? 'og:description=' + encodeURIComponent(data.description.val)
          : ''

        query = '?' + title + img + description
      }
      return url + query
    } 
  , init: app.ready
  }
}

api.facebook.share
  .on( 'success', function() {
    // console.warn('SHARE! success! PROBLEMS!')
    // app.notification.type = this.type
    // app.notification.val = 'shareSuccess'
  })
  .on( 'error', function() {
    app.notification.type = this.type
    app.notification.val = 'shareError'
    api.facebook.share.url.val = false
    api.facebook.share.$empty( [ 'url', 'loading' ] )
  })
  .loading.on( app.loading )

/* ------------ email ------------ */
api.email.share.val = 
{ address: ''
, subject: dictionary.get('text.mailShare.title')
, body:function( val, cv ) {
  // alert(user.$parse( user.navigation.media ).url)
    var url = user.$parse( user.navigation.media ).url
    var val = url && url.replace(/&/g, 'and')
    return val ? 'http://mtvplay.tv/#/' + val : false
  }
}




},{"../api":"/Users/youzi/dev/mtv-play/api/index.js","./config":"/Users/youzi/dev/mtv-play/app/config.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js"}],"/Users/youzi/dev/mtv-play/app/spotlight.js":[function(require,module,exports){
var config = require('vigour-js/util/config')
  , app = require('vigour-js/app/')
  , Value = require('vigour-js/value')
  , user = app.user
  , Data = require('vigour-js/data')

//make defer wrapper for subscriptions and 'real gets'
module.exports = exports = user.spotlight = new Value({
  transform:function(c, cv) {
    return this._parent.map && this._parent.map[ cv ] 
  }
, defer: function( update, args ) {

    this.clearCache()

    if( this.val || this.val === 0 && app.cases.$isLoggedIn.val ) 
    {

      var data = user.data.from.get( 'spotlight_sub.list.0' )
        , _this = this

      if( this.selected && this.selected.from !== data ) 
      {
        this.selected.remove()
        this.selected = null
      } 

      if( !this.selected ) 
      {

        this.set( 'selected',  
          new Data( data, 
          { subscription: 
            //TODO: add $exists to cloud 
            { time: true 
            , title: true 
            , text: true
            , img: true
            , mtvid: true
            }
          })
        )

        this.selected
          .on( function( val ) {
            var notification_stamp
              , title = this.from.title && this.from.title.val
              , mtvid = this.from.mtvid && this.from.mtvid.val

            // console.log( mtvid, this.from.raw )

            if( title && app.cases.$isLoggedIn.val && this.from.mtvid )
            {
              //does not work for languages 
              // --- have to fix add a field in the scrape -- unify languages or let sebas add an id field 
              //hash
              hashed = this.from.mtvid.val
              // console.log('do it!', hashed , JSON.stringify( this.from.raw , false, 2) )
              notification_stamp = user.notification_stamp.from
              if( !notification_stamp.val || notification_stamp.val !== hashed ) 
              {
                // console.log('do it!', hashed , JSON.stringify( this.from.raw , false, 2) )
                // debugger
                notification_stamp.val = hashed 
                _this._update( 'success' )
              }
            } 
          })

          this.selected._update.apply( this.selected, args )
      }
    } 
    
    //-------------
    if( args[0] === 'success' ) 
    {
      update()
    } else 
    {
      update( true )
    }
    
  }
})

//hasmtvmobile
exports.map = 
{ '0': 'spotlight_sub'
, '1': 'spotlight_sub'
, '2': 'spotlight_mbl'
}

exports.val = user.role



},{"vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/app/tracking.js":[function(require,module,exports){
/*
  TODO: still missing events
  , enable3g:10 
  , disable3g:11
  , introSkipped:20
  , introCompleted:19
  , teaserClick:31

subcriptionFailure
video  end
franchise name  
*/

var app = require('./index'),
  tracking = require('../api/tracking'),
  api = require('../api'),
  cases = require('vigour-js/browser/cases')

var Value = require('vigour-js/value')

app.mediaTime = new Value()

tracking.omniture.user = app.user

app.popup.on(function() {
  tracking.popup(this.val)
})

app.user.navigation.page.on(function() {
  tracking.pageView(this.val)
})

app.user.navigation.show.on(function() {
  tracking.pageView(this.val)
})

app.user.navigation.media.on(function() {
  tracking.pageView(this.val)
})

app.user.navigation.season.on(function() {
  tracking.pageView(this.val)
})

app.popup.on('intro', function() {
  app.popup.once(function(val) {
    tracking.event(val === false ? 'introSkipped' : 'introCompleted', true)
  })
})

api.login
  .on('success', function() {
    if (this.new_record) {
      tracking.event('signupSucces', true)
      ga('send', 'event', 'login', 'signup')
    } else {
      tracking.event('loginSucces', true)
      ga('send', 'event', 'login', 'login')
    }

  })
  .on('error', function() {
    tracking.event('loginFailed', true)
  })

api.register
  .on('success', function() {
    tracking.event('signupSucces', true)
  })
  .on('error', function() {
    tracking.event('signupFailed', true)
  })

api.facebook.share
  .on(function() {
    tracking.event('sharingFacebookStart', true)
  })
  .on('success', function() {
    tracking.event('sharingFacebookSucces', true)
  })

api.email.share
  .on(function() {
    tracking.event('sharingEmailStart', true)
  })
  .on('success', function() {
    tracking.event('sharingEmailSucces', true)
    ga('send', 'event', 'sharing', 'email')
  })

var first = true
app.user.search.on(function() {
  var query = app.user.search.val
  if (query && typeof query === 'string') {
    tracking.event('search', query)
    if (first) {
      first = false
      ga('send', 'event', 'search')
      app.user.navigation.page.on(function() {
        first = true
      })
    }
  }
})

api.mobile.verify
  .on('error', function() {
    tracking.event('upgradeMtvFailed')
      //mtvMobileFailed do this
  })

app.menu.on(function() {
  if (this.val) tracking.event('menu', this.val)
})

//TODO: app.ready should only fire once
app.ready.once(true, function() {
  tracking.event('appstart', true)
})

app.notification
  .on('favourite', function() {
    tracking.event('favoAdded', true)
    ga('send', 'event', 'favourite', 'added')
  })
  .on('unFavourite', function() {
    tracking.event('favoRemoved', true)
    ga('send', 'event', 'favourite', 'removed')
  })

app.user.receiver.media
  .on(function(val) {
    if (!(this.from && this.from._name === 'media')) {
      tracking.event(val ? 'swipeUp' : 'swipeDown', this.from && this.from._cachedPath)
    }
  })

cases.$hasReceiver.on(function() {
  if (this.val) {
    ga('set', 'dimension1', 'multiscreener')
  }
})

api.purchase
  .on('success', function() {
    tracking.event(
      this.subscription.val === 'monthly' ? 'upgradeMonthSucces' : 'upgradeAnSucces', true
    )
    ga('send', 'event', 'purchase', 'month')
  })
  .on('error', function() {
    tracking.event(
      this.subscription.val === 'monthly' ? 'upgradeMonthError' : 'upgradeAnError', true
    )
  })

api.mobile.sms
  .on('success', function(val) {
    tracking.event('upgradeMtvSucces', true)
  })
  .on('error', function(val) {
    tracking.event('upgradeMtvFailed', true)
  })



function getMedia() {
  var media
  if (app.state.val === 'player') {
    media = app.state.video.val
  } else {
    media = app.user.navigation.media.from
  }
  if (media && media.val === false) return
  return media
}

app.mediaTime.on(function(val) {
  var media = getMedia()
  if (val && val > 0) {
    return
  }
  if (media) {
    tracking.video(val, media)
  }
})

app.playing.on(function(val) {
  var media = getMedia()
  if (media) {
    tracking.video(val ? 'videoPlay' : 'videoPause', media)
  }
})

/*
  , videoPlay:6
  , videoPause:7

*/

//popup

},{"../api":"/Users/youzi/dev/mtv-play/api/index.js","../api/tracking":"/Users/youzi/dev/mtv-play/api/tracking/index.js","./index":"/Users/youzi/dev/mtv-play/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/app/upgrade.js":[function(require,module,exports){
  var config = require( './config' )
    , app = require( 'vigour-js/app/' )
    , user = app.user
    , api = require('../api')
    , ua = require('vigour-js/browser/ua')

/* ------------ mobile ------------ */

api.mobile.verify.val = {
  token: user.token
}

api.mobile.verify
  .on( 'success', function( val ) {
    if( user.role.val !== 2 ) {
      api.user.role.poll.val = 500

      //check mischien wel ff niet doen
      app.loading.val = true

      user.role.once(function() {
        //maybe make it loading?
        app.notification.val = 'mobileUpgradeSuccess'
        api.user.role.poll.val = false
        app.loading.val = false
      })
    }
    else
    {
      api.user.role.poll.val = false
    }

    //this does not mean upgraded but check you sms
    //start polling like crazy
    app.popup.val = false
    app.notification.val = 'mobileVerifySuccess'
  })
  .on( 'error', function( val ) {
    app.notification.val = 'mobileVerifyError'
  })
  .loading.on( app.loading )

api.mobile.sms
  .on( 'success', function( val ) {
    user.token.val = this.token.val
    app.notification.val = 'mobileUpgraded'

    //hier moet auth token in de flow en dan profile openen
    // app.user.role.$userOrigin = 2
    // app.popup.val = 'profile' 
  })
  .on( 'error', function( val ) {
    app.notification.val = 'mobileUpgradeError'
  })
  .loading.on( app.loading )

app.url.params
  .on(function( val ) {
    if( this.m ) {
      api.mobile.sms.val = this.m.val
      this.val = ''
    }
  })

/* ------------ purchase ------------ */

function product( val, cv ) {
  if( cv ){
    var store = config.store[ ua.platform ]
      , productId = store && store[ cv ]
    
    if( productId ){
      return productId.replace( '$region', ( app.region.val || '' ).toLowerCase())
    }
    
  }
  return 0
}

api.purchase.val = 
{ subscription:{ transform: product } // subscription type goes in here <<<< eg yearly
, product: // episode data goes here <<<< (in the from)
  { transform: function( v, cv ){
      var transform = !cv ? 0 : product( v, 'single' )
      return transform
    }
  } 
}

api.purchase
  .on( function( val ) {
    void(0)
  })
  .on( 'success', function() {
    void(0)
    var obj = { receipt: this.token.val }
    if( this.packageName ) {
      obj.packageName = this.packageName.val
    }
    if( this.subscriptionId ) {
      obj.subscriptionId = this.subscriptionId.val
    }
    if (this.orderId) {
      obj.orderId = this.orderId.val
    }
    if (this.purchaseTime) {
      obj.purchaseTime = this.purchaseTime.val
    }
    if (this.purchaseState) {
      obj.purchaseState = this.purchaseState.val
    }
    if (this.developerPayload) {
      obj.developerPayload = this.developerPayload.val
    }
    if (this.signature) {
      obj.signature = this.signature.val
    }
    //for michael
    if( this.product.val ) {
      if(!this.product.from.cloud) {
        throw new Error('trying to buy something else then an episode')
      }
      void(0)
      this.product.from.get('id').is('loaded', function() {
        obj.episodeId = this.val
        void(0)
        // alert("receipting " + JSON.stringify(obj, false, 2))
        api.receipt.val = obj  
      })
    } else {
      // alert("receipting " + JSON.stringify(obj, false, 2))
      void(0)
      api.receipt.val = obj  
    }
    //seperate api for product or the same?
    //A: same url, if that's what you mean
  })
  .on( 'error', function() {
    app.notification.type = this.type
    app.notification.val = 'purchaseError'
  })
  .loading.on( app.loading )

api.receipt.val = { token: user.token }

api.receipt
  .on( 'success', function() {
    //need some info in this callback!
    //now lets handle single episode purcahses!
    var id = this.episodeId && this.episodeId.val

    void(0)

    if( id ) {
      user.purchases.$userOrigin.set(id, true)
      app.popup.val = false
      app.notification.val = 'singleEpisodePurchased'
    } else {
      app.notification.val = 'upgraded'
      app.user.role.$userOrigin = 1
      app.popup.val = 'profile'
    }
  })
  .on( 'error', function() {
    app.notification.type = this.type
    app.notification.val = 'purchaseError' 
    //TODO: make it reciept error in tracking!
  })
  .loading.on( app.loading )


},{"../api":"/Users/youzi/dev/mtv-play/api/index.js","./config":"/Users/youzi/dev/mtv-play/app/config.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js"}],"/Users/youzi/dev/mtv-play/app/user.js":[function(require,module,exports){
var app = require('vigour-js/app')

var cases = app.cases

var Value = require('vigour-js/value')

var config = app.config

var raf = require('vigour-js/browser/animation/raf')

var user = module.exports = app.user.inject(
  require('vigour-js/app/user/token' ),
  require('vigour-js/app/user/usage'),
  require('vigour-js/app/user/navigation' ),
  require('vigour-js/app/user/multiscreen'),
  require('vigour-js/app/user/multiscreen/cast'),
  require('vigour-js/app/user/url')
)

user.set({
  profilepic:false,
  first_name:false,
  email:false,
  language:false,
  role:false,
  highlight:false,
  carousel:false,
  search:false,
  accept_newsletter:false,
  FB_token:false,
  scroll:false,
  facebook_id:false,
  url: require('vigour-js/browser/network/url'),
  localStorageToken: config.api.type+'userToken'
})

user.extend(
{ name:'purchases'
, mock:
  { purchases:{}
  }
, subscription:
  { purchases:{ $:true }
  }
, on:
  { mock:function(){
      this.purchases = this.mockdata.purchases
    }
  , user:function(){
      this.purchases = this.data.from.get('purchases',{})
    }
  }
})

cases.$isActive.on(function(){
  if( app.state.val !== 'player' ) {
    app.state.val = this.val ? 'first' : 'second' 
  }
})

app.language.val = app.user.language

//TODO: dirty hack , later we want all the 'content data' to take care of the updates (resolve all the listeners etc on switch
//basicly walk trough cloud data -- and resolve all subscriptions and listeners

app.content.on( 'self', function switchContent( val, stamp ) { //niet smooth
  var old = app.state.val
  app.state.val = 'empty'
  app.state.val = old 
})

user.spotlight = require('./spotlight')

user.spotlight.on(function( val ) {
  app.popup.from.data = user.spotlight.selected.from
  app.popup.from.val = 'article'
})

user.role.set('text', {
  val: user.role
, transform: function(c, cv) {
    return config.roles[cv] || ''
  }
})

//is this a good palce for $isUpgraded???
cases.$isUpgraded = new Value({
  val: user.role,
  transform: function( val, cv ) {
    return cv > 0 ? true : 0
  } 
})

user.receiver.media.on(function(){
  if( cases.$isReceiver.val )
  {
    if( this.val )
    { 
      app.state.clearCache()
      app.state._ignoreValue = true
      app.state.val = { val:'player', video:this.from }
      app.state._ignoreValue = null
    }
    else
    {
      app.state.val = cases.$isActive.val ? 'first' : 'second'
    }
  }
})

cases.$isReceiver.on(function(){
  if( this.val )
  {
    app.volume.val = user.receiver.volume
    app.playing.val = user.receiver.playing
    user.receiver.media.clearCache()
    user.receiver.media._update()
  }
  else
  {
    app.volume.val = app.volume.from.val || 1
    app.playing.val = app.playing.from.val
    app.state.val = cases.$isActive.val ? 'first' : 'second'
  }
})

//TODO: remove this use normal css mod (this is a temp bug fix!)
cases.$isReceiver.on(function() {
  if(this.val) {
    app.css.val = { addClass:'isReceiver' }
  } else {
    app.css.val = { removeClass:'isReceiver' }
  }
})


},{"./spotlight":"/Users/youzi/dev/mtv-play/app/spotlight.js","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/user/multiscreen":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/multiscreen/index.js","vigour-js/app/user/multiscreen/cast":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/multiscreen/cast/index.js","vigour-js/app/user/navigation":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/navigation.js","vigour-js/app/user/token":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/token.js","vigour-js/app/user/url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/url.js","vigour-js/app/user/usage":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/usage.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/network/url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/url.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/app/util.js":[function(require,module,exports){
var app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')
  , playIcon = cases.phone ? 'play' : 'playAlt'

//TODO: LOCK ICONS NEEDS TOTAL REFACTOR -- make one module for it
exports.access = function( access, media ) {

  if( !media ) return

  var trial = app.user.role.val === 3
    , id = media.id && media.id.val //for purchases
    , accesAllowed = media 
      && !( media._parent && media._parent._name === 'channels' && app.user.role.val === 3 )
      && ( !access || cases.$isUpgraded.val && ( !trial || ( trial && access < 2 ) ) )

  if( app.user.purchases.$userOrigin[id] ) accesAllowed = true

  return accesAllowed ? playIcon : 'lockedContent'

}
},{"vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/button/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Icon = require('../icon')
  , util = require('vigour-js/util')
  , switcher

//used in discover, menu
module.exports = exports = new Element(
{ node:'button'
, css:'ui-button'
, text:'this is a button'
, righticon:new Icon({ icon:'arrowright' })
}).Class

switcher = new Element(
{ css:function(){
   return 'ui-switch' + ( !this.switchOn || this.switchOn.val!==true ? '' : ' ui-switch-on' )
  }
, btn:{}
})

switcher.extend({
  switchOn: function(val) {
  	this.css = 'ui-switch' + ( !val.val || val.val!==true ? '' : ' ui-switch-on' )
  }
}) 

exports.Switcher = switcher.Class
},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/button/style.less","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/components/button/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/epg_temp.js":[function(require,module,exports){
var Data = require('vigour-js/data')
  , app = require('vigour-js/app/')
  , config = require('vigour-js/util/config')
  , ajax = require('vigour-js/browser/network/ajax')
  , epgData = new Data()
  , blacklist = []

var siteKeys =
{ DE: 'va7rcfymx4'
, NL: 'm79obhheh2'
, BE: 'u25ynmsmj5'
// , SE: 'momm6qs3z9' // sweden
, CH: 'Gz4k0j41zz'
, PL: 'm7odshzm9u'
, RO: 'glwdu619f'
, FR: 'ijhsvud4j2'
}

module.exports = exports = function(id,fallback){
  if(~blacklist.indexOf(id)){
    if(fallback) fallback()
    return
  }
  var date = exports.getDate()
    , specific = app.region.val.toLowerCase() + '/channels/' + id + '/' + date
    // , url = 'http://api.mtvnn.com/v2/site/' + siteKeys[data.region] + '/' + specific + '/airings.json'
  if(!epgData[date]){
    epgData.empty
    epgData.set(date,{})
  }
  if(!epgData[date][specific] || !epgData[date][specific].val){
    epgData[date].set(specific,false)

    ajax(
      { url: 'https://api.mtvnn.com/v2/airings.json/?channel_id=' + id + '&filter=today&bust=' + ~~( Math.random() * 1000000 )
      , headers: { Accept:'*/*' }
      , iframe:  config.epg //'node_modules/vigour-js/browser/network/iframe/index.html'
      , method: 'GET'
      , complete: function(result){
          if(result instanceof Array){
            var airings = []
            result.forEach(function(self,i){
              if(result[i+1]){
                var airing = self.airing
                airing.duration = result[i+1].airing.minutes_since_midnight - airing.minutes_since_midnight
                airing.endtime = airing.minutes_since_midnight + airing.duration
                airings.push(airing)
              }
            })
            epgData[date].set(specific,airings)
          }else{
            blacklist.push(id)
            epgData[date][specific].removeListener() // remove all possible listeners
            if(fallback) fallback()
          }
        }
      , error: function(err) {
          blacklist.push(id)
          if(fallback) fallback()
        }
      }
    )
  }
  return epgData[date][specific]
}

exports.now = function(id,data){
  var timeNow = exports.minutesSinceMidnight()
    , nowplaying
    , epgdata = exports(id)
    , checker
  if(!epgdata) return
  if(!epgdata.val){
    var nowplaying = new Data()
    checker = function checker(){
      this.each(findNowPlaying)
      epgdata.removeListener(checker)
    }
    epgdata.addListener(checker)
  }else{
    epgdata.each(findNowPlaying)
  }

  return nowplaying

  function findNowPlaying(){
    var startTime = this.minutes_since_midnight.val
      , endTime = startTime + this.duration.val

    if(startTime <= timeNow && endTime > timeNow){
      if( nowplaying ) nowplaying.val = this
      else nowplaying = this
      if(checker) epgdata.removeListener(checker)
      return
    }
  }
}

exports.anyNow = function( data ){
  if( data._name === 'channels' ){
    var keys = data.keys
      , i = keys.length
      , self = this
    if(!i) return
    this._findNow = new Data()
    for (i--; i >= 0; i--) {
      var epgid = data[keys[i]].epgid
      if( epgid !== void 0 ){
        this.model = false
        var epgNow = exports.now(epgid.val)
        if( epgNow ){
          if( epgNow.title ){
            this.data = epgNow
            this._link = returnLink(keys[i])
          } else {
            this._findNow[i] = epgNow
            this._findNow[i]._index = keys[i]
            this._findNow[i].addListener(function (){
              if( this._index !== void 0 ){
                self.model = false
                self.data = this.from.val
                self._link = returnLink( this._index )
                setTimeout(function(){self._findNow && self._findNow.remove()})
              }
            })
          }
        }
      }
    }
  }
}

exports.getDate = function(sep){
  if(!sep) sep = '-'
  var today = new Date()
    , dd = today.getDate()
    , mm = today.getMonth()+1
    , yyyy = today.getFullYear()
  if(dd<10) dd = '0'+dd
  if(mm<10) mm = '0'+mm
  return yyyy+sep+mm+sep+dd
}

exports.minutesSinceMidnight = function(){
  var d = new Date()
    , e = new Date(d)
    , msSinceMidnight = e - d.setHours(0,0,0,0)
  return msSinceMidnight/60000
}

exports.clockTime = function(v,minutes){
  var h = ~~(minutes/60)
    , m = ~~(minutes%60)
  if(h > 23) h -= 24
  else if(h < 10) h = '0'+h
  if(m < 10) m = '0'+m
  return h + ':' + m
}

function returnLink(i){
  return ['mtvData',app.region.val,app.language.val,'channels',i].join('.')
}
},{"vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/network/ajax":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/ajax.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/first/channels/index.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , Overview = require('../overview')
  , Icon = require('../../icon')
  , app = require('vigour-js/app/')

var channelItems = new Overview.Items(
    { pageheader:
      { 'text.dictionary': 'text.nav.channels'
      }
    , collection:
      { data:'channels'
      , element:Overview.Item.Tv 
        ? new Overview.Item.Tv
        : new Overview.Item(
          { righticon:new Icon(
            { on:{data:'id'}
            , icon:
              { data:'access'
              , transform: function( val, cv ) {
                  var icon = app.util.access( cv, this.data )
                  return icon === 'lockedContent'
                    ? 'lockedContentAlt'
                    : 'arrowright'
                }
              , listen:app.user.role
              }
            })
          , events:
            { click:function(){
                this.checkParent('on.media',true).$userOrigin = this.data.from
              }
            }
          })
      }
    , model:
      { complete:function(){
          if(!this.parent.node.scrollTop)
          {
            this.parent.node.scrollTop = 1
          }
          this.model = false
        }
      }
    })

module.exports = new Overview(
{ items:channelItems
// , touch:{h:{parent:'h'}} 
}).Class
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../overview":"/Users/youzi/dev/mtv-play/components/first/overview/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/first/discover/carousel.js":[function(require,module,exports){
require( './style.less' )

var Element = require( 'vigour-js/app/ui/element' )
var dictionary = require( 'vigour-js/app/dictionary' )
var Img = require( '../../img' )
var Icon = require( '../../icon' )
var Title = require( '../../text' ).Title
var app = require( 'vigour-js/app/' )
var cases = require( 'vigour-js/browser/cases' )
var config = require( 'vigour-js/util/config' )
var animationFrame = require( 'vigour-js/browser/animation/frame' )
var timer
var cancelAutoRoll

var slide = new Element( {
  img: new Img.Carousel( {
    teaser: {
      title: new Title()
    },
    background: {
      range: 100
    },
    events: {
      active: 'clicked',
      click: function() {
        var data = this.data,
          type = data.type && data.type.val,
          link = data.link && data.link.val,
          show, episode

        if( type === 'Article' ) {
          if( link ) {
            app.api.url.val = link
          } else {
            app.popup.from.data = data.from
            app.popup.from.val = 'article'
          }
        } else if( link ) {
          link = link.split( '.' )
          show = link[ 3 ] === 'shows'
          episode = link[ link.length - 2 ] === 'episodes'

          if( episode ) {
            linkdata = app.content.from.get( link.slice( 3 ) )
            app.user.navigation.media.$userOrigin.val = linkdata
            app.state.val = {
              val: 'player',
              video: linkdata
            }
          } else if( show ) {

            app.user.navigation.show.$userOrigin = app.content.from.get( link.slice( 3 ) )
          }

        }
      }
    }
  } ),
  model: {
    subscription: {
      link: true,
      type: true
    }
  }
} )

var roll = new Element( {
  css: 'ui-roll',
  x: {
    data: 'carousel',
    transform: function( v, cv ) {
      if( isNaN( cv ) ) cv = cv._val || 0
      this._pos = cv
      return cv * this.node.offsetWidth || 0
    },
    animation: {
      time: {
        val: 36,
        phone: 18
      },
      easing: 'outCubic'
    },
    listen: app.w
  },
  collection: {
    data: 'marquee',
    element: slide
  },
  touch: {
    events: {
      grab: {
        x: true,
        pass: function( e, d ) {
          if( Math.abs( d.x ) > Math.abs( d.y ) ) {
            cancelAutoRoll = true
            return true
          }
        },
        up: setPosition
      }
    }
  },
  model: {
    complete: function() {
      var _this = this
      _this.x._p = true
      window.requestAnimationFrame( function() {
        if( _this.x ) {
          _this.x.update()
          _this.x._p = null
        }
      } )
      this.model = {
        complete: null
      }
    }
  }
} )

var buttons = new Element( {
  css: 'ui-car-buttons',
  prevBtn: new Icon( {
    icon: 'leftnav',
    events: {
      click: function() {
        var rll = this.parent.parent.roll,
          ps = rll._pos

        if( ps < 0 ) setPos( rll, ps + 1 )
      }
    }
  } ),
  nextBtn: new Icon( {
    icon: 'rightnav',
    events: {
      click: function() {
        var rll = this.parent.parent.roll,
          ps = rll._pos | 0
        if( ps - 1 > -rll.children.length ) setPos( rll, ps - 1 )
      }
    }
  } )
} )

var dots = new Element( {
  css: 'ui-dots',
  collection: {
    data: 'marquee',
    element: new Element( {
      events: {
        click: function() {
          setPos( this.checkParent( 'roll', true ), -index( this ) )
        }
      }
    } )
  }
} )

dots.extend( {
  dotFocus: function( val ) {
    var pos = -val.val || 0,
      dts = this.children

    for( var i = dts.length - 1; i >= 0; i-- ) {
      var dot = dts[ i ]
      if( i === pos ) dot.css = 'dot-focus'
      else dot.css = false
    }
  }
} )

var carousel = new Element( {
  on: {
    $remove: {
      defer: function( update ) {
        clearTimeout( timer )
      }
    }
  },
  tablet: {
    bgTeaser: {}
  },
  roll: roll,
  'desktop.buttons': buttons,
  dotholder: {
    dots: new dots.Class( {
      dotFocus: {
        data: 'carousel'
      }
    } )
  }
} )

if( cases.tablet ){
  carousel.h = {
    val: app.w,
    multiply: 9 / 16,
    max: {
      val: app.h,
      multiply: 1 / 2
    }
  }
}

module.exports = exports = carousel
exports.Dots = dots.Class
exports.Buttons = buttons.Class
exports.Roll = roll.Class

function autoRoll( roll ) {
  clearTimeout( timer )
  timer = setTimeout( function() {
    var newPos = roll._pos !== -roll.children.length + 1 ? roll._pos - 1 : 0
    autoRoll( roll )
  }, 5000 )
}

function index( me ) {
  if( !me._i ) {
    var siblings = me.parent.children,
      i = siblings.length - 1

    for( ; i >= 0; ) siblings[ i ]._i = i--
  }
  return me._i
}

// TODO: unify with switcher
function setPosition( e, d, ld ) {
  var treshold = 120,
    flick = 10,
    l = this.children.length,
    oldPos = this._pos || ( this._pos = 0 ),
    newPos = oldPos,
    unfocus

  if( Math.abs( ld.x ) > flick ) {
    if( ld.x < 0 && !( d.x > treshold ) ) newPos = Math.max( oldPos - 1, -l + 1 )
    if( ld.x > 0 && !( d.x < -treshold ) ) newPos = Math.min( oldPos + 1, 0 )
  } else {
    if( d.x < -treshold ) newPos = Math.max( oldPos - 1, -l + 1 )
    if( d.x > treshold ) newPos = Math.min( oldPos + 1, 0 )
  }

  if( this.x._e ) this.x = {
    _esub: this.x._e._val
  }

  cancelAutoRoll = false

  setPos( this, newPos )
}

function setPos( roll, newPos ) {
  var oldPos = roll._pos || ( roll._pos = 0 ),
    discoverdots = roll.parent.dotholder.dots,
    dts = ( discoverdots || roll.parent.parent.parent.parent.topbar.txt.dotholder.dots ).children

  if( newPos !== oldPos ) {
    roll.data.carousel.from = newPos
    roll._pos = newPos
  }

  if( discoverdots && timer ) autoRoll( roll )
}

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/discover/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/animation/frame":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/frame.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/first/discover/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/')
  , carousel = require('./carousel')
  , Icon = require('../../icon')
  , cases = require('vigour-js/browser/cases')
  , Item = require('../../item')
  , lists = require('./lists')

var base = new Element
( { css:'first-discover'
  , x:{translate:true} 
  , carousel:new carousel.Class()
  , touch:
    { scrollbar:'y'
    , on:
      { $render:
        { defer:function( update ){
            var caller = this._parent._caller
            if(exports.scrollTop) window.requestAnimationFrame(
              function(){
                if(caller._node) caller.node.scrollTop = exports.scrollTop || cases.touch && 1
              })
            update()
          }
        }
      }
    , model:
        { complete:function(){
          this.node.scrollTop = exports.scrollTop || cases.touch && 1
          this.model = {complete:null}
        }
      }
    }
  , lists:lists
  , 'events.scroll':function(){
      var node = this.node
        , scrollTop = exports.scrollTop = node.scrollTop
      if( cases.$hasReceiver.val )
      {
        var rect = node.getBoundingClientRect()
        this.data.scroll.$userOrigin = scrollTop/(node.scrollHeight - rect.height )
      }
    }
  }
)

module.exports = base.Class
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./carousel":"/Users/youzi/dev/mtv-play/components/first/discover/carousel.js","./lists":"/Users/youzi/dev/mtv-play/components/first/discover/lists.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/discover/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/discover/lists.js":[function(require,module,exports){
var app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')
  , dictionary = require('vigour-js/app/dictionary')
  , Element = require('vigour-js/app/ui/element')
  , Icon = require('../../icon')
  , Img = require('../../img')
  , Item = require('../../item')
  , Text = require('../../text')
  , epgData = require('../../epg_temp')
  , Title = Text.Title
  , TitleSubtitle = Item.TitleSubtitle

var imgWidth = cases.phone ? 150 : 220

var item = new Element(
  { x:{translate:true}
  , img:new Img(
    { h:{val:152,phone:100}
    , w:{val:220,phone:150}
    })
  , txt:new TitleSubtitle()
  })

var linkitem = new item.Class(
  { model:{ subscription:{link:true} }
  , events:{ active:'ui-item-clicked',click:linkClick }
  })

var List = new Element(
  { css:'list'
  , on:
    { $render:
      { defer:function( update ){
          var caller = this._parent._caller
            , length = caller.scroller.children.length
          if(!length) caller.display = 'none'
          else caller.display = 'block'
          update()
        }
      }
    }
  , header:{}
  , scroller:
    { css:'preload'
    , scrollbar:'x'
    , x:{translate:true}
    , y:{translate:true}
    , collection:
      { data:true//'list'
      , element:linkitem
      }
    , touch:
      { events:
        { scroll:function(){
            this.css = ''
          }
        }
      }
    }
  , 'model.complete':function(){
      if( this.scroller ){
        var length = this.scroller.children.length
        this.display = !length ? 'none' : 'block'
      }
    }
  }).Class

module.exports = new Element(
{ action:new Item
  ( { ontv:
      { text:'on tv'
      }
    , program:
      { text:
        { data:'title'
        }
      }
    , arrow:new Icon
      ( { icon:'arrowright'
        }
      )
    , events:
      { active:'action-clicked'
      , click:function(){
          if(this._link)
          {
            this._stayActive = true
            this.checkParent('on.media',true).$userOrigin = app.cloud.data.get(this._link)
          }
        }
      }
    , model:
      { subscription:{$:{epgid:true}}
      , val:function( data ){
          if( data.channels ) epgData.anyNow.call( this, data.channels )
        }
      }
    }
  )
, allshows:
  { 'text.dictionary': 'text.nav.allShows'
  , events:
    { active:'ui-item-clicked'
    , click:function() {
        this._stayActive = true
        this.checkParent('on.page',true).$userOrigin = 'shows'
      } 
    }
  }
, watched:new List(
  { css:'list watched'
  , header:{ text:{ dictionary:'text.showsYouWatch' } }
  , scroller:
    { collection:
      { data:'watched'
      , element:new linkitem.Class(
        { events:
          { active:'ui-item-clicked'
          , click: function() {
              app.user.navigation.media.$userOrigin = this.data.media.from 
            }
          }
        , model:function(data){
            var path = data.media && data.media.from._contentPath
            if( path )
            {
              this.img.cover.data = app.user.usage.from.get(path)
              this.txt.subtitle.data = data.media.from
              this.model = false
            }
          }
        , img:
          { background:{data:'show.img'}
          , cover:
            { model:{inherit:false}
            , desktop:
              { percentage:{text:{data:'time',transform:function(v,cv){
                  var p = Math.floor(cv * 100)
                  return p ? Math.abs(p) + '%' : ''
                }}}}
            , bar:
              { y:{tablet:147,phone:95}
              , w:{data:'time',transform:function(v,cv){
              return !isNaN(cv) ? Math.abs(cv) * imgWidth : 0
            }}}}
          }
        , txt:
          { title:{ text: { data:'show.title'} } 
          , subtitle:new Text.Subtitle({model:{inherit:false}})
          }
        })
      }
    }
  })
, releases:new List(
  { header:{text:{ dictionary:'text.newReleases' }}
  , scroller:
    { collection:
      { data:'releases'//'list'
      , element:new linkitem.Class(
        { txt:
          { title:
            { text:
              { data:'show.title'
              }
            }
          }
        })
      , desktop:
       { element:new Item.Large(
          { info:
            { txt:
              { title:{ text:{ data:'show.title' } }
              }
            }
          , model:
            { subscription:
              { link:true
              }
            }
          , events:
            { active:'ui-item-clicked' 
            , click:linkClick
            }
          })
        }
      }
    }
  })
, recommended:new List(
  { header:{text:{dictionary:'text.recommended'}}
  , scroller:
    { collection:
      { data:'recommended'
      }
    }
  })
, free:new List(
  { header:{text:{dictionary:'text.free'}}
  , scroller:
    { collection:
      { data:'free'
      , element:new linkitem.Class(
        { txt:
          { title:
            { text:
              { data:'show.title'
              }
            }
          , subtitle:
            { text:
              { data:'title'
              }
            }
          }
        })
      }
    }
  })
})

function linkClick(){
    var link = this.data.link.val
      , header = (this.parent.header && this.parent.header.text.val) || (this.parent.parent.header && this.parent.parent.header.text.val)
    // control.blockHistory = true
    if(header) {
      //set hier ff title op het echte object      
      // setTimeout(function() { track.generalEvent('teaserClick', header, link) },500)
    }
    if(link)
    {
      link = link.split('.').splice(3)
      this._stayActive = true
      if(~link.indexOf('episodes')) this.checkParent('on.media',true).$userOrigin = this.checkParent('on.content',true).from.get(link)
      else this.checkParent('on.show',true).$userOrigin = this.checkParent('on.content',true).from.get(link)
    }
    // appData.current.from.val = link 
}
},{"../../epg_temp":"/Users/youzi/dev/mtv-play/components/epg_temp.js","../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/discover/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/epg/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Data = require('vigour-js/data')
  , app = require('vigour-js/app/')
  , Icon = require('../../icon')
  , Item = require('../../item')
  , Seekbar = require('../../player/seekbar')
  , epgData = require('../../epg_temp')
  , cases = require('vigour-js/browser/cases')
  , Value = require('vigour-js/value')
  , clockTime = epgData.clockTime
  , minutesSinceMidnight = epgData.minutesSinceMidnight

var fixValue = new Value({val:360, phone:app.w,sub:30})

var EpgItem = new Element(
{ holder:
  { txt:new Item.TitleSubtitle(
    { subcontainer:
      { subtitle:
        { text:
          { data:'minutes_since_midnight'
          , transform:clockTime
          }
        }
      , seekbar:{text:' - ',css:'subtitle'}
      , endtime:
        { css:'subtitle'
        , text:
          { data:'endtime'
          , transform:clockTime
          }
        }
      }
    })
  }
, border:{}
}).Class

module.exports = exports = new Element( //TODO: unify this with Seasons!!
{ message:
  { icon:new Icon({icon:'empty'})
  }
, container:
  { list:
    { touch: 
      { scrollbar:'y'
      , h:
        { val:app.h
        , sub:
          { val:40
          , iosFull:60
          , add:
            { phone:
              { val:app.w
              , divide:16/9
              }
            }
          }
        }
      }
    , collection:
      { data:true
      , element:new EpgItem()
      , filter:
        { condition:
          { endtime:
            { $gt:minutesSinceMidnight
            }
          } 
        }
      }
    , model:
      { complete:function(){
          var self = this
            , currentShow = this.children[0]
            , message = this.parent.parent.message
          if(!currentShow)
          {
            message.icon.icon = 'warning'
            message.text = {dictionary:'text.noEPG'}
            return
          }

          message.icon.icon = ''
          message.text = '' 

          var currentStarts = currentShow.data.minutes_since_midnight.val
            , currentEnds = currentShow.data.endtime.val
            , duration = currentShow.data.duration.val
            , timeLeft = ~~((currentEnds - minutesSinceMidnight()) * 60000) + 3000
            , seekbar = currentShow.holder.txt.subcontainer.seekbar

          if(!seekbar.seek && duration)
          {
            currentShow.set(
            { 'holder.txt.subcontainer.seekbar':new Seekbar(
              { seek:{w:{data:'time'}}
              , button:false
              , data:new Data({time:(minutesSinceMidnight() - currentStarts)/duration})
              })
            })

            if(this._interval) clearInterval(this._interval)

            var self = this
            this._interval = setInterval(function(){
              if( currentShow && currentShow.holder && currentShow.holder.txt )
              {
                var progress = minutesSinceMidnight() - currentStarts
                currentShow.holder.txt.subcontainer.seekbar.data.time.val = progress/duration
              }
              else
              {
                clearInterval( self._interval )
                self._interval = null
              }

            },1000)
          }

          if(timeLeft > 0){
            if(this._timer) clearTimeout(this._timer)
            this._timer = setTimeout(function(){
              self.updateData()
              self._timer = null
            },timeLeft + 2000 )
          }

        }
      }
    }
  , model:{inherit:false}
  }
, phone:
  { position:'absolute'
  }
, model:
  { field:'media'
  , subscription:{epgid:true}
  , val:function(data){
      var epgid = data.epgid && data.epgid.val
        , self = this
        , epgdata
      if(epgid !== void 0){
        epgdata = epgData(epgid)
        this.container.data = epgdata 
        this.model = false
      }
    }
  }
}).Class

exports.base.container.list.setSetting(
{ name:'remove'
, remove:function(){
    if(this._timer) clearTimeout(this._timer)
    if(this._interval) clearInterval(this._interval)
  }
})
},{"../../epg_temp":"/Users/youzi/dev/mtv-play/components/epg_temp.js","../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../../player/seekbar":"/Users/youzi/dev/mtv-play/components/player/seekbar/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/epg/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/components/first/epg/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/favourite/index.js":[function(require,module,exports){
require('./style.less')

var Icon = require('../../icon')
  , cases = require('vigour-js/browser/cases')
  , app = require('vigour-js/app/')
  
module.exports = new Icon(
{ icon:
  { data:'showusage.favourite'
  , transform:function( v, favourite ){
      if(favourite && (favourite === 'true' || favourite === true))
      {
        this.css = 'ui-icon favorited'
        return 'favorite'
      }
      else 
      {
        this.css = 'ui-icon'
        return 'favoriteadd'
      }
    }
  }
, 'events.click':function(){
    if(cases.$isLoggedIn.val)
    {
      var thisUsage = this.data.showusage.$userOrigin
      if(!thisUsage.favourite || !thisUsage.favourite.val)
      {
        thisUsage.val = { favourite:true }
      }
      else
      {
        thisUsage.val = { favourite:false } 
      }
    }
    else
    {
      app.popup.from.val = 'roadblock'
    }
  }
}
).Class
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/favourite/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/favourite/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
require( './style.less' )

var Element = require( 'vigour-js/app/ui/element' )
var app = require( 'vigour-js/app/' )
var cases = require( 'vigour-js/browser/cases' )
var Menu = require( './menu' )
var Icon = require( '../icon' )
var Switcher

//----overlay-----

if( cases.tv ) {

  Switcher = require( './tv' )

  module.exports = exports = new Element( {
    css: 'first-state',
    sidemenu: new Menu.Sidemenu(),
    w: {
      parent: 'w'
    },
    h: {
      parent: 'h'
    },
    switcher: new Switcher( {
      position: 'absolute',
      h: {
        parent: 'h'
      }
    } )
  } ).Class

} else {

  var Notification = require( './notification' )
  var Switcher = require( './switcher' )
  var Miniplayer = require( './miniplayer' )
  var Player = require( '../player' )
  var Popup
  var watch = require( './watch' )
  var Loader = require( '../loader' )
  var postpone = require( 'vigour-js/browser/events/util' ).postpone
  var updateWidth = postpone( function( t, smallscreen ) {
    if( t.topbar ) {
      t.topbar.display = smallscreen ? 'block' : 'none'
      t.switcher.y = smallscreen ? 40 : 0
      t._block = true
      t.w.update()
    }
  }, 100 )

  function msMediaInit( update ) {
    var parent = this._parent,
      caller = parent._caller,
      msMedia = this.$userOrigin

    if( msMedia.val ) {
      if( !caller.miniplayer ) {
        caller.miniplayer = new Miniplayer( {
          on: {
            usage: parent.usage.from,
            msmedia: msMedia,
            volume: parent.volume.from
          },
          data: {
            media: msMedia,
            mediausage: parent.usage.from.get( msMedia.from._contentPath ),
            volume: parent.volume.from
          },
          play: {
            icon: parent.play
          },
          y: ( cases.phone && msMedia.from._parent._name === 'channels' ) ? 24 : 0
        } )
        caller.add( caller.miniplayer, cases.phone && 'topmenu' )
      }
      update()
    } else {
      return true
    }
  }

  function onPopup( update, args ) {
    var caller = this._parent._caller
    if( this.val && !caller.popupWindow ) {
      if( !Popup ) Popup = require( '../popup' )

      var popupElem = new Popup( {
        name: 'popupWindow',
        on: {
          user: app.user,
          language: app.user.language,
          token: app.user.token,
          newsletter: app.user.newsletter,
          overlay: app.overlay,
          loading: app.loading,
          popup: app.popup
        }
        // , api: app.api
      } )

      caller.add( popupElem, caller.notification )

      caller.popupWindow.on.popup._update()
    }
    update()
  }

  function onNotification( update, args ) {
    var caller = this._parent._caller
    if( this.val && !caller.notification ) {
      caller.set( {
        notification: new Notification( {
          on: {
            notification: app.notification
          }
        } )
      } )
      caller.notification.on.notification._update()
    }
    update()
  }

  function onLoading( update, args ) {

    var caller = this._parent._caller,
      loader = caller.loader,
      cancel = caller.cancel,
      overlay = caller.checkParent( 'on.overlay', true ),
      _this = this

    this.clearCache()
      //TODO have to be able to use .val for current set!
      // console.log( 'loading', loader, this.val )

    if( caller._cancelTimer ) {
      clearTimeout( caller._cancelTimer )
      caller._cancelTimer = null
    }

    if( this.val ) {
      if( !overlay.val ) overlay.from.val = 'loading'
      if( !loader ) {
        caller.set( {
          loader: new Loader()
        } )
        caller._cancelTimer = setTimeout( function() {
          caller.set( {
            cancel: {
              btn: {
                text: 'cancel'
              },
              events: {
                click: function() {
                  _this.from.val = false
                }
              }
            }
          } )
          caller._cancelTimer = null
        }, 8000 )
      }
    } else if( !this.val ) {
      if( cancel ) cancel.remove()
      if( loader ) loader.remove()
      if( overlay.val === 'loading' ) overlay.from.val = false
    }
    update()
  }

  function onRemove( update ) {
    var caller = this._parent._caller
    if( caller._cancelTimer ) clearTimeout( caller._cancelTimer )
    update()
  }

  if( cases.phone ) {
    module.exports = exports = new Element( {
      css: 'first-state',
      on: {
        popup: {
          defer: onPopup
        },
        notification: {
          defer: onNotification
        },
        loading: {
          defer: onLoading
        },
        $remove: {
          defer: onRemove
        },
        $render: {
          defer: function( update ) {
            var caller = this._parent._caller,
              section = caller.section

            section.on.msmedia._update()
            caller.on.popup._update( caller.on.popup.val )

            update()
          }
        }
      },
      w: {
        parent: 'w'
      },
      h: {
        parent: 'h'
      },
      section: {
        on: {
          msmedia: {
            init: msMediaInit
          }
        },
        w: {
          parent: 'w'
        },
        h: {
          parent: 'h'
        },
        switcher: new Switcher( {
          position: 'absolute',
          y: {
            translate:true,
            val:Menu.Topbar.base.h,
            add:{
              val:0,
              $fromMtvSite:30
            }
          },
          h: {
            parent: 'h',
            sub: {
            val:Menu.Topbar.base.h,
              add:{
                val:0,
                $fromMtvSite:30
              }
            }
          }
        } ),
        linkback: {
          position:'absolute',
          y: {
            translate:true,
            val:Menu.Topbar.base.h,
            sub:{
              val:30,
              $fromMtvSite:0
            }
          },
          title: {
              text: {
                dictionary:'text.backlink'
              }
          },
          close: new Icon({
            icon:'close',
            'events.click': function( e ) {
              e.prevent = true
              e.preventDefault()
              cases.$fromMtvSite.val = false
            }
          }),
          'events.click': function() {
            document.location.href = app.fromMtvSite
          }
        },
        topmenu: new Menu.Topmenu( {
          on: {
            menu: app.menu
          }
        } ),
        topbar: new Menu.Topbar( {
          display: {
            desktop: 'none'
          }
        } )
      }
    } ).Class

  } else {
    module.exports = exports = new Element( {
      css: 'first-state',
      on: {
        state: {
          defer: function( update ) {
            var state = this.from.val,
              _this = this,
              caller = this._parent._caller,
              section = caller.section

            if( state === 'first' && !caller.w ) // just add this to element maybe?
            {
              caller.set( {
                on: {
                  popup: {
                    defer: onPopup
                  },
                  notification: {
                    defer: onNotification
                  },
                  loading: {
                    defer: onLoading
                  },
                  $remove: {
                    defer: onRemove
                  },
                  fullscreen: {
                    val: cases.$isFullscreen,
                    defer: function( update ) {
                      var section = this._parent._caller.section
                      section.x._p = true
                      window.requestAnimationFrame( function() {
                        if( section && section.x ) section.x._p = null
                      } )
                      update()
                    }
                  }
                },
                w: {
                  parent: 'w'
                },
                h: {
                  parent: 'h'
                },
                sidemenu: new Menu.Sidemenu( {
                  data: app.user.navigation
                } ),
                section: {
                  on: {
                    msmedia: {
                      init: msMediaInit
                    }
                  },
                  x: {
                    val: cases.tablet ? {
                      val: 0,
                      $isFullscreen: 0
                    } : {
                      val: 200,
                      $isFullscreen: 0
                    },
                    animation: {
                      time: 18,
                      easing: 'outCubic'
                    }
                  },
                  w: {
                    parent: 'w',
                    desktop: {
                      sub: {
                        self: 'x'
                      }
                    }
                  },
                  h: {
                    parent: 'h'
                  },
                  switcher: {
                    position: 'absolute',
                    h: {
                      parent: 'h'
                    },
                    touch:{
                      y: {
                        translate:true,
                        val:Menu.Topbar.base.h,
                        add:{
                          val:0,
                          $fromMtvSite:30
                        }
                      },
                      h: {
                        sub: {
                          val:Menu.Topbar.base.h,
                          add:{
                            val:0,
                            $fromMtvSite:30
                          }
                        }
                      }
                    }
                  }
                }
              } )


                    // position: 'absolute',
                    // y: {
                    //   translate:true,
                    //   val:Menu.Topbar.base.h,
                    //   add:{
                    //     val:0,
                    //     $fromMtvSite:30
                    //   }
                    // },
                    // h: {
                    //   parent: 'h',
                    //   sub: {
                    //   val:Menu.Topbar.base.h,
                    //     add:{
                    //       val:0,
                    //       $fromMtvSite:30
                    //     }
                    //   }
                    // }

              section.on.msmedia._update()
              caller.on.popup._update( caller.on.popup.val )

              if( cases.desktop ) {
                section.x._p = true
                section.x = {
                  val: app.w,
                  defer: function( update, args ) {
                    if( args[ 0 ] ) {
                      this._p = true
                      update()
                      this._p = null
                    } else {
                      update()
                    }
                  },
                  transform: function( v, cv ) {
                    if( cases.$isFullscreen.val ) return 0
                    var smallscreen = app.w.val < 1300
                    if( !this._block ) updateWidth( this, smallscreen )
                    else this._block = null
                    return smallscreen && !app.menu.val ? 0 : 200
                  }
                }
                section.x._p = null
              }

            }

            section.x._p = true
            window.requestAnimationFrame( function() {
              if( section.x ) section.x._p = null
            } )

            update()
          }
        },
        $parent: // put this where it's set in switcher
        {
          defer: function( update ) {
            this._parent.state._update()
            update()
          }
        }
      },
      sidemenu: {},
      section: {
        x: {
          translate: true
        },
        switcher: new Switcher(),
        tablet:{
          linkback: {
            position:'absolute',
            y: {
              translate:true,
              val:Menu.Topbar.base.h,
              sub:{
                val:30,
                $fromMtvSite:0
              }
            },
            title: {
              text: {
                dictionary:'text.backlink'
              }
            },
            close: new Icon({
              icon:'close',
              'events.click': function( e ) {
                e.prevent = true
                e.preventDefault()
                cases.$fromMtvSite.val = false
              }
            }),
            'events.click': function() {
              document.location.href = app.fromMtvSite
            }
          }
        },
        topbar: new Menu.Topbar( {
          display: {
            desktop: 'none'
          }
        } )
      }
    } ).Class
  }

  exports.base.set( {
    overlay: {
      display: 'none',
      'events.click': function() {
        var loading = this.parent.on.loading,
          popup = this.parent.on.popup
        if( !loading.val ) {
          popup.from = false
        }
      }
    },
    on: {
      overlay: {
        defer: function( update, args ) {
          var overlay = this.from
          if( !overlay ) return true
          if( overlay.val ) {
            this._parent._caller.overlay.display.val = 'block'
          } else if( !overlay.val ) {
            this._parent._caller.overlay.display.val = 'none'
          }
          update()
        }
      }
    }
  } )

}

},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../loader":"/Users/youzi/dev/mtv-play/components/loader/index.js","../player":"/Users/youzi/dev/mtv-play/components/player/index.js","../popup":"/Users/youzi/dev/mtv-play/components/popup/index.js","./menu":"/Users/youzi/dev/mtv-play/components/first/menu/index.js","./miniplayer":"/Users/youzi/dev/mtv-play/components/first/miniplayer/index.js","./notification":"/Users/youzi/dev/mtv-play/components/first/notification/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/style.less","./switcher":"/Users/youzi/dev/mtv-play/components/first/switcher/index.js","./tv":"/Users/youzi/dev/mtv-play/components/first/tv/index.js","./watch":"/Users/youzi/dev/mtv-play/components/first/watch/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js"}],"/Users/youzi/dev/mtv-play/components/first/menu/casticon.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , Item = require('../../item')
  , Img = require('../../img')
  , Icon = require('../../icon')
  , text = require('../../text')
  , app = require('vigour-js/app/')
  , Loader = require('../../loader')

var DeviceNumber = new Element(
{ css:'relative-size'
, text:app.user.devices.$length
, display:'relative'
, opacity:
  { val:0
  , $isLoggedIn:1
  }
}).Class

module.exports = exports = new Element(
{ content:new Icon( 
  { icon:'cast'
  , scale:{val:1,animation:{start:1,time:18,easing:'outCubic',done:function(){
      this.scale.val = 1
    }}}
  , display:'block'
  , number:new DeviceNumber()
  , css:{ $hasReceiver:'ui-icon hasReceiver' }
  , opacity:
    { val: 0.5
    , $hasDevices:
      { val:0.5
      , $isLoggedIn:1
      }
    }
  , 'events.click': function(e) {
      e.prevent = true
      var popup = this.checkParent('on.popup',true)
      popup.from = 'devices'
    }
  }) 
, css:'ui-icon cast'
, '!$connected':
  { content: { display:'none' }
  , loader: new Loader.Simple()
  }
}).Class


},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../../loader":"/Users/youzi/dev/mtv-play/components/loader/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/first/menu/index.js":[function(require,module,exports){
require( './style.less' )

var Element = require( 'vigour-js/app/ui/element' ),
  Item = require( '../../item' ),
  Img = require( '../../img' ),
  Icon = require( '../../icon' ),
  text = require( '../../text' ),
  cases = require( 'vigour-js/browser/cases' ),
  app = require( 'vigour-js/app/' ),
  CastIcon = require( './casticon' )
  // , Loader = require('../../loader')

function setPageFactory( page ) {
  if( cases.phone ) {
    return function() {
      this.checkParent( 'topmenu', true ).hide()
      app.user.navigation.page.$userOrigin = page
    }
  } else if( cases.tablet ) {
    return function() {
      this.checkParent( 'section', true ).x = 0
      app.user.navigation.page.$userOrigin = page
    }
  } else {
    return function() {
      app.user.navigation.page.$userOrigin = page
    }
  }
}

//user.activeDevices
var Term = new text.Title( {
  'events.click': function() {
    var popup = this.checkParent( 'on.popup', true ).from,
      user = app.user //TODO: fix
    popup.data = app.content.get( [ this._name, 'list', '0' ] )
    popup.val = 'article'
  },
  css: 'term'
} ).Class

// app.events = require('vigour-js/browser/events')

var MenuItems = new Element( {
  append: [ new Element( {
    tv: {
      text: {
        data: 'page',
        transform: function( c, cv ) {
          if( cv === this.name && app.focusState.val === 'menu' ) this.$focus()
          if( app.focusState.val !== 'menu' && this._$focused ) this.$focus( false, true )
          return ''
        },
        listen: app.focusState
      },
      css: 'menu-item'
    },
    events: {
      arrowUp: function() {
        if( this.$prev.val ) {
          this.$prev.val.events.click._val.call( this.$prev.val )
        }
      }

      //arrow right switched naar page
      ,
      arrowRight: function() {
        //ook listener op!
        if( this.name !== 'settings' ) app.focusState.from.val = 'grid'
          // console.log('deze moet de page pakken!!!! -- zoets als selec next available element ofzo')
      },
      $focus: function( e ) {
        //zou ook gewoon true kunnen zijn 
        if( e ) {
          var menuitems = this.parent && this.parent.children,
            menuitem
          if( menuitems ) {
            for( var i = menuitems.length - 1; i >= 0; i-- ) {
              menuitem = menuitems[ i ]
              if( menuitem !== this ) {
                menuitem.css.val = 'menu-item'
              }
            }
            this.css.val = 'menu-item current'
          }
        }
      },
      arrowDown: function() {
        if( this.$next.val ) {
          this.$next.val.events.click._val.call( this.$next.val )
        }
      }
    },
    '!tv': {
      css: {
        data: 'page',
        transform: function( v, cv ) {
          //only if !focus or if focus is other menu item...doe later
          // if(cv === this.name &&  this.$focus) this.$focus()
          var unselected = 'menu-item',
            selected = unselected + ' current'
          if( typeof cv === 'string' ) return cv === this.name ? selected : unselected
          else if( this.name === 'shows' ) return selected
          else return unselected
        }
      },
      lefticon: new Icon()
    },
    title: {}
    //hier ff die dingen
  } ).Class, {
    name: 'discover',
    '!tv.lefticon.icon': 'discover',
    'title.text.dictionary': 'text.nav.discover',
    'events.click': setPageFactory( 'discover' )
  }, {
    name: 'shows',
    '!tv.lefticon.icon': 'shows',
    'title.text.dictionary': 'text.nav.shows',
    'events.click': setPageFactory( 'shows' )
  }, {
    name: 'channels',
    '!tv.lefticon.icon': 'tv',
    'title.text.dictionary': 'text.nav.television',
    'events.click': setPageFactory( 'channels' )
  }, {
    name: 'settings',
    '!tv.lefticon.icon': 'settings',
    'title.text.dictionary': cases.tv ? 'text.account.signin.title' : 'text.nav.settings',
    'tv.display': {
      val: 'table',
      $isLoggedIn: 'none'
    },
    'events.click': function() {
      if( cases.tv ) {
        this.$focus( true )
        var switcher = this.checkParent( 'switcher', true )
        if( switcher ) switcher.on.signin.update()
      } else {
        this.checkParent( 'on.popup', true ).from.val = 'settings'
      }
    }
  } ]
} ).Class

exports.Sidemenu = new Element( {
  css: cases.tv ? {
    val: app.focusState,
    transform: function( v, cv ) {
      var unfocus = cv !== 'menu' ? ' unfocus' : ''
      return 'first-menu first-sidemenu' + unfocus
    }
  } : 'first-menu first-sidemenu',
  'desktop.$fromMtvSite.linkback': {
    arrow: new Icon( {
      icon: 'leftnav'
    } ),
    title: {
      text: {
        dictionary:'text.backlink'
      }
    },
    'events.click': function() {
      document.location.href = app.fromMtvSite
    }
  },
  '!tv.logo': new Icon( {
    icon: 'logo'
  } ),
  items: new MenuItems( {
    y: {
      tv: app.h.val / 5 - 28
    }
  } ),
  '!tv.bottom': {
    button: {
      display: {
        val: 'block',
        tv: 'none',
        $isUpgraded: 'none'
      },
      css: 'register',
      text: {
        dictionary: {
          val: 'text.account.signup.title',
          $isLoggedIn: 'text.upgrade'
        }
      },
      'events.click': function() {
        var popup = this.checkParent( 'on.popup', true )
        popup.from = !cases.$isLoggedIn.val ? 'register' : !cases.$isUpgraded.val && 'upgrade'
      }
    },
    login: {
      css: 'button',
      display: {
        val: 'block',
        $isLoggedIn: 'none'
      },
      text: {
        dictionary: 'text.account.signin.title'
      },
      'events.click': function() {
        var popup = this.checkParent( 'on.popup', true )
        popup.from = 'login'
      }
    },
    profile: {
      '!tv.icon': new Icon( {
        y: -34,
        icon: {
          val: 'profile',
          transform: {
            val: function( c, cv ) {
              if( app.user.profilepic.val ) {
                return 'empty'
              }
            },
            listen: app.user.profilepic
          }
        }
      } ),
      img: {
        background: {
          val: app.user.profilepic,
          display: {
            val: function() {
              return app.user.profilepic.val ? 'block' : 'none'
            },
            listen: app.user.profilepic
          }
        }
      },
      'events.click': function() {
        this.checkParent( 'on.popup', true ).from.val = 'profile'
      }
    },
    '!tv.cast': new CastIcon( {
      opacity: {
        '!phone': {
          '!$isLoggedIn': 0
        }
      }
    } )
  },
  '!tv.terms': {
    display: {
      val: function() {
        if( app.h.val <= 600 ) return 'none'
        return 'block'
      },
      listen: app.h
    },
    imprint: new Term( {
      'text.dictionary': 'text.imprint'
    } ),
    privacy: new Term( {
      'text.dictionary': 'text.privacy'
    } ),
    terms: new Term( {
        'text.dictionary': 'text.terms'
      } )
      // , about: new Term({ 'text.dictionary' : 'text.about' })
  }
} ).Class

/*
exports.terms = new Data({
mtvPlay:{ title: exports.original.mtvPlay+' '+window.package.version, text:exports.original.mtvPlay + ' ' + window.package.version },
imprint: { title: exports.text.imprint, text:'text' },
privacy: { title: exports.text.privacy, text:'text' },
terms:{ title: exports.text.terms, text:'text' }
})
*/

function toggleMenu( e ) {
  e.prevent = true
  if( cases.touch ) {
    var data = this._d,
      onMenuLevel = data === void 0 || data && !data.__t

    if( onMenuLevel ) {
      if( cases.phone ) {
        var topMenu = this.checkParent( 'topmenu', true )
        topMenu.toggle()
      } else {
        var section = this.checkParent( 'section', true ),
          expanded = section.x.val,
          caret = this.parent.caret,
          id = 'closeMenu'
        if( expanded ) {
          section.x = 0
          caret.rotate = -90
        } else {
          section.x = 200
          caret.rotate = 90
          section.node.style.pointerEvents = 'none'
          app.addEvent( 'click', function( e ) {
            section.x = 0
            caret.rotate = -90
            app.removeEvent( false, id )
            section.node.style.pointerEvents = 'auto'
          }, id )
        }
      }
    } else {
      this.checkParent( 'switcher', true ).back()
    }
  } else {
    var section = this.checkParent( 'section', true ),
      expanded = section.x.val,
      caret = this.parent.caret,
      id = 'closeMenu'

    if( expanded ) {
      app.menu.val = false
      section.x.update()
      caret.rotate = -90
    } else {
      app.menu.val = true
      caret.rotate = 90
      section.x.update()
      section.node.style.pointerEvents = 'none'
      app.addEvent( 'click', function( e ) {
        app.menu.val = false
        section.x.update()
        caret.rotate = -90
        app.removeEvent( false, id )
        section.node.style.pointerEvents = 'auto'
      }, id )
    }
  }
}

exports.Topbar = new Element( {
  css: 'first-menu first-topbar',
  on: {
    page: {
      defer: function( update, args ) {
        var topbar = this._parent._caller,
          title = this.from.val,
          css = 'first-menu first-topbar toplevel'

        if( title === 'discover' ) {
          topbar.css = css + ' logo'
          topbar.holder.title.text.val = {
            transform: '\ue61b'
          }
        } else {
          topbar.css = css
          topbar.holder.title.text.val = {
            transform: false
          }
        }

        topbar.data = {
          title: title,
          icon: title
        }

        update()
      }
    },
    show: {
      defer: function( update, args ) {
        var topbar = this._parent._caller,
          topmenu = topbar.parent.topmenu

        topbar.holder.title.text.val = {
          transform: false
        }
        topbar.data = this.from.val
        topbar.css = 'first-menu first-topbar'
        update()
      }
    },
    media: {
      defer: function( update, args ) {
        var topbar = this._parent._caller,
          topmenu = topbar.parent.topmenu

        topbar.holder.title.text.val = {
          transform: false
        }


        // console.error(  topbar.holder.title.text )
        // debugger
        // if()

        topbar.data = this.from.val
        topbar.css = 'first-menu first-topbar'
        update()
      }
    },
    $parent: function( update, args ) {
      update()
    }
  },
  h: {
    val: 40,
    iosFull: 60
  },
  holder: {
    lefticon: new Icon( {
      icon: cases.desktop ? 'menu' : {
        data: 'title',
        transform: cases.phone ? function( v, cv ) {
          var data = this._d,
            onMenuLevel = data && !data.__t
          if( data === void 0 ) return 'menu'
          if( onMenuLevel ) return cv === 'channels' ? 'tv' : cv
          else return 'arrowleft'
        } : function( v, cv ) {
          var data = this._d,
            onMenuLevel = data && !data.__t
          if( onMenuLevel ) return 'menu'
          else return 'arrowleft'
        }
      },
      'events.click': toggleMenu
    } ),
    caret: new Icon( {
      icon: 'dropdown',
      '!phone': {
        rotate: -90
      },
      'events.click': toggleMenu
    } ),
    title: {
      text: {
        data: 'title',
        default: ''
      } //,default:{dictionary:'text.untitled'}}
    },
    righticon: new CastIcon()
  },
  'events.click': function( e ) {
    e.prevent = true

    var data = this._d,
      onMenuLevel = data === void 0 || data && !data.__t

    if( onMenuLevel && cases.touch ) {
      var lefticon = this.holder.lefticon
      lefticon.events.click._val.call( lefticon, e )
    }
  }
} ).Class


//UHM
exports.Topmenu = new Element( {
  css: 'first-menu first-topmenu',
  position: 'absolute',
  h: {
    parent: 'h',
    sub: exports.Topbar.base.h
  },
  on: {
    menu: {
      defer: function( update, args ) {
        var caller = this._parent._caller
        this.clearCache()
        if( this.val ) {
          caller.show()
        } else {
          caller.hide()
        }
        update()
      }
    },
    $render: {
      defer: function( update ) {
        this._parent.menu._update()
        update()
      }
    }
  },
  y: {
    translate: true,
    val: -app.h.val,
    add: exports.Topbar.base.h
      // , animation:{easing:'outCubic',time:18} //switch to css animations
  },
  bottom: {
    position: 'absolute',
    y: 256 //208//
      ,
    h: {
      parent: 'h',
      sub: 256
    } //256}208
    ,
    terms: {
      imprint: new Term( {
        'text.dictionary': 'text.imprint'
      } ),
      privacy: new Term( {
        'text.dictionary': 'text.privacy'
      } ),
      terms: new Term( {
          'text.dictionary': 'text.terms'
        } )
        // , about: new Term({ 'text.dictionary' : 'text.about' })
    }
  },
  top: {
    items: new MenuItems(),
    account: {
      css: 'menu-item',
      left: {
        css: {
          val: 'profile' //change on cases!
            ,
          $isUpgraded: '$isUpgraded'
        },
        picture: {
          display: {
            val: 'none',
            $isLoggedIn: 'block'
          },
          icon: new Icon( {
            icon: {
              val: 'profile',
              transform: {
                val: function( c, cv ) {
                  if( app.user.profilepic.val ) {
                    return 'empty'
                  }
                },
                listen: app.user.profilepic
              }
            }
          } ),
          img: {
            background: {
              val: app.user.profilepic,
              display: {
                val: function() {
                  return app.user.profilepic.val ? 'block' : 'none'
                },
                listen: app.user.profilepic
              }
            }
          }
        },
        text: {
          dictionary: {
            val: 'text.account.signin.title',
            $isLoggedIn: 'text.profile'
          }
        },
        'events.click': function() {
          var popup = this.checkParent( 'on.popup', true )
          popup.from = cases.$isLoggedIn.val ? 'profile' : 'login'
        }
      },
      right: {
        css: {
          val: 'register',
          $isLoggedIn: 'upgrade'
        },
        display: {
          val: 'table-cell',
          $isUpgraded: 'none'
        },
        text: {
          dictionary: {
            val: 'text.account.signup.title',
            $isLoggedIn: 'text.upgrade'
          }
        },
        'events.click': function() {
          var popup = this.checkParent( 'on.popup', true )
          popup.from = cases.$isLoggedIn.val ? 'upgrade' : 'register'
        }
      }
    }
  }
} ).Class

exports.Topmenu.base.define( {
  hide: function() {
    this.y = -this.h.val
      // console.log(this.parent)
    if( this.parent.topbar.holder ) {
      this.parent.topbar.holder.caret.rotate = 0
    } else {
      void(0)
    }
  },
  show: function() {
    this.y = 0
    this.parent.topbar.holder.caret.rotate = 180
  },
  toggle: function() {
    var menuDown = this.y.val < 0
    if( menuDown ) this.show()
    else this.hide()
  }
} )

// for (var i = Things.length - 1; i >= 0; i--) {
//   Things[i]
// };

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","./casticon":"/Users/youzi/dev/mtv-play/components/first/menu/casticon.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/menu/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/menu/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/miniplayer/index.js":[function(require,module,exports){
require('./style.less')

var Icon = require('../../icon')
  , Img = require('../../img')
  , app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Controls = require('../../player/controls')
  , Volume = require('../../player/volume')
  , cases = require('vigour-js/browser/cases')

function setVol(e){
  var rect = this.node.getBoundingClientRect()
    , x = rect.left
    , nr = (e.x-x)/(rect.right-x)

  app.user.receiver.volume.from.val = nr > 1 ? 1 : nr < 0 ? 0 : nr
}

var play = new Icon(
{ icon:
  { val:false
  , transform:function(v,cv){
      return cv ? 'pause' : 'play'
    }
  }
, 'events.click':function(e){
    e.prevent = true
    var play = this.checkParent('on.play',true).from
    play.val = play.val ? false : true
  }
})

module.exports = new Element(
{ css:'mini-player'
, position:'absolute'
, on:
  { msmedia:
    { defer:function( update ){
        var parent = this._parent
          , caller = parent._caller
          , msMedia = this.$userOrigin
          , isChannel = msMedia.val && msMedia.from._parent._name === 'channels'

        if( msMedia.val ){
          caller.data =
          { media: msMedia
          , mediausage: parent.usage.from.get( msMedia.from._contentPath )
          , volume: parent.volume.from
          }

        }

        caller.y = msMedia.val
        ? ( cases.phone && isChannel )
          ? 24
          : 0
        : cases.phone
          ? 58 + 24
          : 58


        if( !cases.phone )
        {
          var controlsStyle = caller.controls.node.style
          if(isChannel)
          {
            controlsStyle.visibility = 'hidden';
            controlsStyle.pointerEvents = 'none';
          }
          else
          {
            controlsStyle.visibility = 'visible';
            controlsStyle.pointerEvents = 'auto ';
          }
        }

        update()
      }
    }
  }
, y:
  { translate:true
  , val:cases.phone ? 58 + 24 : 58
  , animation:
    { time:18
    , easing:'outCubic'
    }
  , transform:function( v,cv ){
      return !cases.$hasReceiver.val
      ? cases.phone ? 58 + 24 : 58
      : cv
    }
  , listen:cases.$hasReceiver
  }
, clickable:
  { img:new Img(
    { background:{data:'media.img'}
    , h:58
    , w:{val:115,phone:58}
    })
  , info:
    { title:
      { text:
        { data:'media.show.title'
        , default:
          { dictionary:'text.nowOnTv'
          }
        }
      }
    , subtitle:{text:{data:'media.title'}}
    }
  , events:
    { click:function(){
        var msMedia = this.parent.data.media.from
          , navigation = this.checkParent('on.navigation._val',true)
        navigation.media.$userOrigin = msMedia
      }
    }
  }
, 'phone':
  { slider:new Icon(
    { icon:'volume'
    , 'events.click':function(e){
        e.prevent = true
        var firstScreen = this.checkParent('section',true)
        if(!firstScreen.volumepopup)
        {
          firstScreen.set(
          { volumepopup:
            { h:app.h
            , modal:
              { css:'move-in'
              , title:
                { text:'volume'
                }
              , bar:
                { css:'ui-seekbar'
                , bg:{}
                , seek:
                  { w:
                    { data:'volume'
                    , transform:function(v,cv){
                        cv = isNaN(cv) || (!cv && cv !== 0) ? 1 : cv
                        return Math.abs(cv) * 100 + '%'
                      }
                    }
                  , data:app.user.receiver
                  }
                , button: {}
                , events: {
                    down:setVol,
                    drag:setVol,
                    up:setVol
                  }
                }
              , done:
                { text:'done'
                , events:
                  { click:function(){
                      firstScreen.volumepopup.remove()
                    }
                  }
                }
              , events:
                { click:function(e){
                    e.prevent = true
                  }
                }
              }
            , events:
              { click:function(){
                  firstScreen.volumepopup.remove()
                }
              }
            }
          })

        }
        else
        {
          firstScreen.volumepopup.remove()
        }
      }
    })
  }
, play:play
, controls:new Controls()
, '!phone':
  { volume:new Volume({bars:{data:'volume'}})
  }
, model:
  { subscription:{epgid:true}

  }
}).Class

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../player/controls":"/Users/youzi/dev/mtv-play/components/player/controls/index.js","../../player/volume":"/Users/youzi/dev/mtv-play/components/player/volume/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/miniplayer/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/miniplayer/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/notification/config.js":[function(require,module,exports){
module.exports =  
{ //dit is een number (10.000 ms bepaald de time!)
  timeout:10000
, map: 

//FAVORITE

  { favourite:
    { lefticon:
      { icon:'favoriteadd'
      , css: { addClass:'favorite' }
      }
    , css:{ addClass:'success' }
    , txt:
      { title:{ text:{ dictionary:'text.favoriteAdded'} }
      //, subtitle:{text: { dictionary:''} }
      }
    }
  , unfavourite:
    { lefticon:
      { icon:'favoriteremove'
      , css: { addClass:'unfavorite' }
     }
    , css:{ addClass:'error'}
    , txt:
      { title:{ text:{ dictionary:'text.favoriteRemoved' } }
      //, subtitle:{text: { dictionary:''} }
      }
    }

//LOGIN

  , loginSuccess: 
    { lefticon:{ icon:'right' }
    , css:{addClass:'success'}
    , txt:
      { title:{ text:{ dictionary:'text.account.signin.success' } }
      //, subtitle:{text: { dictionary:''} }
      }
    }
  , loginError: 
    { lefticon:{ icon:'wrong' }
    , css:{ addClass:'error'}
    , txt:
      { title:{ text:{ dictionary:'text.account.signin.wrong' } }
      //, subtitle:{text: { dictionary:''} }
      }
    }
  , facebookError:
    { lefticon:{ icon:'facebook' }
    , css:{ addClass:'error'}
    , txt:
      { title:{ text:{ dictionary:'text.account.signin.facebookError' } }
      //, subtitle:{text: { dictionary:''} }
      }
    }

//REGISTER

  , registerSuccess: 
    { lefticon:{ icon:'email' }
    , css:{ addClass:'' }
    , duration: 50e4
    , txt:
      { title:{ text:{ dictionary:'text.verifyEmail.title'} }
      , subtitle:{ text: { dictionary:'text.verifyEmail.subtitle'} }
      }
    }
  , email:{ 'txt.title.text.dictionary':'text.account.invalid.email' }
  , emailExists:{ 'txt.title.text.dictionary':'text.account.signup.already' }
  , registerError:{ 'txt.title.text.dictionary':'text.account.signin.wrong' } 
  , registerErrorExists: { 'txt.title.text.dictionary':'text.account.signup.already' }
  , registerErrorInvalid: { 'txt.title.text.dictionary':'text.account.signin.wrong' }
  , blankEmail: { 'txt.title.text.dictionary':'text.account.signin.wrong' }
  , password:{  'txt.title.text.dictionary' : 'text.account.passwordResetError'}
  , passwordShort: { 'txt.title.text.dictionary':'text.account.invalid.password' }
  , noMatchPassword: { 'txt.title.text.dictionary':'text.noMatchPassword' } 

//VERIFY EMAIL

  , verifyEmailSuccess: 
    { lefticon:{ icon:'email' }
    , css:{ addClass:'success' }
    , duration: 50e4
    , txt:
      { title:{ text:{ dictionary:'text.account.verifyEmailSuccess.title'} }
      , subtitle:{text: { dictionary:'text.account.verifyEmailSuccess.subtitle'} }
      }
    }

  , verifyEmailError: 
    { lefticon:{ icon:'wrong' }
    , css:{ addClass:'error' }
    , txt:
      { title:{ text:{ dictionary:'text.account.verifyEmailError'} }
      //, subtitle:{text: { dictionary:''} }
      }
    }

//NEW VERSION AVAILABLE

  , appUpgrade: 
    { lefticon:{ icon:'warning' }
    , duration: 50e7
    , txt: { title:{ text:{ dictionary:'text.versionAvailable'} } 
    , 'events.click': function( e ) {
          window.location.reload();
        }
      }
    }

//CONNECTIVITY

  , enable4g:
    { txt:
      { title: { text: { dictionary:'modal.warning.cellular.title'} }
      , subtitle: { text: { dictionary:'modal.warning.cellular.subtitle'} }
      }
    }

//PASSWORD RESET

  , passwordForgot: { 'txt.title.text.dictionary':'text.account.forgot.success' }
  , passwordForgotError: { 'txt.title.text.dictionary':'text.account.forgot.wrong' }
  , passwordReset: { 'txt.title.text.dictionary':'text.account.passwordReset' }
  , passwordResetError:  { 'txt.title.text.dictionary':'text.account.passwordResetError' }
  , invalidPasswordToken: { 'txt.title.text.dictionary':'text.account.passwordResetError' }
  , resetTokenExpired: { 'txt.title.text.dictionary':'text.account.passwordResetError' }

//SHARE

  , shareSuccess: { 'txt.title.text.dictionary':'share.success' }
  , shareError: { 'txt.title.text.dictionary':'share.failed' }

//MTV MOBILE NUMBER VERIFICATION

  , mobileUpgradeSuccess:  { 'txt.title.text.dictionary':'text.hoorayMobileTitle' }
  , mobileUpgradeError: { 'txt.title.text.dictionary':'modal.warning.unabletoverify' }
  , mobileVerifySuccess: { 'txt.title.text.dictionary':'text.verifysuccess' }
  , mobileVerifyError: { 'txt.title.text.dictionary':'text.verifyfail' }
  , invalidNumber:  { 'txt.title.text.dictionary':'text.verifyfail' }
  , numberExists: { 'txt.title.text.dictionary':'text.verifytaken' }

//UPGRADE

  , purchaseError: { 'txt.title.text.dictionary':'text.account.purchaseError' }
  , $isUpgraded: { 'txt.title.text.dictionary':'text.upgradedMessage'}
  , subscription:  { 'txt.title.text.dictionary':'text.account.purchaseError' }
  , singleEpisodePurchased: { 'txt.title.text.dictionary': 'singleEpisodePurchased'}

//MISC

  , invalid: 
    { lefticon:{ icon:'wrong' }
    , css:{addClass:'error'}
    , txt:
      { title:{ text:{ dictionary:'text.invalidEntry' } }
      //, subtitle:{text: { dictionary:''} }
      }
    }

  , expired: { 'txt.title.text.dictionary': 'text.invalidEntry' }
  , terms: { 'txt.title.text.dictionary': 'text.invalidEntry' }
  , privacy: { 'txt.title.text.dictionary': 'text.invalidEntry' }
  , invalidEmail: { 'txt.title.text.dictionary': 'text.account.forgot.wrong' }
  , mobileTimeout: { 'txt.title.text.dictionary': 'text.mobileTimeout' }

  }
}

},{}],"/Users/youzi/dev/mtv-play/components/first/notification/index.js":[function(require,module,exports){
require('./style.less')

var Icon = require('../../icon')
  , Item = require('../../item')
  , Switcher = require('vigour-js/app/ui/switcher')
  , config = require('./config')
  , cases = require('vigour-js/browser/cases')

//favo, unfavo,
var map = config.map

var Notification = new Item(
    { on:
      { $remove:
        { defer:function( update ){
            var caller = this._parent._caller
            if(caller._timer) clearTimeout(caller._timer)
            update()
          }
        }
      }
    , position:'absolute'
    , y:
      { val:40
      , iosFull:64
      , animation:
        { start:0
        , time:18
        , easing:'outCubic'
        , complete:function(){
            var duration = this.duration
            if(duration)
            {
              var _this = this
              if(this._timer) clearTimeout(this._timer)
              this._timer = setTimeout(function(){
                //clear deze timeout
                if( _this && _this.parent ) {
                  _this.parent.remove()
                  _this.css = {addClass:'fade-out'}
                }
                this._timer = null

              },duration)
            }
          }
        }
      }
    , lefticon:new Icon({ icon: 'warning' })
    , txt:
      { title:{text:''}
      , subtitle:
        { text:
          { val:''
          , defer:function( update ){
              this._caller.display = this._val ? 'block' : 'none'
              update()
            }
          }
        }
      }
    , 'events.click': function() {
        var notification = this.checkParent('on.notification', true ).from
        notification.val = false
      }
    , righticon:new Icon(
      { icon:'close'
      , events:
        { click:function(e){
            e.prevent = true
            var notification = this.checkParent('on.notification', true ).from
            notification.val = false
          }
        }
      })
    }).Class


module.exports = new Switcher(
{ css:'first-notification'
, y:
  { val:-40
  , iosFull:-64
  }
, iosFull:{}
, on:
  { notification:
    { defer:function( update, args ){

        var caller = this._parent._caller
          , from = this.from
          , val = from.val
          , type

        if( val === 'appUpgrade' && !cases.native ){
          update()
          return
        }

        if( args[0] === false)
        {
          var child = caller.node.childNodes[ caller.node.childNodes.length -1 ].base
          child.css = { addClass:'fade-out' }
          child._timer = setTimeout(function() { caller.remove() }, 500 )
        }
        else
        {

          type = from.type

          if( type && type !== 'api') //hotfix, type is often 'api' ?
          {
            // type = type[0].toUpperCase() + type.slice(1)
            val = type//val + type
            from.type = null
          }


          caller.transition =
          { element:Notification
          , $params: map[val]
              || { txt:
                  { title:
                    { text:val
                    }
                  }
                }
          , $options:
            { force:true
            , duration: ( map[val] && map[val].duration ) || config.timeout
            }
          }
        }
        update()
      }
    }
  }
, onTransition:function( current, last, direction, options ){
    this.add(current)
    current.duration = options.duration
    if(last) last.css = {addClass:'fade-out'}
  }
}).Class

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./config":"/Users/youzi/dev/mtv-play/components/first/notification/config.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/notification/style.less","vigour-js/app/ui/switcher":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/notification/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/overview/index.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Icon = require('../../icon')
  , cases = require('vigour-js/browser/cases')
  , display = require('vigour-js/browser/element/properties/collection/display')
  , search = require('../../text/search')
  , eventUtils = require('vigour-js/browser/events/util')
  , util = require('vigour-js/browser/events/util')
  , Item = require('./item')
  , Img = require('../../img')


module.exports = exports = new Element(
{ css:'first-overview'
, 'touch.scrollbar':'y'
, x:{translate:true} 
}).Class

exports.Items = new Element(
{ pageheader:{}
// , '!touch':
//   { w:
//     { parent:'w'
//     , add:15
//     }
//   }
// , collection:
//   { options:display
//   }
}).Class

exports.Item = Item
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../text/search":"/Users/youzi/dev/mtv-play/components/text/search.js","./item":"/Users/youzi/dev/mtv-play/components/first/overview/item.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/overview/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/element/properties/collection/display":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/display.js","vigour-js/browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js"}],"/Users/youzi/dev/mtv-play/components/first/overview/item.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Icon = require('../../icon')
  , Img = require('../../img')
  , cases = require('vigour-js/browser/cases')
  , epgData = require('../../epg_temp')
  , itm = require('../../item')
  , Seekbar = require('../../player/seekbar')
  , TitleSubtitle = itm.TitleSubtitle
  , clockTime = epgData.clockTime
  , dictionary = require('vigour-js/app/dictionary')
//--------------- elements -----------------

/*
, trial = app.user.role.val === 3
*/

var item =
  cases.touch
    ? new itm.Thumb(
      { display:'table'
      // , thumb:new Img({background:{gone:true}})//temp
      })
    : new itm.Large(
      { display:'inline-block'
      })

if(!cases.slow) {
  ;(cases.touch ? item.thumb.img : item.thumb).background = {
      load: function(t) {
        // if(t.data) {
        //   t.data._parent._complete = true
        // }
        t.opacity = 1
      }
    }
}

module.exports = exports = item.set(
{ events:
  { active:'ui-item-clicked'
  }
}).Class

if(!cases.touch){

  var noEPG = dictionary.get( 'text.noEPG' )

  exports.Tv = new Element(
  { css:'ui-item-large tv'
  , display:'inline-block'
  , thumb:new Img.Overlay(
    { w:310
    , h:221
    , access:new Icon(
      { on:{data:'id'}
      , icon:
        { data:'access'
        , transform: function( val, cv ) {
            var access = app.util.access( cv, this.data )
            return access === 'playAlt' ? 'empty' : access
          }
        , listen:app.user.role
        }
      })
    })
  , info:
    { title:
      { css:'ui-item-text'
      , text:{data:'title'}
      }
    , 'now.text.dictionary': 'text.now'
    , epg:
      { showtitle:{text:{data:'title'}}
      , time:
        { text:
          { val:
            { data:'minutes_since_midnight'
            , transform:clockTime
            , add:[ ' - ', { data:'endtime', transform:clockTime} ]
            }
          , transform:function( v,cv ){
              var data = this.data
              return data && data.val ? cv : noEPG.val
            }
          , listen:dictionary
          }
        }
      , bar:new Seekbar(
        { w:{val:221, clear:true}
        , seek:
          { w:
            { val:221
            , multiply:
              { val:epgData.minutesSinceMidnight
              , sub:{data:'minutes_since_midnight'}
              , divide:{data:'duration'}
              }
            , clear:true
            }
          }
        , button:false
        })
      , model:
        { inherit:false
        }
      }
    }
  , model:
    { subscription:{ epgid:true }
    , val:function( data ) {
        var epgid = data.epgid && data.epgid.val
        if( epgid !== void 0 ){
          this.info.epg.data = epgData.now( epgid )
          this.model = false
        }
      }
    }
  , events:
    { click:function(){
        this.checkParent('on.media',true).$userOrigin = this.data.from
      }
    }
  }).Class
}
},{"../../epg_temp":"/Users/youzi/dev/mtv-play/components/epg_temp.js","../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../../player/seekbar":"/Users/youzi/dev/mtv-play/components/player/seekbar/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/overview/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/overview/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/seasons/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
require( './style.less' )

var Element = require( 'vigour-js/app/ui/element' )
var Icon = require( '../../icon' )
var Img = require( '../../img' )
var text = require( '../../text' )
var Favourite = require( '../favourite' )
var app = require( 'vigour-js/app/' )
var cases = require( 'vigour-js/browser/cases' )
var _dropDownEventId = 'dropDownEventId'
var dictionary = require( 'vigour-js/app/dictionary' )

var seasonText = dictionary.get( 'text.season' )
var episodeText = dictionary.get( 'text.episode' )
var minText = dictionary.get( 'text.min' )
var specialsText = dictionary.get( 'text.specials' )
  // var seasonText = dictionary.get( 'text.seasons' )
  //season switcher > takes showdata

var EpisodeList = new Element({
  collection: {
    data: 'season.episodes',
    filter: true,
    element: new Element( {
      model: function( data ) {
        var path = data._contentPath
        if( path && !~path.indexOf( 'channels' ) ) {
          this.holder.thumb.cover.data = app.user.usage.from.get( path )
          this.model = false
        }
      },
      holder: {
        thumb: {
          w: 100,
          img: new Img( {
            w: 100,
            h: 100 * 3 / 4
          } ),
          cover: {
            y: cases.desktop ? -100 * 3 / 4 : -5,
            h: cases.desktop ? 100 * 3 / 4 : 5,
            model: {
              inherit: false
            },
            desktop: {
              percentage: {
                text: {
                  data: 'time',
                  transform: function( v, cv ) {
                    var p = Math.floor( cv * 100 )
                    return p ? Math.abs( p ) + '%' : ''
                  }
                }
              }
            },
            bar: {
              w: {
                data: 'time',
                transform: function( v, cv ) {
                  return !isNaN( cv ) ? Math.abs( cv ) * 100 : 0
                }
              }
            }
          }
        },
        txt: {
          title: new text.Title(),
          subtitle: {
            text: {
              data: 'number',
              transform: function( v, cv ) {
                return cv > 9000 ? '' : episodeText.val + ' ' + cv + ' - '
              },
              add: {
                data: 'duration',
                transform: function( v, cv ) {
                  return cv ? ~~( cv / 60 ) + ' ' + minText.val : ''
                },
                listen: dictionary
              }
            }
          }
        },
        righticon: new Icon( {
          on: {
            data: 'id'
          },
          icon: {
            data: 'access',
            transform: function( val, cv ) {
              var access = app.util.access( cv, this.data )
              var icon = access === 'playAlt' ? cases.desktop ? 'empty' : 'arrowright' : access
              return icon === 'lockedContent' ? 'lockedContentAlt' : icon
            },
            listen: [ app.user.role, app.user.purchases ]
          }
        } )
      },
      border: {},
      'events.click': function() {
        app.user.navigation.media.$userOrigin = this.data.from
      }
    } )
  }
}).Class

module.exports = new Element( {
  on: {
    media: {
      defer: function( update, args ) {
        var data = app.user.navigation.media.from.val
        if( data ) {
          var caller = this._parent._caller,
            current = caller.list.find( 'data', data )
          if( current && !current.css.val ) {
            if( caller.prev ) caller.prev.css = false
            current.css = 'current'
            caller.prev = current
          }
        }
        update()
      }
    }
  },
  title: {
    text: {
      val: {
        dictionary: 'text.episodes'
      },
      tablet: {
        data: 'show.title'
      }
    }
  },
  tablet: {
    favourite: new Favourite()
  },
  list: {
    tablet: {
      scrollbar: 'y',
      h: {
        val: app.h,
        sub: {
          val: 99,
          iosFull: 119
        }
      }
    },
    eps:new EpisodeList({
      model: {
        complete: function( data ) {
          this.parent && this.parent.parent.on.media._update()
        }
      }
    }),
    extrasHeader:{
      display:{
        data:'season.extras',
        transform:function(v,cv){
          return cv && cv[0] ? 'block' : 'none'
        }
      },
      text:{
        dictionary:'text.extras'
      }
    },
    extras:new EpisodeList({
      // display:{
      //   data:'season.extras',
      //   transform:function(v,cv){
      //     return cv ? 'block' : 'none'
      //   }
      // },
      collection:{
        data: 'season.extras'
      }
    })
  },
  dropdown: {
    h: 30,
    on: {
      $remove: {
        defer: function( update ) {
          app.removeEvent( false, _dropDownEventId )
          update()
        }
      }
    },
    current: {
      text: {
        data: 'season.number',
        transform: function( v, cv ) {
          return cv !== 9000 ? seasonText.val + ' ' + cv : specialsText.val
        },
        listen: dictionary
      },
      caret: new Icon( {
        icon: 'dropdown'
      } )
    },
    collection: {
      data: 'show.seasons',
      filter: true,
      element: new Element( {
        text: {
          data: 'number',
          transform: function( v, cv ) {
            return cv !== 9000 ? seasonText.val + ' ' + cv : specialsText.val
          },
          listen: dictionary
        },
        'events.click': function() {
          var seasondata = this.data.from
          app.user.navigation.season.$userOrigin = seasondata
            // if( !app.playing.val )
            // {
            //   this.checkParent('switcher.on.media',true).$userOrigin = seasondata.get('episodes.0')
            // }
        }
      } )
    },
    'events.click': function() {
      var length = this.children.length,
        _this = this
      if( this.h.val === 30 && length > 2 ) {
        this.h = length * 30 + 4
        app.addEvent( 'click', function() {
          if( _this.h ) _this.h = 30
          app.removeEvent( false, _dropDownEventId )
        }, _dropDownEventId )
      } else {
        this.h = 30
      }
    },
    'model.complete': function() {
      if( this.children.length <= 2 ) {
        this.css = {
          addClass: 'inactive'
        }
      } else {
        this.css = {
          removeClass: 'inactive'
        }
      }
    }
  },
  model: function( data ) {
    // data.show && console.error('SHOW', data.show._path)
    // data.season && console.error('SEASON', data.season._path,JSON.stringify(data.season.from.raw))
    // data.media && console.error('MEDIA', data.media._path)

    if( data.media ) this.model = false
  }
} ).Class

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","../favourite":"/Users/youzi/dev/mtv-play/components/first/favourite/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/seasons/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/seasons/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/show/cover.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
require('./style.less')
var Img = require('../../img')
  , TitleSubtitle = require('../../text').TitleSubtitle
  , Element = require('vigour-js/app/ui/element')
  , cases = require('vigour-js/browser/cases')
  , switcher = require('./switcher')
  , Favourite = require('../favourite')
  , app = require('vigour-js/app/')

var cover = new Img(
{ background:{data:'show.img'}
, h:
  { val:220
  , ios:
    { animation:
      { time:24
      , easing:'outCubic'
      }
    }
  }
, w:{parent:'w'}
, info:
  { position:'absolute'
  , y:{translate:true}
  , opacity:
    { parent:'h'
    , transform:function(v,cv){
        return 440/cv - 1
      }
    }
  , box:
    { star:new Favourite()
    , description:
      { model:{subscription:{description:true}}
      , text:
        { data: 'show.description'
        , transform:function(v,cv){
            if(!cv.length) return cv
            var str = cv.slice(0,300)
              , lastDot = Math.max( Math.max( str.lastIndexOf('.'),str.lastIndexOf('!')),str.lastIndexOf('?'))

            return ~lastDot ? str.slice(0,lastDot + 1) : str + '..'
          }
        }
      }
    }
  }
}
).Class

// if(!cases.slow) {
//   cover.background = {
//     load:function(t) {
//       // if(t.data) t.data._complete = true
//       t.opacity = 1
//     }
//   }
// }

module.exports = exports = cover
},{"../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","../favourite":"/Users/youzi/dev/mtv-play/components/first/favourite/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/show/style.less","./switcher":"/Users/youzi/dev/mtv-play/components/first/show/switcher.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/show/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

require('./style.less')

var cases = require('vigour-js/browser/cases')

if(cases.phone)
{
  var Element = require('vigour-js/app/ui/element')
    , Switcher = require('./switcher')
    , List = require('./list')
    , Cover = require('./cover')
    , events = require('vigour-js/browser/events')
    , cases = require('vigour-js/browser/cases')
    , app = require('vigour-js/app/')
    , doc = events.document
    , scroll
    , overviewItem = require('../overview/item')
    , favourite = require('../favourite')
    , Mtvplayer = require('../../player')

  var show = new Element(
  { css:'show'
  , x:{translate:true}
  , model:function( data ){
      if(data.show)
      {
        var path = data.show._cachedPath
        if(path)
        {
          if( exports.state && exports.state.path === path )
          {
            this.set(exports.state.params)
          }
          this.model = false
        }
      }
    }
  , on:
    { $remove:
      { defer:function(update){ //TODO do this on the children >>> this is not reliable
          var caller = this._parent._caller
          exports.state =
          { path:caller.data.show && caller.data.show._cachedPath
          , params:
            { cover:{h:caller.cover.h.val}
            , switcher:{y:caller.switcher.y.val}
            }
          }
          update()
        }
      }
    , season:
      { defer:function( update ){
          var caller = this._parent._caller
            , seasondata = this._val.from

          Switcher.set(caller.switcher,seasondata._parent,seasondata._name)
          update()
        }
      }
    }
  , phone:{cover:new Cover()}
  , desktop:
    { header:
      { css:'ui-header' 
      , append:new Element(
        { text:{data:'title'}
        , display:'inline'
        })
      , star:favourite
      }
    }
  , switcher:new Switcher({w:app.w})
  , events:
    { down:cases.ios
      ? function(e){
          var _this = this
            , _cover = _this.cover
            , id = 'seasonmove'
            , coverHeight = _cover.h.val
            , currentList = this.switcher._currentList
            , inScroll = currentList.node.scrollTop > 1

          _this._y = e.y
          _cover.h._p = true

          _this.addEvent('move',function(e){
            var y = e.y
              , x = e.x
              , yDiff = _this._y - y
              , scrolling = !coverHeight && yDiff > 0 || inScroll

            if(!Switcher.block && !inScroll && Math.abs(_this._x - x) < Math.abs(yDiff))//if y move is bigger than x move
            {
              events.click.block = true
              _cover.h = _cover.h.val - yDiff
            }

            if(!scrolling){
              e.preventDefault()
            }

            _this._y = y
            _this._x = x
          },id)

          _this.addEvent('up',function(){
            events.click.block = false
            _cover.h._p = false
            _cover.h = _cover.h.val > 220/2 ? 220 : 0
            _this._y = null
            _this._x = null
            _this.removeEvent(false,id)

          },id)
        }
      : cases.slow 
        ? function(e){
              var _this = this
                , _cover = _this.cover
                , id = 'seasonmove'
                , _switcher = this.switcher
                , downPosition = _switcher.y.val !== -220
                , currentList = _switcher._currentList
                , style = currentList.node.style
                , inScroll = currentList.node.scrollTop > 1

            _this._y = e.y
            _switcher.y._p = true

            _this.addEvent('move',function(e){
              var y = e.y
                , x = e.x
                , yDiff = _this._y - y
                , scrolling = !downPosition && yDiff > 0 || inScroll

              if(!Switcher.block && !inScroll && Math.abs(_this._x - x) < Math.abs(yDiff))//if y move is bigger than x move
              {
                events.click.block = true
                if(yDiff > 0) _switcher.y.val = -220
                else _switcher.y = 0
                clearEvent()
              }

              if(!scrolling){
                style.overflow = 'hidden'
                e.preventDefault()
              }
              else
              {
                style.overflow = 'scroll'
              }

              _this._y = y
              _this._x = x
            },id)

            _this.addEvent('up',clearEvent,id)

            function clearEvent(){
              events.click.block = false
              _switcher.y._p = false
              _this._y = null
              _this._x = null
              _this.removeEvent(false,id)
            }
          }
        : function(e){
            var _this = this
              , _cover = _this.cover
              , id = 'seasonmove'
              , _switcher = this.switcher
              , downPosition = _switcher.y.val !== -220
              , currentList = _switcher._currentList
              , inScroll = currentList.node.scrollTop > 1
              , switcherY

            _this._y = e.y
            _switcher.y._p = true

            _this.addEvent('move',function(e){
              var y = e.y
                , x = e.x
                , yDiff = _this._y - y
                , scrolling = !downPosition && yDiff > 0 || inScroll

              if(!Switcher.block && !inScroll && Math.abs(_this._x - x) < Math.abs(yDiff))//if y move is bigger than x move
              {
                events.click.block = true
                switcherY = _switcher.y.val - yDiff
                _switcher.y = Math.min(Math.max(switcherY,-220),0)
              }

              if(!scrolling){
                e.preventDefault()
              }

              _this._y = y
              _this._x = x
            },id)

            _this.addEvent('up',function(){
              events.click.block = false
              _switcher.y._p = false
              _switcher.y = _switcher.y.val < -220/2 ? -220 : 0
              _this._y = null
              _this._x = null
              _this.removeEvent(false,id)
            },id)
          }
      }
    })
  
  module.exports = exports = show.Class
}
else
{
  module.exports = require('../watch')
}
},{"../../player":"/Users/youzi/dev/mtv-play/components/player/index.js","../favourite":"/Users/youzi/dev/mtv-play/components/first/favourite/index.js","../overview/item":"/Users/youzi/dev/mtv-play/components/first/overview/item.js","../watch":"/Users/youzi/dev/mtv-play/components/first/watch/index.js","./cover":"/Users/youzi/dev/mtv-play/components/first/show/cover.js","./list":"/Users/youzi/dev/mtv-play/components/first/show/list.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/show/style.less","./switcher":"/Users/youzi/dev/mtv-play/components/first/show/switcher.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js"}],"/Users/youzi/dev/mtv-play/components/first/show/list.js":[function(require,module,exports){
// var appData = require('../../control/data')
var cases = require( 'vigour-js/browser/cases' )
var Element = require( 'vigour-js/app/ui/element' )
var app = require( 'vigour-js/app/' )
var Icon = require( '../../icon' )
var Img = require( '../../img' ).Basic
var Item = require( '../../item' ).Indicator
var dictionary = require( 'vigour-js/app/dictionary' )
var Data = require( 'vigour-js/data' )

var EpisodeList = new Element({
  collection: {
    data: 'episodes',
    filter: true,
    element: new Item( {
      model: function( data ) {
        var path = data._contentPath
        if( path ) {
          this.thumb.bar.w = app.user.usage.from.get( path.concat( [ 'time' ] ) )
          this.model = false
        }
      },
      thumb: {
        img: new Img( {
          w: 70,
          h: 45
        } ),
        bar: {
          w: {
            transform: function( v, cv ) {
              if( !isNaN( cv ) ) return Math.abs( cv ) * 70
              return 0
            }
          }
        }
      },
      txt: {
        'subtitle.text.data': {
          val: function( data ) {
            var str = ''
            var nr
            if( ( nr = data.number && data.number.val) && nr <= 9000 ) {
              str += dictionary.get( 'text.episode' ).val + ' ' + nr
            }
            if( data.duration ) {
              if(str){
                str += ' - '
              }
              str += Math.round( data.duration.val / 60 ) + ' ' + dictionary.get( 'text.min' ).val
              return str
            }
          },
          listen: [ 'number', 'duration' ]
        }
      },
      events: {
        active: !cases.desktop && 'ui-item-clicked',
        click: function() {
          if( !exports.block ) {
            this.checkParent( 'on.media', true ).$userOrigin = this.data.from
          }
        }
      }
    } )
  },
  model: {
    complete: function() {
      var list = this.parent
      if( exports.state ) {
        var path = this.data && this.data._cachedPath
        if( path ) {
          if( exports.state.path === path ) {
            list._scrollTop = exports.state.scrollTop
            list.node.scrollTop = exports.state.scrollTop || 1
          }
          exports.state = null
        }
      } else if( cases.touch ) {
        list.node.scrollTop = 1
      }

      this.model = false
    }
  }
}).Class

var items = new Element( {
  eps:new EpisodeList(),
  extrasHeader:{
    display:{
      data:'extras',
      transform:function(v,cv){
        return cv && cv[0] ? 'block' : 'none'
      }
    },
    text:{
      dictionary:'text.extras'
    }
  },
  extras:new EpisodeList({
    collection:{
      data: 'extras'
    }
  })
} )

var list = new Element( {
  css: 'list',
  scroller: items,
  on: {
    $render: {
      defer: function( update ) {
        var caller = this._parent._caller
        caller.node.scrollTop = caller._scrollTop || cases.touch && 1
        update()
      }
    }
  },
  h: {
    val: app.h,
    sub: {
      val: 89,
      iosFull: 109
    }
  },
  scrollbar: 'y',
  model: {
    inherit: false
  }
} )

module.exports = exports = list.Class
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js"}],"/Users/youzi/dev/mtv-play/components/first/show/seasons.js":[function(require,module,exports){
var cases = require( 'vigour-js/browser/cases' )
var events = require( 'vigour-js/browser/events' )
var Element = require( 'vigour-js/app/ui/element' )
var Icon = require( '../../icon' )
var app = require( 'vigour-js/app/' )
var dictionary = require( 'vigour-js/app/dictionary' )
var seasonText = dictionary.get( 'text.season' )
var specialsText = dictionary.get( 'text.specials' )

var Season = new Element( {
  text: {
    data: 'number',
    transform: function( v, cv ) {
      return cv !== 9000
        ? seasonText.val + ' ' + cv
        : specialsText.val
    },
    listen: dictionary
  }
} ).Class

module.exports = new Element( {
  items: {
    collection: {
      data: 'show.seasons',
      filter: true,
      element: new Season( {
        'events.click': function() {
          this.checkParent( 'on.season', true ).$userOrigin = this.data.from
        }
      } )
    }
  },
  x: {
    translate: true,
    parent: 'w',
    multiply: 0,
    '!slow': {
      animation: {
        time: Math.min( app.w.val / 14, 32 ),
        easing: 'outCubic'
      }
    }
  },
  highlight: {
    x: {
      translate: true
    }
  }
} )

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js"}],"/Users/youzi/dev/mtv-play/components/first/show/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/show/switcher.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , contentList = {}
  , app = require('vigour-js/app/')
  , Icon = require('../../icon')
  , util = require('vigour-js/util')
  , cases = require('vigour-js/browser/cases')
  , util = require('vigour-js/browser/events/util')
  , events = require('vigour-js/browser/events')
  , Subtitle = require('../../text').Subtitle
  , doc = events.document
  , Img = require('../../img')
  , Item = require('../../item')
  , List = require('./list')
  , Favourite = require('../favourite')
  , seasons = require('./seasons')

  , switcher = new Element(
    { on:
      { $remove:
        { defer:function( update ){
            var caller = this._parent._caller
              , currentlist = caller._currentList
            List.state = 
            { path:currentlist.data._cachedPath 
            , scrollTop: currentlist.node.scrollTop
            }
            exports.block = false
            update()
          }
        }   
      }
    , y:
      { translate:true
      , '!ios':
        { '!slow':
          { animation:
            { time:24
            , easing:'outCubic'
            }
          }
        }
      }
    , touch:{line:{}}
    , seasons:seasons
    , roll:
      { w:{parent:'w'}
      , x:
        { translate:true
        , parent:'w'
        , multiply:0
        , '!slow':
          { animation:
            { time:Math.min(app.w.val/14,32)
            , easing:'outCubic'
            , init:function(){exports.block = true}
            , complete:prepareSwipe
            }
          }
        }
      , events:cases.touch && cases.slow 
        && { down:function(e){
            var ex = e.x
              , prevX = ex
              , startX = ex
              , startY = e.y
              , ldx
              , dx
              , id = 'swipe'
              t = this

            doc.addEvent('move',function(e){
              ex = e.x
              ldx = ex - prevX
              prevX = ex
              if(ldx) {
                events.click.block = true
              }
            },id)

            doc.addEvent('up',function(e){
              var treshold = 80
                , flick = 3
                , dx = e.x - startX
              events.click.block = false
              if(Math.abs(dx) > Math.abs(startY - e.y)) swipeEnd.call(t,e,dx,ldx)
              doc.removeEvent(false,id)
            },id)
          }
        }
      }
    , model:function(data){
        data = data.show && data.show.seasons
        if(data){
          var keys = data.keys
            , keylength = keys.length

          if(keylength && keylength !== this._l){
            this._keys = keys
            this._l = keylength
            exports.set(this, data)
          }
        }
      }
    , events:cases.touch && !cases.slow 
      && { grab:
        { x:true
        , bind:function(){
            return this.roll
          }
        , down:function(){
            if(!this._keys) return
            var sE = this.parent.seasons.x._e
            var datalength = this._keys.length

            this._start = sE ? sE.val : 0
            this._max = -app.w.val*(datalength-1)
          }
        , pass:passSwipe
        , move:swipeMove
        , up:swipeEnd
        }
      }
    })

module.exports = exports = switcher.Class

exports.set = function(switcher,data,index){
  var current = index | 0
    , roll = switcher.roll
    , cl = roll.children.length -1
    , keys = switcher._keys || (switcher._keys = data.keys)
    , l = switcher._l || (switcher._l = keys.length)
    , old = roll._current
    , pos = -current
    , seasons = switcher.seasons
    , seasonitems = seasons.items
    , highlightseason = seasonitems.children[cases.desktop ? current+1 : current]

  while(current > cl++) roll.add(new List())

  var currentlist = roll.children[current]

  if(old !== void 0){
    var oldseason = seasonitems.children[cases.desktop ? old + 1 : old]
    seasons.x._p = false // extra for now bug in android

    if(l>3) seasons.x = { multiply:pos/ (l-1) / (3/(l-3)) }
    if(oldseason) oldseason.css = ''

    if(switcher.parent.x.val) roll.x.preventSet({ multiply:pos })
    else roll.x = { multiply:pos }
  }else{
    if(l>3){
      seasons.x._p = true
      seasons.x = { multiply:pos/ (l-1) / (3/(l-3)) }
      seasons.x._p = false
    }
    roll.x.preventSet({ multiply:pos })
  }

  switcher._current = roll._current = current
  switcher._currentList = currentlist
  switcher._keys = roll._keys = keys

  if(cases.touch) seasons.highlight.x = roll.w.val/3 * current
  if(!currentlist.data) currentlist.data = data[current]
  prepareSwipe.call(roll)
  if(highlightseason){
    highlightseason.css = 'focus'
    if(cases.desktop) seasonitems.current.data = highlightseason.data
  }
}

function prepareSwipe(){
  exports.block = false
  var sw = this.parent
    , data = sw.parent.data.show.seasons
    , index = this._current || (this._current = 0)
    , keys = this._keys || (this._keys = data.keys)

  if(!keys || !data) return

  var datalength = this._l || (this._l = keys.length)
    , children = this.children
    , childrenlength = this.children.length
    , prevchild = children[index-1]
    , nextchild = children[index+1]

  if(index < datalength && !nextchild){
    nextchild = new List()
    this.add(nextchild)
  }
  if(prevchild && !prevchild.data){
    prevchild.data = data[index-1]
  }
  if(nextchild && !nextchild.data){
    nextchild.data = data[index+1]
  }
}

if(cases.touch){
  function passSwipe(e,d){
    var pass = Math.abs(d.x) > Math.abs(d.y)
    if(pass) exports.block = true
    return pass
  }

  function swipeMove(e,d){
    var sw = this.parent
      , seasons = sw.seasons
      , l = this._l || this._keys.length
      , dx = d.x
      , eVal = dx / (l-1) / (3/(l-3)) + this._start
      , x = this.x.val
      , pos = this._current
      , oldPos = this._focus || 0
      , treshold = 120

    if(l>3 && x < 0 && x > this._max) seasons.x = {_e:eVal}
    
    if(dx < -treshold && pos !== l-1) pos += 1
    else if(dx > treshold && pos !== 0) pos -= 1

    if(oldPos !== pos){
      var s = seasons.items.children
        , highlightw = sw.w.val/3
      seasons.highlight.x = highlightw * pos
      s[oldPos].css = ''
      s[pos].css = 'focus'
      this._focus = pos
    }
  }

  function swipeEnd(e, d, ld){
    var seasons = this.parent.seasons
      , treshold = 120
      , flick = 3
      , oldPos = -this._current
      , newPos
      , l = this._keys.length
      , dx = d.x || d
      , ldx = ld.x || ld

    if(Math.abs(ldx) > flick){
      if(ldx < 0 && !(dx > treshold)) newPos = Math.max(oldPos - 1,-l+1)
      if(ldx > 0 && !(dx < -treshold)) newPos = Math.min(oldPos + 1,0)
    }else{
      if(dx < -treshold) newPos = Math.max(oldPos - 1,-l+1)
      if(dx > treshold) newPos = Math.min(oldPos + 1,0)
    }

    if(this.x._e !== void 0) this.x = {_esub:this.x._e.val}
    if(seasons.x._e !== void 0) seasons.x = {_esub:seasons.x._e.val}

    if(newPos !== void 0){
      this.checkParent('switcher.on.season',true).$userOrigin = seasons.items.children[-newPos].data.from
    }
  }
}
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","../favourite":"/Users/youzi/dev/mtv-play/components/first/favourite/index.js","./list":"/Users/youzi/dev/mtv-play/components/first/show/list.js","./seasons":"/Users/youzi/dev/mtv-play/components/first/show/seasons.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/show/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js","vigour-js/browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/components/first/shows/index.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element'),
  Overview = require('../overview'),
  cases = require('vigour-js/browser/cases'),
  Icon = require('../../icon'),
  display = require('vigour-js/browser/element/properties/collection/display'),
  Player = require('../../player'),
  app = require('vigour-js/app/')

function favoTransform(v, cv) {
  var keys = cv && cv.keys,
    block = v._parent._parent._val === 'block'

  return (keys && keys.length && block) ? 'block' : 'none'
}

var showItems = new Overview.Items({
  pageheader: {
    text: {
      dictionary: 'text.nav.shows',
      touch: 'a - z'
    }
  },
  collection: {
    data: 'shows',
    filter: {
      condition: {
        title: {
          $contains: ''
        }
      },
      sort: 'title'
    },
    option: display,
    element: new Overview.Item({
      'events.click': function() {
        this.checkParent('on.show', true).$userOrigin = this.data.from
      }
    })
  },
  model: {
    subscription: {
      $: {
        $: true
      }
    }
  }
})

var favouriteItems = new Overview.Items({
  pageheader: {
    'text.dictionary': 'text.favorites'
  },
  collection: {
    data: 'favourites',
    option: display,
    element: new Overview.Item({
      desktop: {
        css: {
          addClass: 'favo-item'
        },
        thumb: {
          w: {
            sub: 15,
            multiply: 1 / 2
          },
          h: {
            self: 'w',
            divide: 4 / 3
          }
        },
        info: false
      },
      'events.click': function() {
        this.checkParent('on.show', true).$userOrigin = this.data.from
      }
    })
  },
  '!touch': {
    display: {
      val: 'block',
      transform: {
        data: 'favourites',
        transform: favoTransform
      }
    }
  },
  touch: {
    pageheader: {
      display: {
        val: 'block',
        transform: {
          data: 'favourites',
          transform: favoTransform
        }
      }
    },
    message: new Icon({
      icon: 'favoriteadd',
      'text.dictionary': 'text.noFavos',
      display: {
        data: 'favourites',
        transform: function(v, cv) {
          var keys = cv && cv.keys && cv.keys.length
          return !keys ? 'block' : 'none'
        }
      }
    })
  }
})

module.exports = new Overview({
  search: require('../../text/search'),
  on: {
    $render: {
      defer: function(update) {
        var caller = this._parent._caller

        if (cases.desktop) {
          (caller._parent = caller.parent).addEvent(
            'scroll',
            function() {
              // console.log('party no no')
            }, 'overviewScroll'
          )
        } else {
          window.requestAnimationFrame(function() {
            if (caller._node) {
              caller.node.scrollTop = exports.scrollTop || cases.touch && 1
              caller.events.scroll._val.call(caller, false)
            }
          })
        }

        caller.set({
          on: {
            connect: cases.$hasReceiver
          }
        })

        update()
      }
    },
    $remove: cases.desktop && {
      defer: function(update) {
        var caller = this._parent._caller
        caller._parent.removeEvent(false, 'overviewScroll')
        update()
      }
    },
    connect: {
      defer: function(update) {
        var caller = this._parent._caller
        caller.events.scroll._val.call(caller, false)
        update()
      }
    }
  },
  favos: favouriteItems,
  items: showItems,
  events: {
    scroll: function(e) { // << accoutnt for search etc!!
      var scrollTop = this.node.scrollTop
      if (e !== false) exports.scrollTop = scrollTop
      if (!cases.$hasReceiver.val) return
      if (this && this.items) {
        var items = this.items.children,
          length = items.length

        if (this._k === void 0 || this._l !== length) { //gen keys in correct order
          var arr = []
          for (var i = items.length - 1; i >= 0; i--) {
            var data = items[i].data
            if (data) arr.unshift(data._name)
          }
          this._k = arr
          this._h = this.node.offsetHeight
          this._s = items[1] && items[1].node.offsetTop
          this._sh = this.node.scrollHeight - this._s
          this._l = length
        }

        var holdersize = this._h,
          start = this._s,
          totalsize = this._sh,
          keys = this._k

        if (start > scrollTop) {
          holdersize -= start - scrollTop
        }

        this.data.highlight.$userOrigin = getHighlight(holdersize, totalsize, scrollTop - start, keys)
      }
    }
  },
  model: {
    complete: function() {
      this.model = {
        complete: null
      }
      this.node.scrollTop = exports.scrollTop || cases.touch && 1
      this.events.scroll._val.call(this, false)
    }
  }
}).Class

function getHighlight(holdersize, totalsize, scrollpos, datakeys) {
  var proportion = holdersize / totalsize,
    position = scrollpos / totalsize

  , length = datakeys.length, index = Math.round(length * position), end = index + Math.round(length * proportion)

  if (index < 0) {
    end += -index
    index = 0
  }
  return datakeys.slice(index, end).join('.')
}

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../player":"/Users/youzi/dev/mtv-play/components/player/index.js","../../text/search":"/Users/youzi/dev/mtv-play/components/text/search.js","../overview":"/Users/youzi/dev/mtv-play/components/first/overview/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/element/properties/collection/display":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/display.js"}],"/Users/youzi/dev/mtv-play/components/first/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/switcher/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

require( './style.less' )

var app = require( 'vigour-js/app/' )
var Element = require( 'vigour-js/app/ui/element' )
var Switcher = require( 'vigour-js/app/ui/switcher' )
var transitions = require( 'vigour-js/app/ui/switcher/transitions' )
var cases = require( 'vigour-js/browser/cases' )
var Icon = require( '../../icon' )
var page = require( './page' )
var media = require( './media' )
var show = require( './show' )

module.exports = exports = new Switcher( {
    css: 'first-switcher',
    desktop: {
      scrollbar: {
        val: app.w,
        transform: function( v, cv ) {
          return cv < 1300 || 'y'
        }
      },
      transition: {
        defer: function( update ) {
          this._caller.node.scrollTop = 0
          update()
        }
      }
    },
    on: {
      page: {
        defer: function() {
          ( cases.$isFullscreen.val ? fullScreenHandler : page )
          .apply( this, arguments )
        }
      },
      show: {
        defer: function() {
          ( cases.$isFullscreen.val ? fullScreenHandler : show )
          .apply( this, arguments )
        }
      },
      season: {
        defer: function( update, args ) {
          if( args[ 0 ] ) this._parent.show._update()
          update()
        }
      },
      media: {
        defer: function() {
          ( cases.$isFullscreen.val ? fullScreenHandler : media )
          .apply( this, arguments )
        }
      }
    },
    onTransition: {
      val: 'fade',
      touch: 'slide'
    },
    backFallback: backFallback,
    loader: new Element( {
      css: 'first-loader',
      x: {
        translate: true
      },
      loadicon: new Icon( {
        icon: 'logo'
      } )
    } )
  } )
  .inject( transitions )
  .Class

function fullScreenHandler( update ) {
  var on = this._parent,
    receiver = on.ms._val,
    mediadata = cases.$isReceiver.val ? receiver.media.$userOrigin.val : on.media.$userOrigin.val

  on._caller.transition = {
    element: media.getElement(),
    $params: media.getParams( on.media, mediadata, true )
  }

  app.state.video = {
    val: mediadata.from
  }

  update()
}

function backFallback() {
  var previous = this.previous,
    current = this.current

  if( previous ) {
    if( previous === 'page' ) {
      this.on.page.$userOrigin = this.on.page.val || ( ( this.current === 'show' || this.current === 'episode' ) && 'shows' ) || ( this.current === 'channel' && 'channels' ) || 'discover'
      return
    } else {
      if( this.on[ previous ] ) {
        var previousFrom = this.on[ previous ].from,
          mediaFrom = this.on.media.from
        if( previousFrom._parent._name === 'navigation' ) {
          if( previous === 'show' && mediaFrom._parent._name !== 'navigation' ) {
            previousFrom = mediaFrom._parent._parent._parent._parent
            if( previousFrom._name !== 'show' ) previousFrom = null
          } else {
            previousFrom = null
          }
        }
        if( previousFrom ) {
          this.on[ previous ].$userOrigin = previousFrom
          return
        }
      }
    }
  }

  this.on.page.$userOrigin = typeof this.on.page.val === 'string' ? this.on.page.val : 'discover'
}

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./media":"/Users/youzi/dev/mtv-play/components/first/switcher/media.js","./page":"/Users/youzi/dev/mtv-play/components/first/switcher/page.js","./show":"/Users/youzi/dev/mtv-play/components/first/switcher/show.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/switcher/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/app/ui/switcher":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js","vigour-js/app/ui/switcher/transitions":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/transitions.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/switcher/media.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
var cases = require('vigour-js/browser/cases')
  , app = require('vigour-js/app/')
  , Element

module.exports = exports = function( update ){
  var switcher = this._parent._caller
    , mediadata = this.$userOrigin.val
      || ( mediadata = this.$userOrigin.val = this.from )

  if( !exports.isEpisode( mediadata ) ){

    var currentPath = mediadata.from._path
      , indexOfSeasons = currentPath.indexOf('seasons')
      , indexOfChannels
      , path

    if( ~indexOfSeasons ){
      indexOfChannels = currentPath.lastIndexOf('channels')
      path = currentPath.slice( indexOfChannels, indexOfSeasons )
      mediadata = this.$userOrigin.val = app.content.get(path)
      void(0)
    }
  }

  switcher.transition =
  { element: exports.getElement()
  , direction: exports.getDirection( switcher, mediadata )
  , $params: exports.getParams( this, mediadata )
  , $options: exports.getOptions( mediadata )
  }

  exports.setStatus( switcher, mediadata )

  update()
}

exports.isEpisode = function( mediadata ){
  return !~mediadata._contentPath.indexOf('channels')
}

exports.getDirection = function( switcher, mediadata ){
  var current = switcher.current

  return exports.isEpisode( mediadata )
    ? current !== 'episode' ? 1 : 0
    : current !== 'channel' ? 1 : 0
}

exports.getElement = function(){
  return Element || ( Element = require( '../watch' ) )
}

exports.getOptions = function( mediadata ){
  var seasondata = exports.isEpisode( mediadata ) && mediadata._parent._parent
    , seasonFrom = cases.tablet && seasondata && seasondata.from
    , mediaFrom =  mediadata.from
    , waitForLoad = seasonFrom || mediaFrom

  if( waitForLoad ) return { loader:waitForLoad }
}

exports.getParams = function( _this, mediadata, fullscreen ){
  var parent = _this._parent
    , usage = parent.usage
    , msMedia = parent.ms._val.media.$userOrigin
    , isEpisode = exports.isEpisode( mediadata )
    , showdata
    , data =
      { media: mediadata
      , volume: parent.volume.from
      , msmedia: msMedia
      }

  if( isEpisode )
  {
    seasondata = mediadata._parent._parent

    if( fullscreen ) //when in fullscreen, only update the page data, not all userdata
    {
      data.season = seasondata
    }
    else
    {
      if( cases.phone ) parent.season.$userOrigin.val = seasondata
      else parent.season.$userOrigin = seasondata

      data.season = parent.season.$userOrigin
    }

    data.show = showdata = app.user.navigation.show.$userOrigin.val = seasondata._parent._parent

    data.showusage = usage.from.get( showdata.from._contentPath )
    data.mediausage = usage.from.get( mediadata.from._contentPath, {time:0} )
  }

  //extra secure, faster
  cases.$isOnChannel.val = !isEpisode

  params =
  { media:
    { player:
      { on:
        { msmedia: msMedia
        , media: mediadata
        }
      }
    }
  , on:
    { channel:
      { val:cases.$isOnChannel
      , listen:mediadata
      }
    , resize:cases.tablet && app.w
    }
  , data:data
  }

  return params
}


exports.setStatus = function( switcher, mediadata ){
  var current = switcher.current
    , isEpisode = exports.isEpisode( mediadata )
    , previous

  if( cases.phone ) previous = isEpisode
    ? ( current === 'page' ? current : 'show' )
    : 'page'
  else previous = 'page'

  switcher.previous = previous
  switcher.current = isEpisode ? 'episode' : 'channel'
}
},{"../watch":"/Users/youzi/dev/mtv-play/components/first/watch/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/switcher/page.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
var cases = require('vigour-js/browser/cases')

module.exports = function( update ){ // discover / shows / channels
  var page = this.$userOrigin.val
    , parent = this._parent
    , caller = parent._caller
    , content = parent.content.from
    , loadedBenchmark
    , pagedata

  // console.error('---page',page)

  if( page ){
    if( page === 'discover' )
    {
      if(exports[page] === void 0) exports[page] = require( '../discover' )
      pagedata = 
      { marquee: content.get('marquee.list')
      , recommended: content.get('recommended.list')
      , releases: loadedBenchmark = content.get('releases.list')
      , watched: parent.watched.from
      , free: content.get('free.list')
      , channels: content.get('channels')
      , scroll: parent.scroll.from
      , carousel:parent.carousel.from
      }
    }
    else if( page === 'shows' ) 
    {
      if(exports[page] === void 0) exports[page] = require( '../shows' )
      pagedata =
      { shows: loadedBenchmark = content.get('shows')
      , favourites: parent.favourites.from
      , search: parent.search._val
      , highlight: parent.highlight.from
      }
    }
    else if( page === 'channels' )
    {
      if(exports[page] === void 0) exports[page] = require( '../channels' )
      pagedata = 
      { channels: loadedBenchmark = content.get('channels')
      }
    }

    caller.transition = 
    { element:exports[page]
    , $params:
      { data:pagedata
      }
    , $options:
      { loader:cases.tablet && (caller.current === 'page' && caller._last !== page )
        ? true
        : loadedBenchmark && loadedBenchmark.from
      , animation:!( cases.tablet && ( caller.current === 'page' ) )
      , delay:cases.tablet && (caller.current === 'page') && 350
      }
    , direction:caller.current !== 'page' && -1 
    }

    caller.current = 'page'
    caller._last = page //hotfix for transitions
  }

  update()
}
},{"../channels":"/Users/youzi/dev/mtv-play/components/first/channels/index.js","../discover":"/Users/youzi/dev/mtv-play/components/first/discover/index.js","../shows":"/Users/youzi/dev/mtv-play/components/first/shows/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/switcher/show.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
var cases = require('vigour-js/browser/cases')
  , app = require('vigour-js/app/')
  , media = require('./media')
  , Element

if( cases.phone )
{
  module.exports = exports = function( update ){
    var parent = this._parent
      , switcher = parent._caller
      , showdata = this.$userOrigin.val

    switcher.transition =
    { element:exports.getElement()
    , $params:exports.getParams( this, showdata )
    , $options:exports.getOptions( this, showdata )
    , direction:exports.getDirection( switcher, showdata )
    }

    parent.season.$userOrigin._update()

    switcher.previous = 'page'
    switcher.current = 'show'

    update()
  }

  exports.getDirection = function( switcher, showdata ){
    var current = switcher.current
    return current === 'page'
      ? 1
      : current === 'episode' && -1
  }

  exports.getElement = function(){
    return Element || ( Element = require( '../show' ) )
  }

  exports.getOptions = function( _this, showdata ){
    var seasonFrom = _this._parent.season.from
      , showFrom = showdata.from

    return { loader:seasonFrom }
  }

  exports.getParams = function( _this, showdata ){
    var parent = _this._parent
      , showname = showdata._name
      , season = parent.season
      , usage = parent.usage
      , params

    if( !season.$userOrigin.val || !season.from.checkParent('_name',showname) )
    {
      season.$userOrigin.val = showdata.from.get('seasons.0')
    }

    params =
    { on:
      { season:season.$userOrigin
      , show:showdata
      }
    , data:
      { show:showdata
      , showusage:usage.from.get( showdata.from._contentPath )
      }
    }

    return params
  }
}
else
{
  module.exports = function( update ){
    var showdata = this.$userOrigin.val
      , showname = showdata._name
      , season = this._parent.season
      , seasonNr = season.from._parent._parent === showdata.from && season.from._name
      , parent = this._parent
      , m = parent.media
      , _contentPath

    if( !m.from.checkParent('_name',showname) || !m.$userOrigin.val )
    {
      seasonNr = ( !seasonNr || isNaN(seasonNr) ) ? 0 : seasonNr
      path = 'seasons.' + seasonNr + '.episodes.0'
      m.$userOrigin.val = showdata.from.get( path )
    }

    m._update()

    update()
  }
}
},{"../show":"/Users/youzi/dev/mtv-play/components/first/show/index.js","./media":"/Users/youzi/dev/mtv-play/components/first/switcher/media.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/switcher/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/tv/grid.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Img = require('../../img')
  , app = require('vigour-js/app/')

var Item = new Img({
	css:'tv-grid-item'
, h:{val:app.h,divide:3}
, w:{self:'h',multiply:4/3}
, display:'inline-block'
}).Class

var BigItem = new Item(
{ w:{self:'h',multiply:8/3, add:{val:app.w.val,multiply:0.02*0.8}}
}).Class

var Row = new Element(
{ category: 
	{ text:'this is the field'
  , h:{val:app.h,divide:3}
  , w:{self:'h',multiply:5/6}
	, css:'tv-grid-category'
	}
, display:{
    data:function(data) {
      return data.length===0 ? 'none' : 'block'
    }
  }
, events: 
  { arrowUp: function() {
      if( this.$prev.val ) this.$prev.val.$focus()
    }
  , arrowDown: function() {
      if( this.$next.val ) this.$next.val.$focus()
    }
  , arrowRight: function() {
      app.focusState.prev = this._name
  		app.focusState.from.val = 'row'
    }
  , click: function() {
      this.events.arrowRight._val.call(this)
    }
  , arrowLeft: function() {
  		var menu = this.checkParent('sidemenu', true) 
  		app.focusState.val = 'menu'
    }
  , back: function(e) {
      //if last is grid
      e.preventDefault()
      app.focusState.val = 'menu'
    }
  , $focus: function( e ) {
      var category = this.category
        , node = category.node
        , grid = this.parent
        , rect
        , appHeight = app.h.val
        , screenBottom = appHeight - 80
        , screenTop = appHeight/5
   
      app.focusState.prev = this._name

      category.css = e ? 'tv-grid-category current' : 'tv-grid-category'

      if( e )
      {
        rect = node.getBoundingClientRect()
        if( rect.bottom > screenBottom ) 
        {
          grid.y = grid.y.val - (rect.bottom - screenBottom)
        }
        else if( rect.top < screenTop ) 
        {
          grid.y = grid.y.val + (screenTop - rect.top)
        }
        grid.y._p = null
      }

    }
  } 
, css:'tv-row'
, collection: {
		data:true
	, element: Item
	}
/*
	keyboard stuff
*/
}).Class

var Grid = module.exports = exports = new Element(
{ css:'tv-grid'
, y:
  { val:app.h.val/5
  , animation:
    { easing:'outCubic'
    , time:18
    }
  }
, on:
	{ $new:
    { defer:function( update ){
        this._parent._caller.y._p = true
        update()
      }
    }
  , focusState: 
		{ defer: function( update, args ) {
			 //dit moet naar de switcher!
			  var _this = this

        if( _this.from.val === 'grid' ) 
        {
          //this._parent.focusState.from.prev.grid
          var parent = _this._parent

        	if( parent ) 
          {
            var key = parent.focusState.from.prev 
              , _caller = parent._caller
              , child = ( key && _caller[key] ) || _caller.children[0]

            child.$focus()
          }
        } 
        else if( _this.from.val === 'row' ) 
        {
        	app.user.updateNavigation()
        }

				update()
			}
		}
	, $parent: 
		{ defer: function( update, args ) {
				var caller = this._parent._caller
					, first
					, obj
				
				if( caller && caller.data) 
				{
					for( var key in caller.data ) 
					{
            var tKey = key
            key = '$$'+key
						if( !caller[key] ) 
						{
							if( !obj ) obj = {}
              if( key === 'marquee')
              {
                obj[key] = new Row({
                  'category.text': tKey.length > 2 ? { dictionary: 'text.'+tKey } : tKey
                , bigItem:new BigItem(
                  { data:caller.data[tKey].get(0)
                  })
                , item:new Item({data:caller.data[tKey].get(1)})
                })
              }
              else
              {
                obj[key] = new Row({
                  'category.text': tKey.length > 2
                  ? { dictionary: 'text.'+ tKey }
                  : tKey
                , data: caller.data[tKey]
                })
              }
							if( !first ) first = key
						} 
					}

					if(first) {
            caller.set(obj)
						this._parent.focusState._update()
					}

				}

				update()
			}
		}
	}
}).Class

exports.Row = Row
exports.Item = Item

},{"../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/tv/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')
  , Switcher = require('vigour-js/app/ui/switcher')
  , transitions = require('vigour-js/app/ui/switcher/transitions')
  , config = require('vigour-js/util/config')
  , Message = require('./message')
  , Icon = require('../../icon')
  , events = require('vigour-js/browser/events')

var Signin = new Message(
{ css:{addClass:'tv-signin'}
, container:
  { holder:
    { title:{text:{dictionary:'text.login.tvTitle'}}
    , subtitle:{text:{dictionary:'text.login.tvSubtitle'}}
    , bottomimage:{}
    }
  }
}).Class

var RoadBlock = new Message(
{ css:{addClass:'tv-roadblock'}
, container:
  { holder:
    { topimage:{}
    , title:{text:{dictionary:'text.login.tvTitle'}}
    , subtitle:{text:{dictionary:'text.login.tvSubtitle'}}
    , bottomimage:{}
    }
  }
, events:
  { $focus:function(){}
  }
}).Class

module.exports = exports = new Switcher(
{ css:'first-switcher ui-img'
, x: { val:app.w, multiply: 1/5, animation:{ easing:'outCubic', time:18 } }
, w: { val:app.w }
, onTransition:'fade'
, desktop:{ scrollbar:'y' }
, on:
  { page:{ defer:require('./page') }
	, show:{ defer:require('./show') }
  , media:
    { defer:function( update, args ){
        this._parent.show.update()
        update()
      }
    }
  , signin:
    { defer:function( update, args ){
        var caller = this._parent._caller
        caller.transition = 
        { element:Signin
        }
        update()
      }
    }
  , roadblock:
    { defer:function( update, args ){
        if(this._val)
        {
          var _this = this
            , caller = this._parent._caller
            , focused = events.$focused.val
            , roadblock = new RoadBlock(
              { events:
                { click:function(){
                    this.events.back._val.call(this)
                  }
                , back:function(){
                    focused.$focus()
                    _this.val = false
                    this.remove()
                  }
                }
              })

          caller.parent.set(
          { roadblock:roadblock
          })

          roadblock.$focus()          
        }
        update()
      }
    }
  }
, background:
  { data:'img'
  , transform:function( v, cv ){
    //bg met effect
    
      if(!cv) return ' '
      var w = Math.ceil((this.w || this.checkParent('w',true)).val) || app.w.val
        , h = Math.ceil((this.h || this.checkParent('h',true)).val) || app.h.val

      w = range(w,100)
      h = range(h,100)

      return config.img+'/image/' + cv + '/'
           + w  + '/'
           + h
           +'?effect=overlayBlur&overlay=overlayDarkpurple3&radius='
           + (h/15.67 | 0)
           +'&sigma='
           + (h/20 | 0 )
    }
  , load:function(t) {
      if(t) t.opacity = 1
    }
  }
})
.inject( transitions )
.Class

function range(amount, val) {
  return Math.ceil(amount/val)*val
}
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./message":"/Users/youzi/dev/mtv-play/components/first/tv/message.js","./page":"/Users/youzi/dev/mtv-play/components/first/tv/page.js","./show":"/Users/youzi/dev/mtv-play/components/first/tv/show.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/app/ui/switcher":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js","vigour-js/app/ui/switcher/transitions":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/transitions.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/message.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

var Element = require('vigour-js/app/ui/element')

module.exports = new Element(
{ css:'tv-message'
, container:
  { holder:
    { topimage:{}
    }
  }
}).Class
},{"vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/page.js":[function(require,module,exports){
//page

var Element = require( 'vigour-js/app/ui/element' )
  , Grid = require( './grid' )
  , app = require('vigour-js/app/')
  , Row = require( './row/page' )
  , ChannelRow = require('./row/channel')

  , Data = require( 'vigour-js/data' )
           .inject( require( 'vigour-js/data/selection' ) )
  , letters = '#abcdefghijklmnopqrstuvwxyz'.split('') //abcdefghijklmnopqrstuvwxyz
  , showdata
  , stub //TODO: this is dirty but the fastest way for now

module.exports = exports = function( update, args ) { 

  // discover / shows / channels
  var page = this.$userOrigin.val
    , parent = this._parent
    , caller = parent._caller
    , pagedata

  caller.x = { multiply:app.focusState.val === 'row' ? 0 : 1/5 }

  caller.data = null

  if( page === 'discover' )
  {
    exports[page] = app.focusState.val === 'row' ? Row : Grid   // app.focusState.val === 'grid' ? Grid : Row 

    pagedata = 
    { spotlight: app.content.get( 'marquee.list' )
    , free: app.content.get( 'free.list' )
    , recommended: app.content.get( 'recommended.list' )
    }
    
  }
  else if( page === 'shows' ) 
  {
    
    exports[page] = app.focusState.val === 'row' ? Row : Grid  

    if( !showdata ) 
    {
      //TODO: clean up, this is dirty!
      showdata = {}

      //this is there for the subscriptions
      stub = new Data(app.content.get('shows'),
      { subscription: { $: { title:true, img:true } }
      , block:true
      })

      for(var i=0, _len=letters.length;i<_len;i++) {
        showdata[letters[i]] =  new Data(app.content.get('shows'),
        { sort:'title'
        , block:true
        , range:[ 0, 5 ]
        , condition:
          { title: {
              $contains: letters[i] === '#' 
                ? '^\\d' 
                : '^['+letters[i]+']'
            }
          }
        })
      }
    }

    pagedata = showdata

  }
  else if( page === 'channels' )
  {
    exports[page] = ChannelRow
    pagedata = app.content.from.get('channels')
  }

  //this is an extra guard against to many updates
  exports.stamp = args[1]

  //TODO: temp fix for selections , true argument in is fires the setPage function after an animation frame
  //selections dont update well in collection
  if( page === 'shows' && app.focusState.val !== 'row' ) { //
    app.content.get('shows').is(function() {
      //not the best check....
      return ( showdata.a.length > 0 
          && showdata['#'].length > 0  
          && showdata.g.length > 3 )          
    }, setPage )
  } else {
    setPage()
  }

  function setPage() {  
    if( exports[page] && exports.stamp === args[1] ) {
      caller.transition = 
      { element:exports[page]
      , $params:
        { data:pagedata
        , on: { focusState: app.focusState } //SOMETHING GOES WRONG HERE
        }
      , $options:
        { force:true
        }
      , direction:caller.current !== 'page' && -1 
      }
      caller.current = 'page'
    }
  }
    
  update()

}
},{"./grid":"/Users/youzi/dev/mtv-play/components/first/tv/grid.js","./row/channel":"/Users/youzi/dev/mtv-play/components/first/tv/row/channel.js","./row/page":"/Users/youzi/dev/mtv-play/components/first/tv/row/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/data/selection":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/selection.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/row/channel.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/')
  , dictionary = require('vigour-js/app/dictionary')
  , VObj = require('vigour-js/object')
  , epgData = require('../../../epg_temp')
  , Seekbar = require('../../../player/seekbar')
  , clockTime = epgData.clockTime
  , Item = require('./item')
  , elements = require('./elements')

var ChannelItem = new Item(
{ background:
  { gone:false
  }
, information:
  { channeltitle:
    { css:'ui-item-text'
    , text:{data:'title'}
    }
  , now:
    { w:80
    , text:
      { dictionary:'text.now'
      }
    }
  , epg:
    { w:{parent:'w',sub:80+30}
    , showtitle:
      { text:
        { data:'title'
        }
      }
    , time:
      { text:
        { data:'minutes_since_midnight'
        , transform:clockTime
        , add:[ ' - ', { data:'endtime', transform:clockTime} ]
        }
      }
    , bar:new Seekbar(
      { seek:
        { w:
          { val:epgData.minutesSinceMidnight
          , sub:{ data:'minutes_since_midnight' }
          , divide:{ data:'duration' }
          , transform:function( v, cv ){
              return !isNaN(parseInt(cv)) ? cv * 100 + '%' : 0
            }
          , clear:true
          }
        }
      , button:false
      })
    , model:
      { inherit:false
      }
    }
  }
, model:
  { subscription:{epgid:true}
  , val:function(data){
      var epgid = data.epgid && data.epgid.val
      if(epgid !== void 0){
        this.information.epg.data = epgData.now(epgid)
        this.model = false
      }
    }
  }
, events:
  { arrowRight: function() {
      var focusState = app.focusState.val
      if( focusState !== 'row' && (!this.$prev.val || !this.$prev.val.cover))
      { 
        app.focusState.val = 'row'
      }
      else if( this.$next.val ) this.$next.val.$focus()
    }
  , arrowLeft: function() {
      var focusState = app.focusState.val
      if(focusState === 'grid' )
      {
        app.focusState.val = 'menu'
      }
      else if( this.$prev.val && this.$prev.val.cover ) 
      {
        this.$prev.val.$focus()
      }
      else
      {
        app.focusState.val = 'grid'
      }
    }
  , back: function(e) {
      //if last is grid
      e.preventDefault()
      var rows = this.checkParent('rows',true)
      rows.x._p = true
      app.focusState.val = app.focusState.val === 'row' ? 'grid' : 'menu'
    }
  , click:function(){
      if( this.cover.icon.val === 'lockedContent' )
      {
        var roadblock = this.checkParent('on.roadblock',true)
        if(roadblock) roadblock.val = true
      }
      else
      {
        app.user.navigation.media.$userOrigin.val = this.data.from
        app.state.val = { val:'player', video:this.data.from }
      }
    }
  }
}).Class

module.exports = exports = new elements.BasicRowView(
{ css: { addClass:'tv-channels' }
, indicator:
  { display:
    { val:app.focusState
    , transform:function( v,cv ){
        return cv === 'row' ? 'block' : 'none'
      }
    }
  , title:
    { text:
      { dictionary:'text.nav.channels'
      }
    }
  }
, rows:
  { css:'tv-row'
  , collection:
    { element: ChannelItem
    , data:true
    }
  }
, on:
  { focusState: 
    { defer: function( update, args ) {
        var val = this.from.val
          , caller = this._parent._caller

        if( val === 'grid' )
        {
          caller.parent.x = { multiply: 1/5 }
        }
        else if( val === 'row' )
        {
          caller.parent.x = { multiply: 0 }
        }

        if( caller.rows && caller.rows.children[0] && (val!=='menu'||args[0]!=='$parent') ) {
        caller.rows.children[0].$focus()
        }

        update()
      }
    }
  , $parent: 
    { defer: function( update, args ) {
        this._parent.focusState._update('$parent')
        update()
      }
    }
  }
}).Class
},{"../../../epg_temp":"/Users/youzi/dev/mtv-play/components/epg_temp.js","../../../player/seekbar":"/Users/youzi/dev/mtv-play/components/player/seekbar/index.js","./elements":"/Users/youzi/dev/mtv-play/components/first/tv/row/elements.js","./item":"/Users/youzi/dev/mtv-play/components/first/tv/row/item.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/row/elements.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/')
  , dictionary = require('vigour-js/app/dictionary')

exports.Indicator = new Element(
{ css:'tv-row-indicator'
, text:
  { data:true
  , dictionary: function( val, cv ) {
      if( cv ) {
        if(cv instanceof Object && cv.number) {
          return { text:cv.number && cv.number.val }
        }
        cv = String(cv)
        if( cv.length > 2 ) return 'text.'+cv
        return { text: cv }
      }  
    }
  }
, display:'inline-block'
}).Class

var BasicRowView = exports.BasicRowView = new Element(
{ css:'tv-row-view'
, indicator: 
  { title:{}
  }
, rows:
  { on:
    { $new:
      { defer:function( update ){
          this._parent._caller.x._p = true
          update()
        }
      }
    }
  , y:app.h.val/5
  , x:
    { val:0
    , animation:
      { easing:'outCubic'
      , time:18
      }
    }
  }
}).Class

exports.RowView = new BasicRowView(
{ indicator:
  { list :
    { text:''
    , collection:
      { element: exports.Indicator //eigen indicators
      , data:true
      , filter:true
      }
    }
  }
, info:
  { on:
    { $remove:
      { defer:function( update ){
        void(0)
          var caller = this._parent._caller
          if( caller._timer ) clearTimeout( caller._timer )
          update()
        }
      }
    }
  , opacity:
    { data:'description'
    , transform:function(v,cv){
        if(!cv)
        {
          this.css = 'dontAnimate'
          return 0
        }
        else
        {
          this.css = ''
          return 1
        }
      }
    }
  , title:{text:{data:'title'}}
  , showsubtitle:
    { css:'subtitle'
    , display:
      { data:'episodeCount'
      , transform:function( v,cv ){
          return cv ? 'block' : 'none'
        }
      }
    , text:
      { val: { data: 'seasonCount' }
      , add:
        [ ' '
        , { dictionary:'text.seasons' }
        , ' '
        , { data:'episodeCount' }
        , ' '
        , { dictionary:'text.episodes' }
        ]
      }
    }
  , episodesubtitle:
    { css:'subtitle'
    , display:
      { data:'duration'
      , transform:function( v,cv ){
          return cv ? 'block' : 'none'
        }
      }
    , text:
      { data: 'duration'
      , transform:function(v,cv){
          return ~~(cv/60) + ' '
        }
      , add:{dictionary:'text.min'}
      }
    }
  , description:
    { text: { data:'description' }
    }
  }
}).Class

},{"vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/row/item.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , Img = require('../../../img')
  , app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')
  , dictionary = require('vigour-js/app/dictionary')
  , VObj = require('vigour-js/object')
  , Icon = require('../../../icon')

function next( t, parent ) {
	parent = parent ? this : this.parent 
	var sib = parent && parent.node.nextSibling
	if( sib && sib.base ) { 
		if( !sib.base.children[0] ) {
			return next.call( sib.base, false, true )
		}
  	return sib.base.children[0] 
	}
}

function prev( select, parent ) {
	parent = parent ? this : this.parent 
	var sib = parent && parent.node.previousSibling
	if( sib && sib.base ) { 
		var child = sib.base.children[ 
  		select === void 0 ? sib.base.children.length - 1 : select 
  	] 

  	if(!child) return prev.call( sib.base, select, true )
  	return child
	}
}

var Item = module.exports = new Img({
  on: { data: 'link' }
, define: 
  { $selectIndicator: function( field ) {

     var indicator = this.checkParent( 'indicator.list', true )
       , findit = indicator && indicator.find( 'data', field )

      if(!findit) {
        findit = indicator && indicator.find( 'data._val', field )
      }
      
      if( findit && indicator && indicator._focused !== findit ) {
        if( indicator._focused ) indicator._focused.css = 'tv-row-indicator'
        findit.css = 'tv-row-indicator current'
        indicator._focused = findit
      } 

    }
  , $focusCommon: function( event ) {

      var rows = this.checkParent('rows',true)
        , rowview = rows.parent
        , node = this.node
        , screenLeft = 40
        , next = this
        , prev
        , cnt = 4
        , info
        , data

      if( event )
      {
        rect = node.getBoundingClientRect()
        rows.x = rows.x.val + (screenLeft - rect.left) + rowview.parent.x.val
        info = rowview.info
        prev = this.$prev.val

        while( cnt-- && next )
        { 
          if(next.background.gone.val) next.background = { gone:false }
          next = next.$next.val
        }
        if(prev && prev.background.gone && prev.background.gone.val) {
          prev.background = { gone:false }
        }

        if( info )
        {
          data = this.data
          info.data = {}
          if( info._timer )
          {
            clearTimeout( info._timer )
            info._timer = null
          }
          info._timer = setTimeout(function(){
            info.data = data
            info._timer = null
          },500)
        }
        rows.x._p = null
      }

      this.css = event ? 'tv-row-item current' : 'tv-row-item' 
    }
  }
, css:'tv-row-item'
, h:{val:app.h,divide:3, multiply:1/0.8}
, w:{self:'h',multiply:4/3}
, background:
  { gone:true
  }
, cover:new Icon(
  { css:'ui-icon relative-size'
  , icon:
    { data:'access'
    , transform:function( v,access ){
        if(access === 1 && !cases.$isUpgraded.val) return 'lockedContent' 
        if(access === 2 && !cases.$isUpgraded.val) return 'lockedContent' 
        if(access === 3 && (!cases.$isUpgraded.val || (app.user.role.val === 3))) return 'lockedContent'
        return 'empty'
      }
    }
  })
, display:'inline-block'
, events: 
	{ click: function(e) {
      var data = this.data && this.data.from
      if( data )
      {
        //click ook per ding?
        //show page
        if( data.link ) {

          var link = data.link.val.split('.')
            , show = link[3] === 'shows'
            , episode = link[ link.length - 2 ] === 'episodes'
            , linkdata

          if( episode ) 
          {
            linkdata = app.content.from.get( link.slice(3) )
            app.user.navigation.media.$userOrigin.val = linkdata
            app.state.val = { val:'player', video:linkdata }
          }
          else if( show ) 
          {
            app.user.navigation.show.$userOrigin = app.content.get( link.slice(3) )
          } 
          else
          {
            void(0)
          }

        } 
        else if( data._parent._name === 'shows' ) 
        {          
          app.user.navigation.show.$userOrigin = data
        }
        else if( data._parent._name === 'episodes' )
        {
          if( this.cover.icon.val === 'lockedContent' )
          {
            var roadblock = this.checkParent('on.roadblock',true)
            if(roadblock) roadblock.val = true
          }
          else
          {
            app.user.navigation.media.$userOrigin.val = data
            app.state.val = { val:'player', video:data }
          }
        }
        else 
        {
          void(0)
        }
      }
    }
  , arrowRight: function() {
      if( this.$next.val ) this.$next.val.$focus()
    }
  , arrowDown: function() {
  		var _prev = prev.call( this, 0 )
      if( _prev ) _prev.$focus()
    }
  , arrowUp: function() {
      var _next = next.call( this )
      if( _next ) _next.$focus()
    }
	, $focus: function(e) {
			var name = this.parent._name        
			  , field
			  , special

			if( name ) {
			  field = name.slice(2)
			} else {
			  name = this.data._parent._parent._name
			  field = this.data._parent._parent
			  special = true
			}

			if( !special ) {
			  app.focusState.prev = name 
			}

      this.$selectIndicator( field )
      this.$focusCommon( e )
		}
	}
, '$next.transform': function(val, cv) {
		if(!cv) {
			return next.call( this )
  	}
  }
 , '$prev.transform': function(val, cv) {
		if(!cv) {
			return prev.call( this )
  	}
  }
}).Class


},{"../../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/row/page.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , Img = require('../../../img')
  , app = require('vigour-js/app/')
  , dictionary = require('vigour-js/app/dictionary')
  , VObj = require('vigour-js/object')
  , Item = require('./item')
  , elements = require('./elements')
  , Data = require('vigour-js/data')

var SingleRow = new Element(
{ css:'tv-row'
, collection:
  { data:true
  , element: new Item({
      events: {
        arrowLeft: function() {
          if( this.$prev.val ) 
          {
            this.$prev.val.$focus()
          }
          else
          {
            var focusState = app.focusState.from
            focusState.val = 'grid'
          }
        }
      , back: function(e) {
          e.preventDefault()
          app.focusState.val = 'grid'
        }
      }
    })
  }
}).Class

var pageRow = module.exports = exports = new elements.RowView(
{ 'indicator.list.model.inherit': false
, on:
  { focusState: 
    //deze iets meer sharen! -- gewoon callen als functie
    { defer: function( update, args ) {
        var _this = this
        var parent = _this._parent
        if( _this.from.val === 'row' ) {
          if( parent ) {
            var key = parent.focusState.from.prev //dit moet nog gefixed! 
              , _caller = parent._caller.rows

            if(_caller.children.length) {
              var child = ( key && _caller[key] && _caller[key].children[0] ) 
                        || _caller.children[0].children[0]

              if(!child && _caller.children[1]) {
                child = _caller.children[1].children[0]
              } 
              if(child && !child._$focused) {
                child.$focus()
              }
            }
          }
        } else if( _this.from.val === 'grid' ) {
          app.user.updateNavigation()
        } 
        update()
      }
    }
  , $parent: 
    { defer: function( update, args ) {

        var caller = this._parent._caller
          , first
          , obj
          , _this = this

        if( caller 
            && caller.data 
            && this._cachedData !== caller.data ) 
        {
          this._cachedData = caller.data
          var keys = new Data([])
            , page = app.user.navigation.page.val
            , sobj = { rows: {} }
          //is show!
          for( var i in caller.data ) 
          {
            if(!caller[i]) {
              sobj.rows['$$'+i] = new SingleRow({ data: caller.data[i] })
            }
            keys.push(i)
          }

          caller.indicator.title.text = { dictionary: 'text.nav.' + page }

          caller.indicator.list.data = keys
      
          caller.set(sobj)

          this._parent.focusState._update()
        }
        update()
      }
    }
  }
}).Class
},{"../../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","./elements":"/Users/youzi/dev/mtv-play/components/first/tv/row/elements.js","./item":"/Users/youzi/dev/mtv-play/components/first/tv/row/item.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/row/show.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/')
  , dictionary = require('vigour-js/app/dictionary')
  , VObj = require('vigour-js/object')
  , Item = require('./item')
  , elements = require('./elements')
  , raf = require('vigour-js/browser/animation/raf')

var SingleRow = new Element(
{ css:'tv-row'
, collection:
  { data:'episodes'
  , element: new Item(
    { events: {
      arrowLeft: function() {
        if( this.$prev.val ) 
        {
          this.$prev.val.$focus()
        }
        else
        {
          var focusState = app.focusState.from
          if( this.parent 
            && this.parent.data._parent 
            && this.parent.data._parent._name === 'seasons') 
          {
            focusState._val = 'row'
            app.user.navigation.page.$userOrigin = app.user.navigation.page.val || 'shows'
          } 
        }
      }
    , back : function() {
        var focusState = app.focusState.from
        focusState._val = 'row'
        app.user.navigation.page.$userOrigin = app.user.navigation.page.val || 'shows'
      }
    }
    })
  }
}).Class

var showRow = module.exports = exports = new elements.RowView(
{ indicator: {
    title: {
      text: { data: 'title' }
    }
  , list: {
      text: { dictionary: 'text.season', add: ' ' }
    , collection: {
        data:'seasons'
      }
    }
  }
, rows: 
  { model: 
    { subscription: 
      { title:true
      , seasons: 
        { $: 
          { number:true
          , episodes:
            { $: 
              { img:true
              , title:true
              }
            }
          }
        }
      }
    , block: true
    }
  , collection: 
    { element: SingleRow
    , data:'seasons'
    }
  }
, on:
  { 
   $remove: {
    defer:function( update, args ) {
      if(this._deferRafid) {
        void(0)
        window.cancelAnimationFrame(this._deferRafid)
      }
    }
   },
   $parent: 
    { defer: function( update, args ) {
      
        var caller = this._parent._caller
          , first
          , obj
          , _this = this

        if(caller._deferRafid) {
          window.cancelAnimationFrame(caller._deferRafid)
        }

        if( caller && caller.data )
          // && this._cachedData !== caller.data ) 
        {
          // this._cachedData = caller.data
          var keys = []
            , page = app.user.navigation.page.val
          //is show!
            if( caller.data._parent._name === 'shows' )
            {           
              caller.data.get('seasons').is('loaded',function() {
                if(caller.rows && caller.rows.children[0]) {
                  caller.rows.children[0].children[0].$focus()
                } else {
                  caller._deferRafid = raf(function() {
                    if(caller.rows && caller.rows.children[0]) {
                      caller.rows.children[0].children[0].$focus()
                    }
                  })
                }
              })
            }
        }
        update()
      }
    }
  }
}).Class
},{"./elements":"/Users/youzi/dev/mtv-play/components/first/tv/row/elements.js","./item":"/Users/youzi/dev/mtv-play/components/first/tv/row/item.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/show.js":[function(require,module,exports){
//page

var Element = require( 'vigour-js/app/ui/element' )
  , Data = require( 'vigour-js/data' )
           .inject( require( 'vigour-js/data/selection' ) )
  , Row
  , app = require('vigour-js/app/')

module.exports = function( update, args ) { 
  // discover / shows / channels
  var show = this.$userOrigin
    , parent = this._parent
    , caller = parent._caller
    , pagedata = {}
    , element
    
  caller.x = { multiply:0  }

  if( show )
  {
    caller.data = show
    if(!Row) {
      Row = require( './row/show' )    // app.focusState.val === 'grid' ? Grid : Row 
    }
    var seasons = show.get('seasons') 
    element = Row
    pagedata = show.from   
  }

  if( element ) {
     caller.transition = 
    { element: element
    , $params:
      { data: pagedata
      , info: { data: {} }
      }
    , $options:
      { force: true
      }
    }
    update()
  } else {
    update(true)
    throw new Error('wrong tv - show.js , no element!')
  }

}
},{"./row/show":"/Users/youzi/dev/mtv-play/components/first/tv/row/show.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/data/selection":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/selection.js"}],"/Users/youzi/dev/mtv-play/components/first/tv/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/first/watch/index.js":[function(require,module,exports){
require( './style.less' )

var Element = require( 'vigour-js/app/ui/element' )
var Icon = require( '../../icon' )
var Player = require( '../../player' )
var Favourite = require( '../favourite' )
var app = require( 'vigour-js/app/' )
var Seasons = require( '../seasons' )
var Topbar = require( '../menu' ).Topbar
var text = require( '../../text' )
var Epg = require( '../epg' )
var cases = require( 'vigour-js/browser/cases' )
var Switcher = require( 'vigour-js/app/ui/switcher' )
var landscape

Switcher = new Switcher( {
  onTransition: function( current, last ) {
    if( last ) last.remove()
    this.add( current )
  }
} ).Class

var Info = new Element( {
  touch: {
    scrollbar: 'y'
  },
  phone: {
    h: app.h.val - Topbar.base.h.val - app.w.val * 9 / 16
  },
  header: {
    title: new text.Title( {
      text: {
        data: 'media.title'
      }
    } )
  },
  description: new text.Description()
} ).Class

var ChannelInfo = new Info().Class

var EpisodeInfo = new Info( {
  header: {
    add: [ new Icon( {
      icon: 'share',
      name: 'share',
      events: {
        click: function() {
          var popup = this.checkParent( 'on.popup', true ).from
          popup.data = this.checkParent( 'data', true ).media.from
          popup.val = 'share'
        }
      }
    } ), 'title' ],
    subtitle: {
      text: {
        val: {
          dictionary: 'text.season'
        },
        add: [ ' ', {
          data: 'season.number'
        }, ' ', {
          dictionary: 'text.episode'
        }, ' ', {
          data: 'media.number'
        } ]
      }

    }
  }
} ).Class

var ChannelTitle = new text.Title( {
  text: {
    data: 'media.title'
  }
} ).Class

var ShowTitle = new text.Title( {
  text: {
    data: 'show.title'
  },
  favourite: new Favourite()
} ).Class

function updateLayout( update ) {
  var parent = this._parent
  var caller = parent._caller
  var w = window.innerWidth
  var h = window.innerHeight
  var data = caller.data
  var type = 'side'

  landscape = w > h

  if( !this.from.val ) return

  if( landscape ) {
    if( !caller[ type ] ) {
      if( caller.media[ type ] ) {
        caller.media[ type ].remove()
      }

      caller.node.style.tableLayout = 'auto'

      caller.add( new Switcher( {
        name: type,
        data: data
      } ), 'media' )

      caller.media.info.set( {
        display: 'block',
        h: {
          val: app.h,
          sub: [ Topbar.base.h.val, {
            val: app.w,
            sub: 400,
            multiply: 9 / 16
          } ]
        }
      } )

      parent.channel._update()

    }

  } else {
    if( !caller.media[ type ] ) {
      if( caller[ type ] ) {
        caller[ type ].remove()
      }

      caller.media.add( new Switcher( {
        name: type,
        data: data
      } ), 'info' )

      caller.node.style.tableLayout = 'fixed'

      caller.media.info.set( {
        display: 'table-cell',
        h: {
          val: app.h,
          sub: [ Topbar.base.h.val, {
            val: app.w,
            sub: 0,
            multiply: 9 / 16
          } ]
        }
      } )

      parent.channel._update()

    }
  }

  if( !caller.on.resize.val ) {
    caller.set( {
      on: {
        resize: app.w
      }
    } )
  }

  update()
}

module.exports = new Element( {
  css: 'first-watch',
  x: {
    translate: true
  },
  model: {
    subscription: {
      title: true,
      number: true,
      description: true
    }
  },
  on: {
    channel: {
      val: false,
      defer: function( update ) {
        var caller = this._parent._caller,
          info = caller.media.info,
          side = caller.side || caller.media.side,
          header = caller.pageheader,
          params = {
            // data: caller.data
          },
          isChannel = cases.$isOnChannel.val

        if( caller.data ) {
          params.data = caller.data
          params.data.media = app.user.navigation.media
        }

        if( isChannel === false ) {
          info.transition = {
            element: EpisodeInfo,
            $params: params
          }

          if( header ) {
            header.transition = {
              element: ShowTitle,
              $params: params
            }
          }

          if( side ) {
            params.on = {
              media: app.user.navigation.media.$userOrigin
            }

            //quick fix dirty!
            if( !landscape ) {
              params.list = {
                h: {
                  sub: {
                    add: {
                      val: app.w,
                      divide: 16 / 9
                    }
                  }
                }
              }
            }

            side.transition = {
              element: Seasons,
              $params: params
            }

            side.css = 'first-seasons seasons-only'
          }
        } else if( isChannel === true ) {
          if( cases.phone ) info.css = 'first-seasons first-epg'

          info.transition = {
            element: cases.phone ? Epg : ChannelInfo,
            $params: params
          }

          if( header ) {
            header.transition = {
              element: ChannelTitle,
              $params: params
            }
          }

          if( side ) {

            if( !landscape ) {
              params.list = {
                h: {
                  sub: {
                    add: {
                      val: app.w,
                      divide: 16 / 9
                    }
                  }
                }
              }
            }

            side.transition = {
              element: Epg,
              $params: params
            }
            side.css = 'first-seasons first-epg'
          }
        }

        update()
      }
    },
    $render: {
      defer: function( update ) {
        var parent = this._parent
        if( cases.tablet ) {
          parent.resize._update()
        }
        parent.channel._update()
        update()
      }
    }
  },
  tablet: {
    on: {
      resize: {
        defer: updateLayout
      }
    }
  },
  media: {
    player: new Player.Holder(),
    info: new Switcher()
  },
  desktop: {
    add: [ new Switcher( {
      name: 'pageheader'
    } ), 'media' ],
    margin: {},
    side: new Switcher()
  }
} ).Class

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../player":"/Users/youzi/dev/mtv-play/components/player/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","../epg":"/Users/youzi/dev/mtv-play/components/first/epg/index.js","../favourite":"/Users/youzi/dev/mtv-play/components/first/favourite/index.js","../menu":"/Users/youzi/dev/mtv-play/components/first/menu/index.js","../seasons":"/Users/youzi/dev/mtv-play/components/first/seasons/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/first/watch/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/app/ui/switcher":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/first/watch/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/icon/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , cases = require('vigour-js/browser/cases')
  , icon = new Element({ css:'ui-icon' })
  , map =
    { discover:'\ue600'
    , shows:'\ue601'
    , tv:'\ue602'
    , settings:'\ue603'
    , cast:'\ue604'
    , play:'\ue605'
    , pause:'\ue606'
    , fullscreen:'\ue607'
    , pullback:'\ue608'
    , swipeup:'\ue609'
    , close:'\ue60a'
    , closesmall:'\ue60b'
    , dropdown:'\ue60c'
    , arrowright:'\ue60d'
    , search:'\ue60e'
    , cart:'\ue60f'
    , email:'\ue610'
    , favorite:'\ue611'
    , favoriteadd:'\ue612'
    , favoriteremove:'\ue623'
    , locked:'\ue613'
    , logout:'\ue614'
    , profile:'\ue615'
    , share:'\ue616'
    , arrowleft:'\ue617'
    , exitfullscreen:'\ue618'
    , right:'\ue619'
    , wrong:'\ue61a'
    , logo:'\ue61b'
    , scan:'\ue61c'
    , facebook:'\ue61d'
    , twitter:'\ue61e'
    , phone:'\ue61f'
    , iphone:'\ue61f'
    , android:'\ue61f'
    , tablet:'\ue620'
    , desktop:'\ue621'
    , laptop:'\ue622'
    , menu:'\ue624'
    , leftnav:'\ue625'
    , rightnav:'\ue626'
    , noresult:'\ue627'
    , volume:'\ue628'
    , rewind:'\ue629'
    , fastforward:'\ue62a'
    , disconnect:'\ue62b'
    , monster:'\ue62c'
    , lockedRight:'\ue62d'
    , watching:'\ue62e'
    , notWatched:'\ue62f'
    , airplay:'\ue630'
    , gender:'\ue631'
    , age:'\ue632'
    , newsletter:'\ue633'
    , warning:'\ue634'
    , whatsapp:'\ue635'
    , loader1:'\ue636'
    , loader2:'\ue637'
    , loader3:'\ue638'
    , loader4:'\ue639'
    , lockedContent:'\ue63a'
    , fullscreenAlt:'\ue63b'
    , exitfullscreenAlt:'\ue63c'
    , playAlt:'\ue63d'
    , pauseAlt:'\ue63e'
    , lockedContentAlt:'\ue63f'
    , empty:' '
    }

icon.extend(
{ icon:function(val) {
    var v = '<span>'+(map[val.val]||'')+'</span>'
      , value = this.node.innerHTML
      , divindex = value.indexOf('<div')
    if(~divindex) v += value.slice(divindex)
    this.html = v;
  }
})

module.exports = exports = icon.Class
exports.map = map

},{"./style.less":"/Users/youzi/dev/mtv-play/components/icon/style.less","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/icon/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/img/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/')
  , animationFrame = require('vigour-js/browser/animation/frame')
  , img = new Element()
  , cases = require('vigour-js/browser/cases')
  , config = require('vigour-js/util/config')
  , timer
  , density = cases.retina ? 2 : 1

module.exports = exports = new img.Class(
{ opacity:
  { val:0
  }
, background:
  { data:'img'
  , load:function(t) {
      if(t) t.opacity = 1
    }
  , transform:function(val,cv) {

      if(!cv) return

      var w = Math.ceil((this.w || this.checkParent('w',true)).val) || app.w.val
        , h = Math.ceil((this.h || this.checkParent('h',true)).val) || app.h.val
        , imgrange = val._parent.range
        , rect

      if( imgrange )
      {
        rect = range( w, h, imgrange.val )
        w = rect.w
        h = rect.h
      }

      return config.img+'/image/' + cv + '/' +  w*density+'/'+h*density
    }
  }
, slow:
  { opacity:1
  , 'background.load':null
  }
, css:'ui-img'
}).Class

exports.density = density

exports.Basic = new Element(
{ css:'ui-img'
, background:
  { data:'img'
  , load:function(t) {
      if(t) t.opacity = 1
    }
  , transform:function( v, cv ){
      if(!cv) return
      return config.img
           + '/image/'+cv+'/'
           + this.w.val*density
           + '/'+this.h.val*density
    }
  }
, opacity:
  { val:0
  }
, slow:
  { opacity:1
  , 'background.load':null
  }
}).Class

exports.Relative = new Element(
{ css:'ui-img'
, background:
  { data:'img'
  , load:function(t) {
        if(t) t.opacity = 1
    }
  , transform:function( v, cv ){
      if( !cv ) return ''
      var node = this.node
        , w = node.offsetWidth
        , h
        , _this = this
        , imgrange = v._parent.range
        , rect

      if( !w )
      {
        if( !_this.rafId ) {
          _this.rafId = window.requestAnimationFrame(function(){
            if( _this.rendered ) _this.background.update(_this)
          })
        }
        return ''
      }

      h = node.offsetHeight

      if( imgrange )
      {
        rect = range( w, h, imgrange.val )
        w = rect.w
        h = rect.h
      }

      return config.img
           + '/image/'+cv+'/'
           + w*density
           + '/'+h*density
    }
  }
, opacity:
  { val:0
  }
, slow:
  { opacity:1
  , 'background.load':null
  }
}).Class

exports.Carousel = new exports.Relative(
{ background:
  { transform:function( v, cv ){
      if( !cv ) return ''
      var node = this.node
        , h = node.offsetHeight
        , w
        , _this = this
        , imgrange = v._parent.range
        , rect

      if( !h )
      {
        if( !_this.rafId ) {
          _this.rafId = window.requestAnimationFrame(function(){
            if( _this.rendered ) _this.background.update(_this)
          })
        }
        return ''
      }

      w = Math.ceil(Math.min(node.offsetWidth,h/9*16))

      if( imgrange )
      {
        rect = range( w, h, imgrange.val )
        w = rect.w
        h = rect.h
      }

      return config.img
           + '/image/'+cv+'/'
           + w*density
           + '/'+h*density
    }
  }
}).Class


exports.Overlay = new exports({
  background: {
    transform:function( v, cv ) {
      if(!cv) return ''
      var w = Math.ceil((this.w || this.checkParent('w',true)).val) || app.w.val
        , h = Math.ceil((this.h || this.checkParent('h',true)).val) || app.h.val
      return config.img+'/image/' + cv + '/'
           + w*density  + '/'
           + h*density
           +'?effect=overlayBlur&overlay=overlay_lightest&radius=0&sigma=0'
    }
  }
}).Class

exports.Intro = new exports({
  background: {
    transform:function( v, cv ){
      if( !cv ) return ''
      var node = this.node
        , w = node.offsetWidth
        , _this = this

      if( !w )
      {
        if( !_this.rafId ) {
          _this.rafId = window.requestAnimationFrame(function(){
            if( _this.rendered ) _this.background.update(_this)
          })
        }
        return ''
      }

      return config.img+'/image/'
           + w*density  + '/'
           + node.offsetHeight*density
           + '?url=https://wwwmtvplay-a.akamaihd.net/img/intro/' + cv
    }
  }
}).Class

function range( width, height, val ){
  var ratio = height/width
    , newWidth = Math.ceil( width / val ) * val
    , newHeight = Math.ceil( newWidth * ratio )
  return { w:newWidth, h:newHeight }
}

},{"./style.less":"/Users/youzi/dev/mtv-play/components/img/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/animation/frame":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/frame.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/img/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/item/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Icon = require('../icon')
  , Img = require('../img')
  , text = require('../text')
  , cases = require('vigour-js/browser/cases')
  , Input = text.Input
  , Switch = require('../button').Switcher
  , Title = text.Title
  , TitleSubtitle = new text.TitleSubtitle(
    { css:'ui-item-text' 
    }).Class
  , app = require('vigour-js/app/')

// if(cases.phone) Img = Img.Sprite

//base item
module.exports = exports = new Element(
{ css:'ui-item'
}).Class

exports.Basic = new exports(
{ txt:new Title()
}).Class

//used in settings, teaser
exports.IconRight = new exports.Basic(
{ righticon:new Icon({icon:'arrowright'})
}).Class

exports.IconRightSub = new exports.Basic(
{ righticon:new Icon({icon:'arrowright'})
, css:{ addClass:'ui-item-sub' }
, txt:new TitleSubtitle()
}).Class

//used in menu, devices, lang selection
exports.IconLeft = new exports(
{ lefticon:new Icon({icon:{data:'icon'}})
, txt:new Title()
}).Class

//used in management
exports.Block = new exports(
{ left:
  { 'title.text.dictionary': 'text.all'
  , 'subtitle.text.dictionary': 'text.nav.shows'
  }
, center:
  { 'title.text.dictionary': 'text.all'
  , 'subtitle.text.dictionary': 'text.nav.channels'
  }
, right:
  { 'title.text.dictionary': 'text.every'
  , 'subtitle.text.dictionary': 'text.episode'
  }
, css:{ addClass: 'block' }
}).Class

//used in topbar, management, menuList
exports.Menu = new exports.IconLeft(
{ h:55
, css:{ addClass:'ui-item-menu' }
, righticon:new Icon()
}).Class

//used in channel overview, miniplayer-phone
exports.Thumb = new exports(
{ thumb: 
  { w:{val:100,phone:70}
  , h:{val:71, phone:45}
  , img:new Img.Basic(
    { w:{val:100,phone:70}
    , h:{val:71, phone:45}
    }) 
  }
, txt:new TitleSubtitle()
, righticon:new Icon({ icon:'arrowright' })
}).Class

//used in discover and overview
exports.Large = new Element(
{ css:'ui-item-large'
, display:'inline-block'
, thumb:new Img({w:310,h:220})
, info:
  { txt:new TitleSubtitle()
  , description: { text: { data:'description' } }
  }
}).Class

// //used in show page, show overview

//TODO: LOCK ICONS NEEDS TOTAL REFACTOR -- make one module for it
exports.Indicator = new exports.Thumb(
{ righticon: new Icon(
  { on:{data:'id'}
  , icon: 
    { data:'access'
    , transform: function( val, cv ) {

        var access = app.util.access( cv, this.data )
          , icon = (access && ~access.indexOf('play')) ? cases.desktop ? 'empty' : 'arrowright' : access
            return icon === 'lockedContent' ? 'lockedContentAlt' : icon

      }
    , listen: [ app.user.role, app.user.purchases ]
    }
  })
}).Class


exports.Topbar = new exports.Menu(
{ position:'absolute'
, name:'topbar'
, h:44
, css:{addClass:'ui-item-topbar'}
, y: { val:0, translate:true }
, iosFull: { h: { add:20 } }
, txt:{x:{translate:true,val:1}}
}).Class

exports.TitleSubtitle = TitleSubtitle

exports.Switcher = new exports.IconRightSub(
{ righticon:new Element({hold:new Switch()})
}).Class
},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../text":"/Users/youzi/dev/mtv-play/components/text/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/item/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/item/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/loader/index.js":[function(require,module,exports){
require('./style.less')

var Sprite = require('vigour-js/app/ui/sprite')
  , Element = require('vigour-js/app/ui/element')
  , cases = require('vigour-js/browser/cases')

module.exports = exports = new Element(
{ css:'ui-loader'
, append:new Sprite(
	{ w:31
	, h:31
	, params:{ cols:1, rows:19 }
	})
}).Class

exports.Simple = new Sprite(
{ css:'ui-loader-simple'
, 'w,h':21
, params:{ cols:1, rows:19 }
}).Class

if( !cases.ios  && !cases.desktop ) {
	exports.Logo = new Element({
		css:'loader logo noanim',
		w:110,
		h:110
	}).Class
} else {
	exports.Logo = new Sprite(
	{ css:'loader logo'
	, w:110
	, h:110
	, params:{ cols:1, rows:26 } // once:true }
	}).Class
}
},{"./style.less":"/Users/youzi/dev/mtv-play/components/loader/style.less","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/app/ui/sprite":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/sprite/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/loader/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/player/backdrop.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app')
  , Element = require('vigour-js/app/ui/element')
  , Img = require('../img')
  , Icon = require('../icon')
  
module.exports = new Element(
{ name:'backdrop'
, css:'relative-size'
, img:new Img.Relative(
  { css:'relative-size'
  , background:
    { data:'show.img'
    , load:function(t) {
        t.opacity = 0.3
      }
    }
  })
, holder:
  { info:
    { title:{ 'text.dictionary': 'text.sender.remotePlaybackTitle' }
    , txt:{ 'text.dictionary': 'text.sender.remotePlaybackSubtitle' }
    }
  , pullback:new Icon(
    { icon:'pullback'
    , pulltext:
      { 'text.dictionary':'text.pullBack'
      }
    })
  }
, events:
  { click:function(){
      app.user.receiver.media.$userOrigin = false
    }
  }
}).Class
},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../img":"/Users/youzi/dev/mtv-play/components/img/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/player/style.less","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/player/controls/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/')
  , Seekbar = require('../seekbar')
  , videoUtil = require('vigour-js/browser/element/video/util')
  , cases = require('vigour-js/browser/cases')

module.exports = new Element(
{ css:'player-controls'
, container:
  { progress:
    { text:
      { data:'mediausage.time'//data:'time'
      , multiply:
        { data:'media.duration'
        }
      , transform:function(v,cv){
          return videoUtil.time(Math.abs(cv))
        }
      }
    }
  , seekbar:new Seekbar(
    { w:{sub:200}
    })
  , duration:
    { text:
      { data:'media.duration'
      , transform:function(v,cv){
          return videoUtil.time( cv )
        }
      }
    }
  }
}).Class
},{"../seekbar":"/Users/youzi/dev/mtv-play/components/player/seekbar/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/player/controls/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/element/video/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/video/util.js"}],"/Users/youzi/dev/mtv-play/components/player/controls/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/player/index.js":[function(require,module,exports){
require( './style.less' )

var app = require( 'vigour-js/app/' ),
  cases = require( 'vigour-js/browser/cases' ),
  ua = require( 'vigour-js/browser/ua' ),
  Element = require( 'vigour-js/app/ui/element' ),
  Video = require( './video' ),
  Overlay = require( './overlay' ),
  Backdrop = require( './backdrop' ),
  config = require( 'vigour-js/util/config' ),
  density = cases.retina ? 2 : 1,
  keyUpID = 'keyUpID',
  raf = require( 'vigour-js/browser/animation/raf' ),
  fromMediaSwitch

//for martin
document.cookie = "_L1Nl9uK_DJGt_RDAVBq_=_L1Nl9uK_DJGt_RDAVBq_; domain=.mtvplay.tv";

function launchIntoFullscreen( el ) { //add these to framework
  var element = el.node || el
  if( element.requestFullscreen ) {
    element.requestFullscreen()
  } else if( element.mozRequestFullScreen ) {
    element.mozRequestFullScreen()
  } else if( element.webkitRequestFullscreen ) {
    element.webkitRequestFullscreen()
  } else if( element.msRequestFullscreen ) {
    element.msRequestFullscreen()
  } else if( ( element = el.video && el.video.jqHandle.node ) && element.webkitEnterFullscreen() ) {
    element.webkitEnterFullscreen()
  }
}

function exitFullscreen() {
  if( document.exitFullscreen ) {
    document.exitFullscreen()
  } else if( document.mozCancelFullScreen ) {
    document.mozCancelFullScreen()
  } else if( document.webkitExitFullscreen ) {
    document.webkitExitFullscreen()
  }
}

function swiped() { // make this a case!
  var mediaData = app.user.navigation.media.from,
    msMediaData = app.user.receiver.media.from,
    swiped = cases.$hasReceiver.val && msMediaData._cachedPath === mediaData._cachedPath

  return swiped
}

function updateSwipe() {
  var player = this._parent._caller,
    holder = player.parent,
    video = player.video,
    videoData = video && video.data

  if( !holder ) return
  if( !cases.$isReceiver.val ) {
    player._cachedW = null
    if( swiped() ) {
      if( player._fullscreen ) player.x = app.w
      else {
        player.y = {
          multiply: -1
        }
      }

      raf( function() {
        if( swiped() ) app.playing.from.val = false
      } )

      if( holder.backdrop.empty ) {
        holder.set( {
          backdrop: new Backdrop( {
            data: player.video.data
          } )
        } )
      }

      return true
    } else if( player.y.multiply.val ) {
      player.x = 0
      player.y = {
        multiply: 0
      }
    }
  } else if( player.__ready && !swiped ) {
    return true
  }
}

//on receiver media update > update swipe & update time
function onMsMedia( update ) {
  var caller = this._parent._caller,
    video = caller.video,
    videoData = video && video.data,
    mediaUsage = videoData && videoData.mediausage && videoData.mediausage.from,
    videoTime = video && video.time.from.val

  var updateTime = updateSwipe.call( this )

  if( !cases.$isOnChannel.val && updateTime && mediaUsage && ( videoTime || videoTime === 0 ) ) {
    mediaUsage.set( 'time', Math.abs( videoTime ) )
  }

  update()
}

//on media nav > update swipe
function onMedia( update ) {
  if( !cases.tv && !cases.$isReceiver.val ) {
    var player = this._parent._caller
    player.y._p = true
    updateSwipe.call( this )
    player.y._p = null
  }
  update()
}

//on render > set play & bind msmedia & bind media & bind fullscreen
function onRender( update ) {
  var parent = this._parent,
    player = parent._caller

  app.playing.from.val = cases.tv || ( !cases.$isActive.val && cases.$isReceiver.val ) ? true : false

  parent.msmedia.val = {
    val: app.user.receiver.media,
    listen: [ cases.$hasReceiver ]
  }

  parent.media.val = app.user.navigation.media

  parent.fullscreen.val = cases.$isFullscreen

  raf( function() {
    if( player.video ) {
      player.__ready = true
      player.video.$play = app.playing
      player.overlay.on.volume.val = app.volume
    }
  } )

  window.player = player

  if( cases.desktop ) {
    app.addEvent( 'keydown', function( e ) {
      if( app.popup.val || ( !cases.$isReceiver.val && swiped() ) ) return

      var keyEvent = true
        //space or enter
      if( e.keyCode === 32 || e.keyCode === 13 ) player.togglePlay()
        //left
      else if( e.keyCode === 37 ) player.seekBackward()
        //right
      else if( e.keyCode === 39 ) player.seekForward()
        //up
      else if( e.keyCode === 38 ) player.volumeUp()
        //down
      else if( e.keyCode === 40 ) player.volumeDown()
        //F
      else if( e.keyCode === 70 ) player.goFullscreen()

      else keyEvent = false

      if( keyEvent ) {
        e.preventDefault()
      }

    }, keyUpID )
  } else if( cases.tv ) {
    player.$focus()
  }

  update()
}

//on remove > pause global play
function onRemove( update ) {
  app.playing.from.val = false

  app.removeEvent( false, keyUpID )

  update()
}

function onFullscreen( update ) {
  var fullscreen = this.from.val,
    player = this._parent._caller,
    fsListener = ua.prefix + 'fullscreenchange'

  if( fullscreen ) {
    if( window.statusBar ) window.statusBar.hide()
    else if( cases.desktop ) launchIntoFullscreen( player )
    else if( cases.phone ) launchIntoFullscreen( player )

    player._exitFullscreen = function( e ) {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement

      if( !fullscreenElement ) app.state.val = 'first'

    }
    document.body.addEventListener( fsListener, player._exitFullscreen )
  } else {
    if( window.statusBar ) window.statusBar.show()
    if( cases.desktop ) exitFullscreen()
    document.body.removeEventListener( fsListener, player._exitFullscreen )
  }

  raf.repeat( function() {
    if( player.background ) player.background._update()
  }, 2 )

  update()
}

function seekBackward() {
  var usage = this.data && this.data.mediausage
  if( usage && usage.time && !cases.$isOnChannel.val ) usage.time.from.val = Math.max( 0, Math.abs( usage.time.from.val ) - 0.01 )
}

function seekForward() {
  var usage = this.data && this.data.mediausage
  if( usage && usage.time && !cases.$isOnChannel.val ) usage.time.from.val = Math.min( 1, Math.abs( usage.time.from.val ) + 0.01 )
}

function togglePlay() {
  app.playing.from.val = !app.playing.val
}

function volumeUp() {
  if( app.volume.val <= 0.9 ) app.volume.from.val += 0.1
}

function volumeDown() {
  if( app.volume.val >= 0.1 ) app.volume.from.val -= 0.1
}

module.exports = exports = new Element( {
  on: {
    fullscreen: {
      defer: onFullscreen
    },
    msmedia: // update y and also time on msmedia update
    {
      defer: onMsMedia
    },
    media: // update y on media navigation
    {
      defer: onMedia
    },
    $render: {
      defer: onRender
    },
    $remove: {
      defer: onRemove
    }
  },
  tv: {
    css: 'base-player fullscreen-player',
    events: {
      back: function() {
        // app.focusState._val = 'row'
        app.state.val = 'first'
          // app.user.updateNavigation()
      },
      click: togglePlay,
      arrowLeft: seekBackward,
      arrowRight: seekForward
        // leftArrow , rightArrow
        // up down door episodes?
        ,
      $focus: function( e ) {

      }
    }
  },
  chromecast: {
    css: 'base-player fullscreen-player'
  },
  x: {
    val: 0,
    animation: {
      time: 24,
      easing: 'outCubic',
      done: function( cv ) {
        if( cv ) {
          this.y._p = true
          this.y = {
            multiply: -1
          }
          this.y._p = null
          this.x._p = true
          this.x = 0
          this.x._p = null
          goFullscreen.exit.call( this )
        }
      }
    }
  },
  y: {
    translate: true,
    val: app.w,
    defer: function( update, args ) {
      var _this = this
      if( !this._caller.rendered ) {
        update( true )
        return true
      }
      if( args[ 2 ] === false ) { // only do if the update is coming from app.w, is this right?
        raf( function() {
          _this._p = true
          update()
          _this._p = null
        } )
      } else {
        update()
      }
    },
    transform: function( v, cv ) {
      if( this._cachedW !== cv ) {
        this._cachedW = cv
        this._cachedY = this.node.offsetHeight
      }
      var value = this._cachedY || ( this._cachedY = this.node.offsetHeight )
      if( value ) return value
    },
    multiply: {
      val: 0,
      animation: {
        time: 24,
        easing: 'outCubic'
      }
    }
  },
  video: new Video(),
  overlay: new Overlay(),
  adMessage: {
    text: 'Advertisement',
    display: {
      val: 'none',
      $isPlayingAd: 'block'
    }
  },
  background: {
    data: 'media.img',
    $bubble: {
      self: true
    },
    transform: function( v, cv ) {

      if( !cv ) return ''

      var node = this.node,
        w = node.offsetWidth,
        _this = this

      if( !w ) {
        if( !_this.rafId ) {
          _this.rafId = raf( function() {
            if( _this.rendered ) _this.background.update( _this )
          } )
        }
        return ''
      }

      return config.img + '/image/' + cv + '/' + w * density + '/' + node.offsetHeight * density
    }
  }
} ).Class

var goFullscreen = cases.phone ? require( './phone-fullscreen' ) : function() {
  if( cases.$isFullscreen.val ) {
    var user = app.user,
      receiver = cases.$isReceiver.val,
      mediadata = this.checkParent( 'data.media', true ),
      seasondata

    if( receiver ) {
      if( mediadata ) {
        if( mediadata._parent._name === 'episodes' ) {
          seasondata = mediadata._parent._parent
          user.navigation.season.$userOrigin.val = seasondata
          user.navigation.show.$userOrigin.val = seasondata._parent._parent
        }
        user.navigation.media.$userOrigin = mediadata.from
      }
      user.activeClient.$userOrigin = user.cloud.client.from
      user.receiver.media.$userOrigin = false
    } else {
      app.state.val = 'first'
    }
  } else {
    app.state.val = 'player'
  }
}

exports.base.define( {
  seekBackward: seekBackward,
  seekForward: seekForward,
  togglePlay: togglePlay,
  volumeUp: volumeUp,
  volumeDown: volumeDown,
  goFullscreen: goFullscreen
} )

exports.Holder = new Element( {
  css: 'player-holder',
  backdrop: {
    empty: true
  },
  player: new exports( {
    css: {
      val: 'base-player windowed-player',
      $isFullscreen: !cases.phone && 'base-player fullscreen-player'
    }
  } )
} ).Class

},{"./backdrop":"/Users/youzi/dev/mtv-play/components/player/backdrop.js","./overlay":"/Users/youzi/dev/mtv-play/components/player/overlay/index.js","./phone-fullscreen":"/Users/youzi/dev/mtv-play/components/player/phone-fullscreen.js","./style.less":"/Users/youzi/dev/mtv-play/components/player/style.less","./video":"/Users/youzi/dev/mtv-play/components/player/video/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/player/overlay/index.js":[function(require,module,exports){
var app = require( 'vigour-js/app/' )
var cases = window.cases = require( 'vigour-js/browser/cases' )
var Element = require( 'vigour-js/app/ui/element' )
var Controls = require( '../controls' )
var Icon = require( '../../icon' )
var Img = require( '../../img' )
var Play = require( './play' )
var Volume = require( '../volume' )

function swipeUp( e ) {
  var data = this.checkParent( '_d', true )
  e.prevent = true
  app.user.receiver.media.$userOrigin.val = data.media.from
}

var Clickable = new Element( {
  on: {
    data: 'media.id'
  },
  buttons: {
    play: new Play( {
      display: !cases.phone && {
        data: 'media.access',
        transform: function( val, cv ) {
          var icon = app.util.access( cv, this.data && this.data.media )
          return( icon && ~icon.indexOf( 'play' ) ) ? 'none' : 'inline-block'
        }
      }
    } ),
    swipe: new Icon( {
      icon: 'swipeup',
      display: {
        data: 'media.access',
        transform: function( cv ) {
          var media = this.data && this.data.media,
            accesAllowed = media && !( media._parent && media._parent._name === 'channels' && app.user.role.val === 3 ) && ( cases.$isUpgraded.val || ( media.access && !media.access.val ) || ( media.val && media.val.access && !media.val.access.val ) ),
            showSwipeButton = cases.$hasReceiver.val && accesAllowed

          return showSwipeButton ? 'inline-block' : 'none'
        },
        listen: [ cases.$hasReceiver, app.user.role, app.user.purchases ]
      },
      events: {
        click: swipeUp
      }
    } )
  },
  events: {
    click: !cases.phone ? function() {
      app.playing.from.val = !app.playing.val
    } : function() {
      var opacity = this.parent.opacity
      opacity.val = opacity.val ? 0 : 1
    }
  }
} ).Class

var pointerElement = new Element().Class

pointerElement.base.extend( {
  pointerEvents: function( val ) {
    this.node.style.pointerEvents = val.val
  }
} )

module.exports = new pointerElement( {
  on: {
    $remove: {
      defer: function( update ) {
        var overlay = this._parent._caller
        if( overlay._timer ) clearTimeout( overlay._timer )
        update()
      }
    },
    volume: {
      defer: function( update ) {
        var overlay = this._parent._caller
        overlay.opacity.val = 1
        update()
      }
    }
  },
  opacity: {
    val: 1,
    defer: function( update, args ) {
      var caller = this._caller

      if( this._block ) return true

      if( this._val === 1 ) {
        if( caller._timer ) clearTimeout( caller._timer )
        caller._timer = setTimeout( function() {
          if( app.playing.val ) caller.opacity.val = 0
          caller._timer = null
        }, 2500 )
      }

      update()
    },
    listen: app.playing
  },
  infoholder: {
    display: {
      val: 'table',
      $isPlayingAd: 'none',
      $isOnChannel: 'none'
    },
    '!phone.thumb': new Img( {
      h: {
        val: 50,
        $isFullscreen: 110
      },
      w: {
        self: 'h',
        defer: function( update ) {
          this._caller.background._update()
          update()
        }
      },
      background: {
        data: 'show.img'
      }
    } ),
    titles: {
      showtitle: {
        text: {
          data: 'media.title'
        }
      },
      showsubtitle: {
        text: {
          val: {
            dictionary: 'text.season',
            transform: function( v, cv ) {
              return cv && cv[ 0 ]
            },
            add: {
              data: 'season.number',
              transform: function( v, cv ) {
                var realNumber = this.data && this.data.media.from._parent._parent.number,
                  realNumberVal = realNumber && realNumber.val
                if( realNumberVal ) cv = realNumberVal
                return( cv > 9 ? cv : '0' + cv ) + ' '
              }
            }
          },
          add: [ {
            val: {
              dictionary: 'text.episode',
              transform: function( v, cv ) {
                return cv && cv[ 0 ]
              }
            }
          }, {
            data: 'media.number',
            transform: function( v, cv ) {
              return( cv > 9 ? cv : '0' + cv )
            }
          } ]
        }
      }
    }
  },
  clickable: new Clickable(),
  '!phoneBrowser.controls': {
    css: {
      val: '',
      $isOnChannel: 'on-channel'
    },
    on: {
      data: 'media.id'
    },
    left: new Play(),
    display: {
      data: 'media.access',
      transform: function( val, cv ) {
        return app.util.access( cv, this.data && this.data.media ) === 'lockedContent' ? 'none' : 'table'
      },
      listen: [ app.user.role, app.user.purchases ]
    },
    center: new Controls( {
      container: {
        display: {
          val: 'block',
          $isOnChannel: 'none',
          $isPlayingAd: 'none'
        },
        seekbar: {
          bg: {
            seekLoader: {
              opacity: {
                val: 0,
                $isLoadingVideo: 1
              }
            }
          }
        }
      },
      adMessage: {
        text: 'Your video will play after this ad.',
        display: {
          val: 'none',
          $isPlayingAd: 'block'
        }
      }
    } ),
    '!tv.right': {
      volume: {
        holder: new Volume( {
          bars: {
            data: 'volume'
          }
        } )
      },
      fullscreen: new Icon( {
        icon: {
          val: 'fullscreen',
          $isFullscreen: 'exitfullscreen'
        },
        events: {
          click: function() {
            var player = this.checkParent( 'player', true )
            if( player ) player.goFullscreen()
          }
        }
      } )
    }
  },
  events: {
    down: function( e ) {
      var opacity = this.opacity
      if( cases.$isFullscreen.val && !opacity.val ) {
        e.prevent = true
        opacity.val = 1
      }
    }
  },
  desktop: {
    pointerEvents: {
      val: 'auto',
      $isPlayingAd: 'none'
    },
    events: {
      move: function() {
        var opacity = this.opacity
        if( !opacity.val ) {
          opacity.val = 1
          opacity._block = true
          setTimeout( function() {
            opacity._block = null
          }, 1000 )
        }
      }
    }
  }
} ).Class

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../controls":"/Users/youzi/dev/mtv-play/components/player/controls/index.js","../volume":"/Users/youzi/dev/mtv-play/components/player/volume/index.js","./play":"/Users/youzi/dev/mtv-play/components/player/overlay/play.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/player/overlay/play.js":[function(require,module,exports){
var Icon = require('../../icon')
  , cases = require('vigour-js/browser/cases')
  , app = require('vigour-js/app/')

module.exports = exports = new Icon(
{ on:{data:'media.id'}
, icon:
  { val:
    { data:'media.access'
    , transform: function( val, cv ) {
        var icon = app.util.access( cv, this.data && this.data.media )
        return icon
      }
    }
  , $playing: cases.phone
              ? 'pause'
              : 'pauseAlt'
  , transform:function( v, cv ){
      if( !this._loading ) this.rotate = 0
      return this._loading ? 'loader2' : cv
    }
  , listen:[ app.user.role, app.user.purchases ]
  }
, rotate:
  { val:0
  , animation:
    { complete:function(){
        var rotate = this.rotate
        rotate._p = true
        rotate = 0
        rotate._p = false
        this._loading = false
        this.icon.update(this)
      }
    }
  }
, events:
  { click:function(e){
      e.prevent = true
      app.playing.from.val = !app.playing.val
    }
  }
}).Class

exports.base.define(
{ load:function(){
    this._loading = true
    this.icon.update(this)
    this.rotate = this.rotate.val + 360
  }
})

/*
, trial = user.role.val === 3

*/
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/player/phone-fullscreen.js":[function(require,module,exports){
var app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')

function fullscreen( exit ){
  var page = this.checkParent('media',true)
    , player = page.player.player
    , topbar = this.checkParent('topbar',true)
    , controls = player.overlay.controls
    , fullscreenButton = controls.right.fullscreen
    , seekbar = controls.center.container.seekbar
    , miniplayer = this.checkParent('miniplayer',true)
    , style = player.node.style
    , _this = this

  if( window.StatusBar )
  {
    if( exit ) window.StatusBar.show()
    else window.StatusBar.hide()

    if( player._fullscreen === void 0 )
    {
      player.setSetting(
      { name:'StatusBar'
      , remove:function(){
          window.StatusBar.show()
          if( this._listener ) app.h.removeListener( this._listener )
        }
      })
    }
  }

  var topbarHeight = topbar.node.offsetHeight

  player.set(
  { rotate: exit
    ? 0
    : 90
  , x: 0
  })
  
  player.overlay.node.style.zIndex = exit ? null : '1'
  style.zIndex = exit ? null : '1'
  style.margin = exit ? '0' : '-' + topbarHeight + 'px ' + app.w.val + 'px'
  style.width = exit ? null : app.h.val + 'px'
  style.height = exit ? null : app.w.val + 'px'
  page.node.style.overflow = exit ? null : 'visible'

  if( player._listener ) app.h.removeListener( player._listener )

  if( !exit )
  {
    player._listener = function(){
      style.width = app.h.val + 'px'
    }
    app.h.on( player._listener )
  }

  //change fullscreen button
  fullscreenButton.set(
  { icon: exit
    ? 'fullscreen'
    : 'exitfullscreen'
  , events:
    { click: exit
      ? exports
      : function(){
          fullscreen.call( this, true )
        }
    }
  })

  seekbar._left = exit ? false : true
  player._fullscreen = exit ? false : true
}

module.exports = exports = function(){
  fullscreen.call( this )
}

exports.exit = function(){
  fullscreen.call( this, true )
}
},{"vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/player/players/html5.js":[function(require,module,exports){
var ua = require('vigour-js/browser/ua')
  , _winPhone = ua.platform === 'windows' && ua.device === 'phone'
  , _ios = ua.platform === 'ios'
  , _android = ua.platform === 'android'
  , _canplay = 'canplaytrough'
  , app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')

// app.api.player.val = true

module.exports = exports = require('vigour-js/browser/element/video/html5')

// app.set({logger:{html:''}})
// var style = app.logger.node.style
// style.border = '10px solid white'
// style.wordWrap = 'break-word'
// style.width = '90%'
// style.position = 'fixed'
// style.top = '0'
// style.margin = '15px'
// style.color = '#08E700'
// style.fontSize = '20px'
// style.zIndex = '9999'
// style.pointerEvents = 'none'
// app.logger.text = 'TEST'

// var domLogger = function() {
//   var line = Array.prototype.slice.call(arguments).join(' ');
//   app.logger.html.val = "<li class='small'>%s</li>".replace('%s', line) + app.logger.html.val;
// };

// domLogger('width: '+window.innerWidth+' height: '+window.innerHeight)

function setTime (val, force) {
  this._correctTime = val
  if(!this.channel && this._ready && this._time !== val) {

    if (this.jqHandle && (!this.__paused || force)) {
      this.tset = null
      this.out = null
      this.cnt = null
      this.jqHandle.setCurrentTime( Math.abs(Math.round(val)) )
      this._time = val
    } else {
      this.tset = true
    }
  }
}

function createPlayer(t, cb) {
  if( typeof VIACOM === 'undefined' ){
    app.api.player.once('success',function(){
      exports.settings = app.api.player.settings
      if( t.rendered ) createPlayer(t,cb)
    })
    app.api.player.val = true
    return
  }

  t.addEvent( 'down', function( e ){
    if( !cases.$isPlayingAd.val ) e.preventDefault()
  })

  if( t.data && t.data.media ) {
    if( t.data.media.from.videolang ) {
      exports.settings.localization.language = t.data.media.from.videolang.val
    }
  }

  if( cases.$isUpgraded.val )
  {
    exports.settings.ads.enabled = false
  }
  else if( t.data && t.data.mediausage && t.data.mediausage.time )
  {
    exports.settings.ads.enabled = Math.abs( t.data.mediausage.time.val | 0 ) > 0.01 ? false : true
  }
  else
  {
    exports.settings.ads.enabled = true
  }

  if( cases.tv )
  {
    exports.settings.force = 'html5'
    exports.settings.html5smartTVMode = 'Samsung'
  }
  else if( cases.chromecast )
  {
    exports.settings.force = 'html5'
    exports.settings.html5smartTVMode = 'Chromecast'
    exports.settings.ads.enabled = false
  }

  t.jqHandle = new VIACOM.Mediaplayer(
    '.video'
    , exports.settings
    , { controls:false
      , 'webkit-playsinline': true
      }
    , app.api.player.debug
  )

  t.jqHandle.addEventListener('error', function( error ){
    void(0)
  })

  t.jqHandle.addEventListener('ended', function( e ){
    app.playing.from.val = false
  })

  t.jqHandle.addEventListener('timeupdate', function( e ){
    
  })

  t.jqHandle.addEventListener('ads:rollPlaying', function( e ){
    cases.$isPlayingAd.val = true
  })  

  t.jqHandle.addEventListener('ads:rollEnded', function( e ){
    cases.$isPlayingAd.val = false
  })

  var video = t.jqHandle.proxy.player && t.jqHandle.proxy.player.video
  if( video )
  {
    video.setAttribute('webkit-playsinline', '"true"')
    video.removeAttribute("controls")
    if( _ios ) 
    {
      video.addEventListener('webkitendfullscreen', function() {
        window.requestAnimationFrame(function() { document.body.scrollTop = 0 })
        t.pause()
        app.playing.from.val = false
      }, false)
    }

    t.video = video
    t.setEvents()

    // domLogger('addedEvents etc')
  }

  exports.protoNew.call(t)

  cb()
}

exports.settings = app.api.player.settings

exports.protoNew = exports.new

exports.new = function(){}

exports.setEvents = false

function initVideo( _this, src ){
  _this._correctTime = Math.abs( _this.time.val ) * _this.duration.val
  if( src && typeof src === 'string' )
  {
    if( _this.data.media && ~_this.data.media.from._path.indexOf('channels') )
    { type = 'simulcast_stream'
    }
    else
    { type = 'riptide_video'
    }

    _this._correctTime = void 0
    _this.jqHandle.load( 
      type
    , src
    , { startTime:Math.abs(_this.time.val) * _this.duration.val
        || ( cases.$isUpgraded.val ? 0.00000000000000000000000001 : void 0 )
      , simulcastApiKey: exports.settings.simulcastApiKey
      }
    , function( obj ) {
        _this._ready = true
        app.playing.from.val = !( cases.phoneBrowser && _this.playing )
        if(_this._correctTime !== void 0)
        { setTime.call(_this, Math.abs(_this._correctTime), true )
        }
      }
    )
  }
}

exports.play = function( val ) {
  var _this = this
    , src
    , type

  if ( val ) //play
  {
    if( !_this.jqHandle || !_this.__src ) {
      
      src = _this.src.val
      _this.__src = src

      if( !_this.jqHandle ) {
        createPlayer(_this, function(){
          initVideo( _this, src )
        } )
      }else{
        initVideo( _this, src )
      }
    } 
    else if( _this.jqHandle )
    {
      if( _this.tset )
      {
        setTime.call(_this, Math.abs(_this.time.val) * _this.duration.val, true )
      }
      _this.jqHandle.play()
    }
    _this.tset = null
  }
  else if( _this.jqHandle )
  {
    _this.jqHandle.pause()
  }
}

exports.volume = function(val) {
  var volume = val.val
  if( this.jqHandle && !isNaN(volume) ) this.jqHandle.setVolume( volume )
}

exports.time = 
{ set: setTime
, get: function( val ){
    var time = this.jqHandle && this.jqHandle.getCurrentTime()
    // domLogger( 'time: ' + time + ' duration: ' + this.duration.val + 'handle: ' + this.jqHandle )
    return time / this.duration.val || val.val
  } 
}

exports.remove = function(val) {
  if( this.jqHandle ) this.jqHandle.destroy()
  this.jqHandle = null
  this.video = null
}

exports.src = function( val ) {
  src = val.val
  if ( this.__src !== src ) {
    this.__src = null
    if( this.jqHandle )
    {
      // initVideo( this, src )
      this.jqHandle.destroy()
      this.jqHandle = null
      this._ready = null
    }else if( cases.phoneBrowser && this.rendered ){
      var _this = this
      createPlayer(_this, function(){
        initVideo( _this, src )
      } )
    }
  }
}
},{"vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/element/video/html5":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/video/html5.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js"}],"/Users/youzi/dev/mtv-play/components/player/seekbar/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/') //  replace app stuff with parent
  , ua = require('vigour-js/browser/ua')
  , cases = require('vigour-js/browser/cases')
  , videoUtil = require('vigour-js/browser/element/video/util')
  , Icon = require('../../icon')
  // , Loader = require('../loader')

  , _limitUpdates = ua.platform === 'ios' || ua.platform === 'android'

  , seekbar = new Element(
    { css:'ui-seekbar'
    , bg:{}
    , seek:
      { w:
        { data:'mediausage.time'
        , transform:function(v,cv){
            if( cv ){
              return Math.abs(cv) * 100 + '%'
            }
          }
        }
      }
    , '!tv.button':
      { display:
        { val:'inline-block'
        , $isPlayingAd:'none'
        , $isReceiver:'none'
        }
      }
    , events:
      { down:cases.touch
        ? function(e){
            var overlayOpacity = this.parent.parent.parent.opacity
            if(!overlayOpacity || overlayOpacity.val === 1) setTime.call(this, e)
            else this._skipUp = true
          }
        : setTime
      , drag:setTime
      , up:cases.touch
        ? function(e){
            var overlayOpacity = this.parent.parent.parent.opacity
            if(!this._skipUp) setTime.call(this, e)
            else this._skipUp = null
          }
        : setTime
      }
    })

module.exports = exports = seekbar.Class

function setTime(e) {
  if( cases.$isPlayingAd.val ) return

  var rect = this.node.getBoundingClientRect()
    , x
    , nr

  if(this._left){
    x = rect.top
    nr = (e.y-x)/rect.height
  }else if(this._right){
    x = rect.top
    nr = (rect.height-(e.y-x))/rect.height
  }else{
    x = rect.left
    nr = (e.x-x)/(rect.right-x)
  }

  var val = nr > 1 ? 1 : nr < 0 ? 0 : nr
  if( val !== this._prevVal )
  {
    this.seek.data.mediausage.$userOrigin.set('time',val)
    this._prevVal = val
  }
}
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/player/seekbar/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/element/video/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/video/util.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js"}],"/Users/youzi/dev/mtv-play/components/player/seekbar/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/player/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/player/video/index.js":[function(require,module,exports){
var app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')
  , Video = require('vigour-js/browser/element/video')
  , html5 = require('../players/html5')
  , postpone = require('vigour-js/browser/events/util').postpone
  , playTv = postpone(function(t) {
      if( app.playing.val ) t.play(true)
    },501)

module.exports = new Video(
{ node:'div'
, player:html5
, src:{ data:'media.video' }
, duration:
  { data:'media.duration'
  }
, css:'video-container'
, time:
  { data:'mediausage.time'
  , defer:function( update, args){
      if( cases.$isOnChannel.val || cases.$isPlayingAd.val ) return true
      update()
    }
  }
, volume:{ data:'volume' }
, $play:{
    defer:function( update ){
      var video = this._caller
      if( app.state.val === 'second' ) return true
      if( cases.desktop ){
        window.requestAnimationFrame(function(){
          if( video.rendered ) update()
          else update( true )
        })
      } else {
        update()
      }
    }
  }
, model:
  { subscription:
    { videolang:true
    , access:true
    , video:true
    , mrss:true
    }
  }
, events:
  { src:function( src ){
      cases.$isPlayingAd.val = false
      if( src.val && ( cases.tv || cases.$isReceiver.val ) && this.rendered )
      {
        var usage = this.data && this.data.mediausage
        app.playing.from.val = true
        if( usage && !cases.$isOnChannel.val ) usage.from.set('time', Math.abs( this.time.from.val ) )
        this.play()
      }
      else
      {
        app.playing.from.val = false
      }
    }
  , progress:function( p, b ){
      var time = -Math.abs( p )
        , usage = this.data && this.data.mediausage
        , overlay
      if( cases.$isPlayingAd.val )
      {
        // console.log('advertisement time!!')
        // usage.from.set('adTime', time )
        // if( this.video ) usage.from.set('adDuration', this.video.duration )
      }
      else if( cases.$isOnChannel.val )
      {
        // overlay = getOverlay.call( this )
        // if( overlay ) overlay.opacity = 0
      }
      else if( usage )
      {
        if(app && app.mediaTime) app.mediaTime.val = time
        usage.from.set('time', time ) //set minus for no update! 
      }

    }
  , play:function(){
      var overlay = getOverlay.call( this )
      if( overlay) overlay.opacity = this.playing ? 0 : 1
      if( cases.$isOnChannel.val && this.playing && app && app.mediaTime ){
        app.mediaTime.val = -0.01
      }
    }
  , stalled:function(){
      var overlay = getOverlay.call( this )
        // , playloader = getLoader.call( this, overlay )
      if( overlay && !cases.chromecast ) overlay.opacity = 1
      // if( playloader ) playloader.load()

      cases.$isLoadingVideo.val = true
    }
  , seeking:function( val ){
      if( !this._notRendered && this.rendered ){
        var overlay = getOverlay.call( this )
          // , playloader = getLoader.call( this, overlay )
        if( overlay ) overlay.opacity = 1
        // if( playloader ) playloader.load()

        if( app.playing.val ) { 
          if( !this.__paused ) this.pause(true)
          playTv(this)
        }

        cases.$isLoadingVideo.val = true
      }else{
        this._notRendered = true
      }
    }
  , canplay:function(){}

  }
}).Class

function getOverlay(){
  return this._overlay || ( this._overlay = this.parent && this.parent.overlay )
}

// function getLoader( overlay ){
//   return overlay && ( this._playloader || ( this._playloader = overlay.controls.left || overlay.clickable.buttons.play ))
// }
},{"../players/html5":"/Users/youzi/dev/mtv-play/components/player/players/html5.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/element/video":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/video/index.js","vigour-js/browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js"}],"/Users/youzi/dev/mtv-play/components/player/volume/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')

var volume = new Element(
{ css:'player-volume'
, w:50
, events:
  { down:setVol
  , drag:setVol
  , up:setVol
  }
})

volume.extend(
{ bars: function(val) {
    var val = val.val
      , bars = this.children
      , width = 28 + 5
      , volume = width*(isNaN(val) ? 1 : val) + 5
    for(var i in bars){
      volume -= width/5
      bars[i].nested.x = -3 + Math.min(volume,3)
    }
  }
})

var five = 5
while(five--) volume.add(new Element({nested:{}}))

module.exports = volume.Class

function setVol(e){
  var rect = this.node.getBoundingClientRect()
    , x = rect.left
    , nr = (e.x-x)/this.w.val

  this.data.volume.from = nr > 1 ? 1 : nr < 0 ? 0 : nr
}
},{"./style.less":"/Users/youzi/dev/mtv-play/components/player/volume/style.less","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/player/volume/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/popup/article.js":[function(require,module,exports){
//anim up op phone
// anders scale en fade
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , Item = require('../item')
  , cases = require('vigour-js/browser/cases')
  , Img = require('../img')
  , Page = require('./page')

//deze heeft als special dat de topbar title dynamisch is
module.exports = exports = new Page(
{ css:'popup-article'
, img: new Img.Relative(
	{ h:190
	, display:
		{ data:'img'
		, transform: function(c, cv)
			{ return cv ? 'block' : 'none'
			}
		}
	}) //ook liever relative
, title: { text: { data: 'title' } }
, body: {text: { data: 'text' } }
}).Class



},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/auth.js":[function(require,module,exports){
//anim up op phone
// anders scale en fade
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , Input = require('../text/input')
  , Item = require('../item')
  , Page = require('./page')
  , app = require('vigour-js/app/')
  , FacebookBtn

//user.activeDevices  // TODO SAME AS IN MENU >> UNITE
var Term = new Element(
{ 'events.click': function() {
    var popup = this.checkParent( 'on.popup' , true ).from
      , user = app.user //TODO: fix
    popup.previous = popup.val
    popup.data = app.content.get( [ this._name, 'list', '0' ] )
    popup.val = 'article'
  }
, css: 'term'
}).Class

exports.FbButton = new Button(
{ 'events.click': function() {
    var api = this.checkParent( 'api', true )
    api.facebook.login.val = true
  }
}).Class

exports.GetApp = new Page({
  css:'getapp'
//, platform:{}
, on:
  { $parent:
    { defer:function( update ){
        var topbar = this._parent._caller.checkParent('topbar',true)
        if(topbar)
        { 
          topbar.empty()
          topbar.node.style.backgroundColor = '#3a1a58'
        }
        update()
      }
    }
  }
, info: 
  { title: {
     'text.dictionary': 'text.register.redirectTitle'
    }
  , subtitle: {
      'text.dictionary' : 'text.register.redirectSubtitle'
    }
  , freepass: {}
  }
, 'ios.teleport': new Button(
  { text: { dictionary: 'text.register.redirectTeleport' }
  , 'events.click': function() {
      window.location.href = 'fb709421825777638://'
    }
  })
}).Class

var Conditions = new Element(
{ top:{ text:{dictionary:'text.signInTOS'} }
, items:
  { privacy:new Term({ text:{ dictionary:'text.privacy' } })
  , terms:new Term({ text:{ dictionary:'text.terms' } })
  }
}).Class

exports.Login = new Page(
{ css:'login'
, logo:{}
, '!windowsMobile.facebook': new exports.FbButton(
  { 'text.dictionary' : 'text.account.signin.facebook'
  })
, email: new Button(
  { text: { dictionary: 'text.account.signin.email' }
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.val = 'loginEmail'
    }
  })
, conditions:new Conditions({css:'alignedTop'})
}).Class

exports.Login.Email = new Input.Form(
{ css:'login'
, scrollbar:'y'
, x:{translate:true}
, email: new Input({
    input: 'email'
    //verification add later!
  })
, password: new Input({
    input: 'password'
  })
, 'desktop.confirm': new Button(
  { text: { dictionary: 'text.account.signin.title' }
  , 'events.confirm': function() {
      var form = this.parent
      form.done.call(form)
    }
  })
, conditions:new Conditions()
, verify:[ 'email', 'password' ]
, bottom: {
    'text.dictionary': 'text.account.forgot.title'
  , 'events.click': function() {
      var api = this.checkParent( 'api', true )
      api.password.forgot.val = this.parent.email.val
    }
  }
, define:
  { done:function(){
      if( this.verified ) 
      {
        var api = this.checkParent( 'api', true )
        api.login.val = {
          email: this.email.val
        , password: this.password.val
        }
      }
      else 
      {
        //check password etc
        // app.notification.type = 'email'
        app.notification.val = 'invalid'
      }
    }
  }
}).Class

var RegisterConditions = new Conditions(
{ top:
  { text:
    { dictionary:'text.termsOfService'
    }
  }
}).Class

exports.Register = new Page(
{ css:'register'
, logo:{}
, '!windowsMobile.facebook': new exports.FbButton(
  { 'text.dictionary' : 'text.account.signup.facebook'
  })
, email: new Button(
  { text: { dictionary: 'text.account.signup.email' }
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.val = 'registerEmail'
    }
  })
, conditions:new RegisterConditions(
  { css:'alignedTop'
  })
}).Class

exports.Register.Email = new Input.Form(
{ css:'register'
, scrollbar:'y'
, x:{translate:true}
, email: new Input({
    input:'email'
    //verification add later!
  })
, password: new Input({
    input: 'password'
  })
, repeatPassword: new Input({
    input: { val: 'password', text: 'text.repeatPassword' }
  })
, verify:[ 'email', 'password', 'repeatPassword' ]
, 'desktop.confirm': new Button(
  { text: { dictionary: 'text.next' }
  , 'events.confirm': function(){
      var form = this.parent
      form.done.call(form)
    }
  })
, conditions:new RegisterConditions()
, define:
  { done:function(){

      if( this.verified ) 
      {
        if( this.password.val === this.repeatPassword.val )
        {
          var popup = this.checkParent('on.popup', true ).from
          popup.data =
          { email: this.email.val
          , password: this.password.val
          }
          popup.val = 'registerNewsletter'
        }
        else
        {
          app.notification.val = 'noMatchPassword'
        }
      }
      else 
      {
        app.notification.type = this.verificationError && this.verificationError.val
        app.notification.val = 'invalid'
      }

    }
  }
}).Class

var NewsLetterButton = new Item.Switcher({
  txt:
  { 'title.text.dictionary': 'text.newsletterTitle'
  , 'subtitle.text.dictionary': 'text.newsletterSubtitle'
  }
// , switchOn: true
, 'events.click':function() {
    if(!this.parent.data) this.parent.data = {}
    var data = this.parent.data
    data.newsletter = !this.righticon.hold.switchOn.val
    this.righticon.hold.switchOn = data.newsletter
  }
, add: [ new Icon({ name:'lefticon',icon:'newsletter' }), 'txt' ]
}).Class

var Dropdown

if(cases.phone && cases.native)
{
  var dropdownMenu = new Element(
  { css:'auth-dropdown'
  , position:'absolute'
  , y:
    { animation:
      { time:18
      , easing:'outCubic'
      , done:function(){
          if(this._remove) this.remove()
        }
      }
    }
  , model:
    { complete:function(){
      var _this = this
        window.requestAnimationFrame(function(){
         _this.y = {sub:_this.node.offsetHeight}
       })
      }
    }
  }).Class

  function removeDropdown(){
    app.dropdown._remove = true
    app.dropdown.y = {sub:0}
    app.dropdownBackdrop.remove()
  }

  Dropdown = new Item.IconLeft(
  { lefticon:{icon:'newsletter'}
  , txt:
    { css:{data:'value', transform:function(v,cv){
        return cv.trim() === 'txt' ? 'inactive' : ' '
      }}
    , text:{dictionary:{data:'dictionary'}}
    , model:{inherit:false}
    }
  , model:function( data ){
      if(data instanceof Array) this.txt.data = data[0]
    }
  , 'events.click':function(){
      if(!app.dropdown)
      {
        var form = this.parent
          , name = this._name
          , data = this.data

        if(!this._dData) this._dData = data.splice(1)

        app.set(
        { dropdownBackdrop:
          { css:'relative-size'
          , 'events.click':removeDropdown
          }
        , dropdown:new dropdownMenu(
          { y:app.h
          , collection:
            { data:true
            , element:new Element(
              { text:{dictionary:{data:'dictionary'}}
              , 'events.click':function(){
                  if(!form.data) form.data = {}
                  form.data[ name ] = this.data.value
                  form[ name ].txt.data = this.data
                  removeDropdown()
                }
              })
            }
          , data:this._dData
          })
        })
      }
    }
  }).Class
}
else
{
  Dropdown = new Item(
  { select:
    { node: 'select'
    , collection:
        { data: true
        , element:new Element(
          { node: 'option'
          , attr:
            { value: { data: 'value' } }
          , text:{ dictionary:{ data: 'dictionary'} }
          })
        }
      }
  , 'events.change': function( e ) {
      if(!this.parent.data) this.parent.data = {}
      this.parent.data[ this._name ] = e.target.value
    }
  , add:[ new Icon({ name:'lefticon',icon:'newsletter' }) , 'select' ]
  }).Class
}

function confirmRegisterNewsletter() {
  var api = this.checkParent( 'api', true )
    , parent = this.parent
  if(!parent.data) parent.data = {}
  api.register.val = parent.data
}

exports.Register.Newsletter = new Input.Form(
{ css:'register newsletter'
, scrollbar:'y'
, x:{translate:true}
, age: new Dropdown(
  { 'on.$render.defer': function( update ) {
      this._parent._caller.data =
      [ { value: '' , dictionary:'text.age' }
      , { dictionary: 'options.age.0.text', value:'1' } //you can put any integer value in min_age and max_age
      , { dictionary: 'options.age.1.text', value:'2' }
      , { dictionary: 'options.age.2.text', value:'3' }
      ]
      update()
    }
  , lefticon: {icon: 'age'}
  })
, gender: new Dropdown(
  { 'on.$render.defer': function( update ) {
      this._parent._caller.data =
      [ { value: '' , dictionary: 'text.gender' }
      , { value: 'male' , dictionary: 'options.gender.0.text' }
      , { value: 'female' , dictionary: 'options.gender.1.text' }
      , { value: 'other', dictionary: 'options.gender.2.text' }
      ]
      update()
    }
  , lefticon: {icon: 'gender'}
  })
, newsletter:  new NewsLetterButton()
, 'desktop.confirm': new Button(
  { text: { dictionary: 'text.account.signup.title' }
  , 'events.confirm': function(){
      var form = this.parent
      form.done.call(form)
    }
  })
, conditions:new RegisterConditions()
, define:
  { done:function confirmRegisterNewsletter() {
      var api = this.checkParent( 'api', true )
      if(!this.data) this.data = {}
      api.register.val = this.data
    }
  }
}).Class

//not used?
exports.Register.Success = new Page(
{ css:'register'
, text: { dictionary: 'fill in stuff' }
, email: new Button(
  { text: { dictionary: 'email is verified' }
  , 'events.click': function() {
      var api = this.checkParent( 'api', true )
        , popup = this.checkParent( 'on.popup', true ).from

      api.login.val =
      { email: api.register.email.val
      , password: api.register.password.val
      }

      api.login.once(function( val ) {
        if( val === 'success' ) popup.val = 'profile'
      })
    }
  })
}).Class

exports.PasswordReset = new Input.Form(
{ css:'register'
, scrollbar:'y'
, x:{translate:true}
, password: new Input({
    input: 'password'
  })
, repeatPassword: new Input({
    input: { val: 'password', text: 'text.repeatPassword' }
  })
, 'desktop.confirm': new Button(
  { text: { dictionary: 'text.account.passwordReset' }
  , 'events.confirm': function(){
      var form = this.parent
      form.done.call(form)
    }
  })
, define:
  { done:function(){
      if( this.password.val === this.repeatPassword.val )
      {
        var api = this.checkParent( 'api', true )
        api.password.reset.val = { password: this.password.val }
      }
      else
      {
        app.notification.val = 'noMatchPassword'
      }
    }
  }
}).Class

},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../text/input":"/Users/youzi/dev/mtv-play/components/text/input.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/buy.js":[function(require,module,exports){
//anim up op phone
// anders scale en fade
var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app')
  , Button = require('../button')

module.exports = exports = new Element(
{ css:'upgrade'
, block: 
  { img:{}
  }
, 'bottom.text.dictionary':'text.legalContainer'
, continue:new Button({'text.dictionary':'text.continue'})
}).Class

exports.Monthly = new exports(
{ block:
  { 'title.text.dictionary': 'text.purchase.monthlyPass.title'
  , 'txt.text.dictionary': 'text.purchase.monthlyPass.body'
  }
, 'continue.events.click':function(){
    var api = this.checkParent( 'api', true )
    api.purchase.val = { subscription: 'monthly' }
  }
}).Class

exports.Single = new exports(
{ block:
  { 'title.text.dictionary': 'text.purchase.singlePass.title'
  , 'txt.text':
    { dictionary: 'text.purchase.singlePass.body'
    , add:
      [' '
      , app.api.price.single
      ]
    }
  }
, 'continue.events.click':function(){
    var api = this.checkParent( 'api', true )
    api.purchase.val = { product: app.user.navigation.media.from }
  }
}).Class

exports.Yearly = new exports(
{ block:
  { 'title.text.dictionary': 'text.purchase.yearlyPass.title'
  , 'txt.text.dictionary': 'text.purchase.yearlyPass.body'
  }
, 'continue.events.click':function(){
    var api = this.checkParent( 'api', true )
    api.purchase.val = { subscription: 'yearly' }
  }
}).Class
},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/devices.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , Item = require('../item')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , config = require('vigour-js/util/config')
  , ua = require('vigour-js/browser/ua')
  , raf = require('vigour-js/browser/animation/raf')
  , Page = require('./page')
  , app = require('vigour-js/app/')
// $contains: '(desktop)|(tv)|(cast)|(tablet)|(airplay)'
// activeDevices: 'activeDevices'

module.exports = exports = new Page(
{ css:'devices'
, myDevice:
  { icon:new Icon({ icon:ua.device }) //user.cloud.client.from.device?
  , dInfo:
    { dTitle: { 'text.dictionary': 'text.thisDevice' }
    , dSubtitle:
      { text: cases.touch
        ? ua.device + ' ' 
          + (ua.platform === 'ios' 
            ? 'iOS' : ua.platform) + (ua.version ? ' ' + ua.version 
            : '')
        : ua.platform + ' ' + ua.browser + ' ' + ua.version
      }
    }
  }
, middle:
  { display:{ val: 'block', $hasDevices: 'none' }
  , icon: new Icon({ icon:'monster' })
  , 
  }
, listTitle:
  { 'text.dictionary': 'text.available'
  , display: { val: 'none', $hasDevices: 'block' }
  }
, list:
  { display: { val: 'none', $hasDevices: 'block' }
  , collection: 
    { element:new Item.IconLeft(
      { 'model': function( data ) {

           if( data && data.from 
             && data.from.device 
             && !/(desktop)|(tv)|(cast)|(tablet)|(airplay)/.test( data.from.device.val ) 
           ) 
           {
            this.opacity = 0.5
           }
           // receiver.$userOrigin = this.data.from  
        }
      , events:
        { click: function(){
          var user = this.checkParent( 'on.user', true )._val
          var client = this.data.from
          // var receiver = user.receiverClient            

            if( /(desktop)|(tv)|(cast)|(tablet)|(airplay)/.test( client.device.val )  )
            {
              // <<<<<<<<<< here 
              user.setReceiver(client)
              // receiver.$userOrigin = this.data.from  
            }
          } 
        }
      , display:
        { data:'title'
        , transform:function( v,cv ){
            return cv ? 'table' : 'none'
          }
        }
      , lefticon:
        { icon:
          { data:
            { val: function( data ) {
                var device = data && data.from && data.from.device && data.from.device.val
                return device === 'chromecast' ? 'cast' : device
              }
            , listen:'device'
            }
          }
        }
      })
    , data:true
    // , filter:
    //   { condition: { device:{ $ncontains:'cast' } } 
    //   }
    }
  }
, info:
  { display:{ val: 'block', $hasDevices: 'none' }
  , 'title.text.dictionary': 'text.watchBigger'
  , 'description.text.dictionary': 'text.watchBig'
  }
, learn: new Button(
  { display:{ val: 'block', $hasDevices: 'none' }
  , 'text.dictionary': 'text.learnMore'
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.previous = 'devices'
      popup.val = 'faq'
    }
  })
, on:
  { $render:
    { defer: function() {
        var caller = this._parent._caller
        caller.on.devices._val._update()
      }
    }
  , devices:
    { defer: function( update ) {
        var caller = this._parent._caller
        caller.on.receiver._update()
        caller.data = this.from
        update()
      }
    }
  , receiver: {
      defer: function( update ) {
        var _this = this
        //TODO: get rid of this raf
        raf( function() {
          if(_this._parent) 
          {
            var caller = _this._parent._caller
              , receiver = caller.checkParent( 'on.user', true )._val.receiverClient
              , elem = caller.list.find('_d.from', receiver.from )
            if( elem ) 
            { 
//               console.error('WO IS DER MAINSCREEN3?')
              if( _this.focus && _this.focus._node ) 
              {
                _this.focus.css = { removeClass: 'current' }
              }
              _this.focus = elem
              elem.css = { addClass: 'current' }
            } 
            else if( _this.focus ) {
              if( _this.focus && _this.focus._node ) 
              {
                _this.focus.css = { removeClass: 'current' }
                _this.focus = null
              }
            }
          }
          update()
        } )
      }
    }
  }
}).Class

},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/faq.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , Icon = require('../icon')
  , Item = require('../item')
  , Page = require('./page')
  , app = require('vigour-js/app/')

module.exports = new Page(
{ css:'faq'
, scrollbar: 'y'
, on: {
    $parent: {
      defer: function( update ) {
        //TODO: replace /w parent checker
        this._parent._caller.data = app.content.from.get('faq.list')
        update()
      }
    }
  }
, collection: {
    data:true
  , element: new Item.IconRight(
    {'events.click': function() {
        popup = this.checkParent( 'on.popup', true ).from
        popup.previous = 'faq'
        popup.data = this.data
        popup.val = 'article'
      }
    })
  }
}).Class

},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/index.js":[function(require,module,exports){
require( './style.less' )

var Element = require( 'vigour-js/app/ui/element' )
  , util = require( 'vigour-js/util' )
  , app = require( 'vigour-js/app/' )
  , Icon = require( '../icon' )
  , cases = require( 'vigour-js/browser/cases' )
  , Switcher = require( 'vigour-js/app/ui/switcher' )
  , auth = require( './auth'  )
  , Settings = require( './settings' )
  , Profile = require( './profile' )
  , Share = require( './share' )
  , Devices = require( './devices' )
  , Roadblock = require( './roadblock' )
  , Article = require( './article' )
  , Languages = require( './languages' )
  , Faq = require( './faq' )
  , Wifi = require( './wifi' )
  , Newsletter = require( './newsletter' )
  , mobile = require( './mobile' )
  , Intro = require( './intro' )
  , Upgrade = require( './upgrade' )
  , Buy = require( './buy' )
  , Page = require('./page')
  , GetApp = auth.GetApp
  // , ua = require('vigour-js/browser/ua')
  // , firefox = ua.browser === 'firefox'
  // , raf = require('vigour-js/browser/animation/raf')

//TODO: doe dit allemaal lazy!

//popup states
/*
[ 'login'
, 'loginEmail'
, 'signup'
, 'share'
, 'roadblock'
, 'settings'
, 'verifyMtvmobile'
, '4g/wifi'
, 'language'
, 'upgrade'
, 'profile'
, 'devices'
, 'register'
, 'registerEmail'
, 'registerEmailSuccess'
]

many more!
ook nog terms
, 'term' (link)
, episode buy / roadblock
*/
var popupWidth = cases.phone
  ? app.w.val
  : 400

//popup data
exports = new Element(
{ css:'popup-window'
, on: 
  { $new:
    { defer:function( update ){
        var caller = this._parent._caller
        if( app.popup.val === 'languages' ) caller.y._p = true
        window.requestAnimationFrame(function(){
          if(caller.y) caller.y._p = false
        })
        update()
      }
    }
  , loading: 
    { defer:function( update, args ) {
        // this.clearCache()
        if( !this._parent._caller ) {
          return true
        }
        if( args[0] && ( args[0]===true || typeof args[0] === 'string' )) {
          this._parent._caller.overlay.display = 'block'
        } else {
          this._parent._caller.overlay.display = 'none'
        }
        update()
      }
    }
  , popup: {
      defer:function( update ) {
        var val = this.from.val
          , parent = this._parent
          , _caller = parent._caller
          , overlay = parent.overlay._val
          , user = parent.user._val
          , receiver = user.receiverClient

        var types =
            { verifyMobile:
              { dictionary: 'text.mtvMobile'
              , element: mobile.Verify
              }
            , countryCodes: 
              { dictionary: 'text.chooseTelCode'
              , element: mobile.CountryCodes
              , previous: 'verifyMobile'
              }
            , share:
              { dictionary: 'text.share'
              , element: Share
              }
            , wifi:
              { dictionary: 'settings.connectivity'
              , element: Wifi
              , previous: 'settings'
              }
            , newsletter:
              { dictionary: 'text.newsletterTitle'
              , element: Newsletter
              , previous: 'settings'
              }
            , roadblock:
              { dictionary: 'text.oops'
              , element: Roadblock
              }
            , roadblockUpgrade:
              { dictionary: 'text.buyPremium'
              , element: Roadblock
              }
            , roadblockMedia: 
              { dictionary: 'text.lockedEpisode'
              , element: Roadblock.Media
              }
            , article:
              { title: this.val !== 'faq'
              , element: Article
              , dictionary:'settings.help'
              }
             , getApp:
              { dictionary: 'text.getapp'
              , element: GetApp
              }
            , devices: {
                dictionary: 'text.devices'
              , element: Devices
              , params:
                { on:
                  { receiver: receiver
                  , devices: user.devices  //user.availableClients
                  }
                }
              }
            , loginEmail:
              { dictionary: 'text.account.signin.title'
              , element: auth.Login.Email
              , previous: 'login'
              , righticon:
                { icon:{icon:'empty'}
                , text:{dictionary:'text.done'}
                }
              }
            , passwordReset:
              { dictionary: 'text.account.passwordReset'
              , element: auth.PasswordReset
              }
            , login:
              { dictionary: 'text.account.signin.title'
              , element: auth.Login
              }
            , registerEmail:
              { dictionary: 'text.account.signup.title'
              , element: auth.Register.Email
              , previous: 'register'
              , righticon:
                { icon:{icon:'empty'}
                , text:{dictionary:'text.next'}
                }
              }
             , registerSuccess:
              { dictionary: 'text.account.signup.success'
              , element: auth.Register.Success
              }
             , registerNewsletter:
              { dictionary: 'text.account.signup.title'
              , element: auth.Register.Newsletter
              , previous: 'registerEmail'
              , righticon:
                { icon:{icon:'empty'}
                , text:{dictionary:'text.done'}
                }
              }
            , register:
              { dictionary: 'text.account.signup.title'
              , element: auth.Register
              }
            , upgrade:
              { dictionary: 'text.upgrade'
              , element: Upgrade
              }
            , settings:
              { dictionary: 'text.nav.settings'
              , element: Settings
              }
            , profile:
              { dictionary: 'text.profile'
              , element: Profile
              , params:
                { data:
                  { email: user.email
                  , pic: user.profilePic
                  }
                }
              }
            , languages:
              { dictionary: 'text.settings.languages.title'
              , element: Languages
              , previous: 'settings'
              , params:
                { on:
                  { language: app.language
                  }
                }
              }
            , faq:
              { dictionary: 'settings.help'
              , element: Faq
              , previous: 'settings'
              }
            , intro:
              { dictionary: false
              , element: Intro
              }
            , getStarted:
              { dictionary: 'text.mtvMobile'
              , element: Intro.getStarted
              }
            , getStartedContinue:
              { dictionary: 'text.account.signup.title'
              , element: Intro.getStartedContinue
              , previous: 'intro'//'getStarted'
              }
            , buyMonthly:
              { dictionary: 'text.upgrade'
              , element: Buy.Monthly
              , previous: 'upgrade'
              }
            , buySingle:
              { dictionary: 'text.lockedEpisode'
              , element: Buy.Single
              , previous: 'roadblockMedia'
              }
            , buyYearly:
              { dictionary: 'text.upgrade'
              , element: Buy.Yearly
              , previous: 'upgrade'
              }
            }
          , type

        if( !val )
        {
          overlay.val = false
          if( !cases.phone )
          {
            // _caller.scale = 0
            // _caller.display = 'none'
            _caller.remove()
          }
          else {
            _caller.y = app.h
          }
          update(true)
        }
        else
        {
          //TODO: listener voor sets on top als property
          overlay.val = 'popup'
          //make selection using ifs and lazy
          type =  types[ this.from.val ]


          if( type )
          {

            if( this.from.previous ) {
              type.previous = this.from.previous
              this.from.previous = null
            }

            //this.from.title

            if( type.title && this.from.data ) {
              _caller.topbar.holder.title.text = this.from.data.get('title')
            } else {
            _caller.topbar.holder.title.text = type.dictionary !== false
              ? { dictionary: type.dictionary || this.from.val }
              : ''
            }

            var transition = {
              element: type.element
            }

            if( this.from.data ) {
              transition.$params = { data: this.from.data }

              if( type.params ) util.merge( transition.$params, type.params )

              // this._currentData = this.from.data
              // this.from.data = null 
              //now it never removes data........
              //TODO: hotfix think of a solution
              //maybe just tell when a type has to clear data

            }else if( type.params ) {
              transition.$params = type.params
              this.from.data = null 
            }  else {
              this.from.data = null 
            }

            if(!type.previous)
            {
              _caller.topbar.holder.lefticon.icon = 'empty'
            }
            else
            {
              _caller.topbar.holder.lefticon.icon = 'arrowleft'
              _caller.switcher.previous = type.previous
            }

            if(!cases.desktop)
            {
              if(type.righticon)
              {
                _caller.topbar.holder.righticon.set(type.righticon)
              }
              else
              {
                _caller.topbar.holder.righticon.set(
                { icon:{icon:'close'}
                , text:''
                , css:''
                })
              }
            }

            _caller.switcher.transition = transition
            update()

          }
          else
          {
            void(0)
            update( true )
          }

        }
      }
    }
  }
, position:'absolute'
, phone:
  { w:app.w
  , h:app.h
  , y:
    { val:0
    , animation:
      { time:app.h.val / 30
      , start:app.h
      , easing:'outCubic'
      , done:function(cv) {
          var t = this
          if(cv>=100) t.remove()
        }
      }
    }
  }
, '!phone':
  { w: { val:app.w, sub:30, max:400 }
  , h: { val:app.h, sub:30, max:600 }
  , x: { val:app.w, sub: { self:'w' }, divide:2 }
  , y: { val:app.h, sub: { self:'h' }, divide:3, min:15 }
  , '!android.opacity':
    { val:1
    , animation:
      { time:15
      , start:0
      , easing:'outCubic'
      }
    }
  }
, topbar:
  { css:'first-topbar'
  , h:
    { val:40
    , phone:{iosFull:60}
    }
  , holder:
    { lefticon: new Icon(
      { icon: 'arrowleft'
      , 'events.click':function(){
          this.checkParent('switcher',true).back()
        }
      })
    , title:{text: ''}
    , righticon:
      { icon: new Icon({ icon:'close' })
      , text:''
      , 'events.click': cases.desktop
        ? function( e ){
            e.preventDefault()
            this.checkParent('on.popup', true).from = false
          }
        : function( e ) {
            e.preventDefault()
            var page = this.checkParent('switcher',true)._swElem
//             console.log(page.done)
            if(page && page.done) page.done.call(page)
            else this.checkParent('on.popup', true).from = false
          }
      }
    }
  }
, switcher: new Switcher(
  { node:'div'
  // , css:firefox && 'firefox'
  , on:
    { $remove:
      { defer:function( update ){
          var caller = this._parent._caller
          if(caller._timer) clearTimeout(caller._timer)
          update()
        }
      }
    }
  , h:
    { parent:'h'
    , sub:
      { val:40
      , phone:{iosFull:60}
      }
    }
  , onTransition: cases.slow
    ? function( current,last,direction ){
        if(last) last.remove()
        this.add(current)
      }
    : function( current,last,direction, options ){
        direction = app.popup.direction !== void 0 ? app.popup.direction : 1
        app.popup.direction = void 0
        if(direction && last){
          current.x = 
          { val:0
          , animation:
            { start:direction === 1 ? popupWidth : -popupWidth
            , time:20
            , delay:1
            , easing:'outCubic'
            , done:function(){
                if(last) last.remove()
              }
            }
          }

          last.x =
          { val:direction === 1 ? -popupWidth : popupWidth
          , animation:
            { time:20
            , delay:1
            , easing:'outCubic'
            }
          }

          if(direction === -1) this.add(current,last)
          else this.add(current)

        }
        else
        {
          if(last) last.remove()
          this.add(current)
        }
      }
  , backFallback:function(){
      if( this.previous ) 
      {
        app.popup.direction = -1
        if( this.previous instanceof Object )
        {
          app.popup.data = this.previous.data
          app.popup.val = this.previous.val
        }
        else
        {
          app.popup.val = this.previous
        }
      }
    }
  })
, overlay:{ display: 'none' }
})

exports.topbar.holder.righticon.extend({ fn:function(){ } })

module.exports = exports.Class

},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./article":"/Users/youzi/dev/mtv-play/components/popup/article.js","./auth":"/Users/youzi/dev/mtv-play/components/popup/auth.js","./buy":"/Users/youzi/dev/mtv-play/components/popup/buy.js","./devices":"/Users/youzi/dev/mtv-play/components/popup/devices.js","./faq":"/Users/youzi/dev/mtv-play/components/popup/faq.js","./intro":"/Users/youzi/dev/mtv-play/components/popup/intro.js","./languages":"/Users/youzi/dev/mtv-play/components/popup/languages.js","./mobile":"/Users/youzi/dev/mtv-play/components/popup/mobile.js","./newsletter":"/Users/youzi/dev/mtv-play/components/popup/newsletter.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","./profile":"/Users/youzi/dev/mtv-play/components/popup/profile.js","./roadblock":"/Users/youzi/dev/mtv-play/components/popup/roadblock.js","./settings":"/Users/youzi/dev/mtv-play/components/popup/settings.js","./share":"/Users/youzi/dev/mtv-play/components/popup/share.js","./style.less":"/Users/youzi/dev/mtv-play/components/popup/style.less","./upgrade":"/Users/youzi/dev/mtv-play/components/popup/upgrade.js","./wifi":"/Users/youzi/dev/mtv-play/components/popup/wifi.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/app/ui/switcher":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/intro.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , Item = require('../item')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , Input = require('../text/input')
  , config = require('vigour-js/util/config')
  , Img = require('../img')
  , Page = require('./page')
  , app = require('vigour-js/app/')

var Slide = new Element(
{ img:new Img.Intro({
    on:{
      $new:{ //hot fix background is not set correctly
        defer:function(update){
          this._parent._caller.background.update()
          update()
        }
      }
    }
  })
}).Class

module.exports = exports = new Page(
{ on:
  { $parent:
    { defer:function( update ){
        var parent = this._parent
          , caller = parent._caller
          , topbar = caller.checkParent('topbar',true)
          , roll
        if( topbar )
        {
          roll = caller.roll
          caller._topbar = topbar
          roll._dots = new exports.Dots()
          topbar.node.style.backgroundColor = '#3a1a58'
          topbar.set(
          { holder:
            { title:
              { dots:roll._dots
              }
            }
          })
          roll.x = caller.parent.parent.w.val - 15
          parent.popup.val = app.popup
        }
        update()
      }
    }
  , popup:
    { defer:function( update, args ){
        var val = this._val._val
        if( val !== 'intro' )
        {
          var topbar = this._parent._caller._topbar
          if( topbar )
          {
            if(val === 'settings') topbar.node.style.backgroundColor = '#5d4078'
            topbar.holder.title.dots.remove()
          }
        }
        update()
      }
    }
  }
, roll:
  { css:'intro-roll'
  , x:
    { val:0
    , multiply:0
    , animation:
      { time:18
      , easing:'outCubic'
      , complete:function( cv ){
          var dots = this._dots.children
          for (var i = dots.length - 1; i >= 0; i--) {
            dots[i].css = i === -this._pos ? 'focus' : ''
          }
        }
      }
    }
  , append:
    [ Slide
    , { 'img.background':'1.png'
      , 'title.text.dictionary':'intro.welcome.title'
      , 'subtitle.text.dictionary':'intro.welcome.body'
      }
    , { 'img.background':'2.png'
      , 'title.text.dictionary':'intro.devices.title'
      , 'subtitle.text.dictionary':'intro.devices.body'
      }
    , { 'img.background':'3.png'
      , 'title.text.dictionary':'intro.connect.title'
      , 'subtitle.text.dictionary':'intro.connect.body'
      }
    , { 'img.background':'4.png'
      , 'subtitle.text.dictionary':'intro.free.body'
      , button:new Button(
        { 'text.dictionary':'intro.free.button'
        , 'events.click':function(){
            this.checkParent('on.popup', true).from = 'getStartedContinue'
          }
        })
      }
    ]
  , events:
    { grab:
      { x:true
      , up:setPosition
      }
    }
  }
}).Class

exports.getStarted = new Element(
{ css:'get-started'
, on:
  { $parent:
    { defer:function( update ){
        var parent = this._parent
          , caller = parent._caller
          , topbar = caller.checkParent('topbar',true)

        if( topbar )
        {
          topbar.node.style.backgroundColor = '#5d4078'
          caller._topbar = topbar
        }

        update()
      }
    }
  }
, 'title.text.dictionary':'intro.mobile.title'
, 'subtitle.text.dictionary':'intro.mobile.body'
, append:
  [ Button
  , { css:{addClass:'yes'}
    , 'text.dictionary':'intro.mobile.button'
    , 'events.click':function(){
        var popup = this.checkParent('on.popup', true).from
        popup.previous = popup.val
        popup.val = 'verifyMobile'
      }
    }
  , { css:{addClass:'skip'}
    , 'text.dictionary':'button.skip'
    , 'events.click':function(){
        this.checkParent('on.popup', true).from = false
      }
    }
  ]
}).Class

exports.getStartedContinue = new Element(
{ css:'get-started'
, on:
  { $parent:
    { defer:function( update ){
        var parent = this._parent
          , caller = parent._caller
          , topbar = caller.checkParent('topbar',true)
        if( topbar ){
          topbar.node.style.backgroundColor = '#5d4078'
          caller._topbar = topbar
        }
        update()
      }
    }
  }
, 'title.text.dictionary':'intro.register.title'
, 'subtitle.text.dictionary':'intro.register.body'
, append:
  [ Button
  , { css:{addClass:'facebook'}
    , 'text.dictionary':'text.account.signup.facebook'
    , 'events.click':function(){
        var api = this.checkParent( 'api', true )
        api.facebook.login.val = true
      }
    }
  , { css:{addClass:'email'}
    , 'text.dictionary':'text.account.signup.email'
    , 'events.click':function(){
        var popup = this.checkParent( 'on.popup', true ).from
        this.parent._topbar.node.style.backgroundColor = '#5d4078'
        popup.previous = popup.val
        popup.val = 'registerEmail'
      }
    }
  ]
, 'or.text.dictionary':'text.or'
, signin:new Button(
  {'text.dictionary':'text.account.signin.title'
  , 'events.click':function(){
      var popup = this.checkParent( 'on.popup', true ).from
      this.parent._topbar.node.style.backgroundColor = '#5d4078'
      popup.previous = popup.val
      popup.val = 'login'
    }
  })
}).Class

exports.Dots = new Element(
{ css:'intro-dots'
, append:
  [ Element
  , { css:'focus' }
  , {}
  , {}
  , {}
  ]
}).Class

function setPosition(e, d, ld){ // unify with switcher
  var treshold = 120
    , flick = 10
    , l = this.children.length
    , oldPos = this._pos || (this._pos = 0)
    , newPos = oldPos

  if(Math.abs(ld.x) > flick){
    if(ld.x < 0 && !(d.x > treshold)) newPos = Math.max(oldPos - 1,-l+1)
    if(ld.x > 0 && !(d.x < -treshold)) newPos = Math.min(oldPos + 1,0)
  }else{
    if(d.x < -treshold) newPos = Math.max(oldPos - 1,-l+1)
    if(d.x > treshold) newPos = Math.min(oldPos + 1,0)
  }

  if(this.x._e) this.x = {_esub:this.x._e._val}
  setPos(this,newPos)
}

function setPos(roll,newPos){
  var oldPos = roll._pos || (roll._pos = 0)
    , dts = roll._dots

  if(newPos !== oldPos){
    roll.x = {multiply:newPos}
    roll._pos = newPos
  }
}
},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../text/input":"/Users/youzi/dev/mtv-play/components/text/input.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/languages.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , Item = require('../item')
  , cases = require('vigour-js/browser/cases')
  , config = require('vigour-js/util/config')
  , raf = require('vigour-js/browser/animation/raf')
  , Page = require('./page')

//TODO: add config voor dingen als terms appName etc
//TODO add focus handler in vigour-js insta reuse for languages en devices list

module.exports = new Page(
{ css:'languages'
, on: {
    $parent: {
      defer: function( update ) {
        this._parent._caller.data = config.languages
        this._parent.language._update()
        update()
      }
    }
  , language: {
      //handig in het framework!
      defer: function( update ) {
        var _this = this
         raf( function() {
          if( !_this._parent ) 
          { 
            update( true ) 
          }
          else 
          {
            var caller = _this._parent._caller
              , language = (_this._parent._val || caller.checkParent( 'on.language', true ))
              , elem = caller.find( '_d', language.val )
            if( elem ) 
            {
              if( _this.focus && _this.focus._node ) 
              {
                _this.focus.css = { removeClass: 'current' }
              }
              _this.focus = elem
              elem.css = { addClass: 'current' }
            }
            update()
          }
        })
      }
    }
  }
, collection: {
    data:true
  , element: new Item({
      'title.text': { 
        data:true
      , dictionary: function( val, cv ) {
          //pretty advanced flag also does the listening
          return cv && 'text.languages.'+cv+'.title'
        }
      }
    , 'events.click': function() {
        var language = this.checkParent( 'on.language', true )
          , popup = this.checkParent( 'on.popup', true ).from
        //TODO: data en strings bug fix doe er wat aan!
        language.$userOrigin.val = String(this.data)
        popup.direction = -1
        popup.val = 'settings'
      } 
    })
  }
}).Class

},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/mobile.js":[function(require,module,exports){
//anim up op phone
// anders scale en fade
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , Input = require('../text/input')
  , Item = require('../item')
  , config = require('vigour-js/util/config')
  , raf = require('vigour-js/browser/animation/raf')
  , Page = require('./page')
  , app = require('vigour-js/app/')

exports.Verify = new Page(
{ css:'verifymobile'
, 'on.$parent.defer': function( update ) {
    //TODO: clean app.telCode
    this._parent._caller.data = { code: app.telCode }
    update()
  }
, top: {
    'text.dictionary': 'text.enterYourNumber'
  }
, country: new Item.IconRight({
    txt:
    { text: 
      { data: 'code'
      , dictionary: function( c, cv ) {
          return cv && cv.slice && 'text.countries.'+cv.slice(0,2)+'.title'
        }
      , add: [ ' (+', 
          { data:'code'
          , transform: function( c, cv ) {
              return cv && config.countrycodes[ cv ] 
            }
          }
          , ')']
      }
    }
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.val = 'countryCodes'
    }
  })
, phonenumber: new Input({ 
    input: 'phone' 
  , 'lefticon.html': 
    { data: 'code'
    , transform: function( v, cv ) {
        return cv && ( '+'+config.countrycodes[ cv ] || cv)
      } 
    } 
  })
, verify: new Button(
  { text: { dictionary: 'text.verify' }
  , 'events.click': function() {
      var api = this.checkParent( 'api', true )

      if(this.parent.phonenumber.input) void(0)

      api.mobile.verify.val = 
      { phonenumber: this.parent.phonenumber.val
      , country: config.countrycodes[ this.parent.data.code.val ]
      }

    }
  })
}).Class

//use region to select
exports.CountryCodes = new Element(
{ css:'languages codes'
, on: {
    $parent: {
      defer: function( update ) {
        this._parent._caller.data = config.mtvmobile
        this._parent.language.val = app.telCode
         this._parent.language._update()
        update()
      }
    }
  , language: {
      //handig in het framework!
      defer: function( update ) {
        var _this = this
         raf( function() {
          if( !_this._parent ) 
          { 
            update( true ) 
          }
          else 
          {
            var caller = _this._parent._caller
              , language = (_this._parent._val || caller.checkParent( 'on.language', true )).from
              , elem = caller.find( '_d', language.val )
            if( elem ) 
            {
              if( _this.focus && _this.focus._node ) 
              {
                _this.focus.css = { removeClass: 'current' }
              }
              _this.focus = elem
              elem.css = { addClass: 'current' }
            }
            update()
          }
        })
      }
    }
  }
, collection: {
    data:true
  , element: new Item({
      'title.text': { 
        data:true
      , dictionary: function( val, cv ) {
          //pretty advanced flag also does the listening
          //text.countries.nl.title
          return cv && cv.slice && 'text.countries.'+cv.slice(0,2)+'.title'
        }
      , add: function(c, cv) {
          // console.log(cv, this.data )
          return  ' (+'+config.countrycodes[ String( this.data ) ]+')'
        }
      }
    , 'events.click': function() {
        var popup = this.checkParent( 'on.popup', true ).from
        //TODO: data en strings bug fix doe er wat aan!
        app.telCode.val = String( this.data )
        popup.val = 'verifyMobile'

      } 
    })
  }
}).Class

//hooray mobile
},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../text/input":"/Users/youzi/dev/mtv-play/components/text/input.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/newsletter.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , Icon = require('../icon')
  , Item = require('../item')
  , Page = require('./page')
  , app = require('vigour-js/app/')

module.exports = new Page({
  css:'newsletter'
, newsletterSwitcher:new Item.Switcher(
  { css:'ui-item switch'
  , 'on.$render.defer': function( update ) {
      this._parent._caller.righticon.hold.switchOn = app.user.accept_newsletter.from
      update()
    }
  , txt:
    { 'title.text.dictionary': 'text.newsletterTitle'
    , 'subtitle.text.dictionary': 'text.newsletterSubtitle'
    }
  , 'events.click':function() {
      var newsletter = app.user.accept_newsletter.from
      newsletter.val = !newsletter.val
    }
  // , add: [ new Icon({ name:'lefticon', icon:'newsletter' }), 'txt' ]
  })
}).Class


},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/page.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')

//maybe add scroll, only when list is too large
module.exports = new Element({
  x:{translate:true}
, scrollbar:'y'
}).Class
},{"vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/profile.js":[function(require,module,exports){
//anim up op phone
// anders scale en fade
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , Item = require('../item')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , Page = require('./page')
  , dictionary = require('vigour-js/app/dictionary')
  , app = require('vigour-js/app/')

var MenuItems = new Element(
{ append:
  [ new Item(
    { css:'ui-item'
    , lefticon:new Icon()
    , title:{}
    }).Class
  , { 'lefticon.icon': 'logout'
    , 'title.text.dictionary': 'text.account.logout'
    , 'events.click':function(){
        var token = this.checkParent('on.token',true)
          , popup = this.checkParent('on.popup',true)
        popup.from.val = 'login'

        app.user.token.val = false
      }
    }
  ]
}).Class

module.exports = exports = new Element(
{ css:'profile'
, pic:
  { icon:new Icon(
    { icon:'profile' 
    , display: 
      { val:function() {
         return app.user.profilepic.val ? 'none' : 'block'
        }
      , listen:  app.user.profilepic 
      }
    })
  , img:
    { background: app.user.profilepic 
    , display: 
      { val:function() {
         return app.user.profilepic.val ? 'block' : 'none'
        }
      , listen:  app.user.profilepic 
      }
    }
  }
, username:{ text: app.user.first_name }
, email:
  { text:app.user.email
  }
, holder:
  { blocks:
    { allshows:
      { bold:{text:{dictionary:'text.all'}}
      , light:{text:{dictionary:'text.nav.shows'}}
      }
    , allchannels:
      { display:
        { val:app.user.role
        , transform:function(v,cv){
            return cv === 3 ? 'none' : 'table-cell'
          }
        }
      , bold:{text:{dictionary:'text.all'}}
      , light:{text:{dictionary:'text.nav.channels'}}
      }
    , everyepisode:
      { bold:{text:{dictionary:'text.every'}}
      , light:{text:{dictionary:'text.episode'}}
      }
    }
  , unlock:
    { display:
      { val:'block'
      , $isUpgraded:'none'
      }
    , text:{dictionary:'text.purchase.getMore'}
    }
  }
, button:
  { text:
    { val: app.user.role   
    , transform: function(c, cv) {
        if( !app.user.role.val ) {
          return dictionary.get('text.upgrade').val
        }
        else if( app.user.role.val === 1 ) {
          return dictionary.get('text.premium').val
        }
        else if( app.user.role.val === 2 ) {
          return dictionary.get('text.mtvMobile').val
        }
        else if( app.user.role.val === 3 ) {
          return dictionary.get('text.trial').val
        }
        return cv
      }
    }
  , css:{ val: app.user.role.text }
  , 'events.click':function() {
      if( app.user.role.val === 0 ) {
        var popup = this.checkParent('on.popup',true).from
        popup.previous = 'profile'
        popup.val = cases.$storeAvailable.val || cases.hasMobile.val
                  ? 'upgrade'
                  : 'roadblock' //'upgrade' Skirre gibbels hack
      }
    }
  }
, items:new MenuItems()
}).Class


},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/roadblock.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , Item = require('../item')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , Input = require('../text/input')
  , config = require('vigour-js/util/config')
  , Img = require('../img')
  , Article = require( './article' )
  , Page = require('./page')

//ook episode buy -- roadblock.buy

// module.exports = exports = new Page(





// )
//especially the title is fucked to do if not a page


module.exports = exports = new Page(
{ css:'roadblock'
, logo:
  { display: { val: 'block', $isLoggedIn: 'none' }
  }
, '!native.mockup':
  { display: { val: 'none', $isLoggedIn: 'block' }
  }
, append: [
    new Element(
    { css: 'info'
    }).Class
  , { 'title.text.dictionary': 'text.needToRegister' 
    , 'description.text.dictionary': 'text.easyRegister' 
    , display: { val: 'block', $isLoggedIn: 'none' }
    }
  , { 'title.text.dictionary': 'text.upgradeRequired' 
    , 'description.text.dictionary': 'text.upgradeRequired' 
    , display: 
      { val:'none'
      , $isLoggedIn: 'block'
      , transform: { val:'none', $storeAvailable: false }  
      }
    }
  , { 'title.text.dictionary': 'text.mobileUpgrade' 
    , 'description.text.dictionary': 'text.mobileUpgradeInfo'
    , '!native.stores':
      { windowsstore:{}
      , applestore:{}
      , googlestore:{}
      , googlecast:{}
      , samsungtv:{}
      , lgtv:{}
      }
    , display: 
      { val:'none'
      , $isLoggedIn: 'block'
      , transform: { val:false, $storeAvailable: 'none' }  
      }
    }
  ]
, signup:new Button(
  { display: { val: 'block', $isLoggedIn: 'none' }
  , 'text.dictionary': 'text.account.signup.title'
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.previous = 'roadblock'
      popup.val = 'register'
    }
  })
, signin:new Button(
  { display: { val: 'block', $isLoggedIn: 'none' }
  ,'text.dictionary': 'text.account.signin.title'
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.previous = 'roadblock'
      popup.val = 'login'
    }
  })
, upgrade:new Button(
  { display: { 
      val: 'none'
    , $isLoggedIn: 'block'
    , transform: { val:'none', $storeAvailable: false } 
    }
  , 'text.dictionary': 'text.upgrade'
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup' , true ).from
      popup.previous = 'roadblock'
      popup.val = 'upgrade'
    }
  })
}).Class


//roadblock media is the episode buy page....
exports.Media = new Page(
{ css:'roadblock media share'
// , 'text.data': 'description' 
, 'holder.thumb': new Item.Thumb(
  { thumb:
    { h:60 
    , img:
      { h:60
      }
    }
  , righticon:false
  }) //moet ff iets van data op komen!
// , legal:
//   { text:
//     { dictionary:'text.lockedEpisodeDescription'
//     }
//   }
, buy:new Button(
  { display: { val:'none', $storeAvailable:'block' }
  , text:
    { dictionary: 'text.unlockPrice'
    , add:
      [' '
      , app.api.price.single
      ]
    }
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.val = 'buySingle'
    }
  })
, or:
  { display: { val:'none', $storeAvailable:'block' }
  , text:
    { val:'- '
    , add:
      [ { dictionary:'text.or' }
      , ' -'
      ]
    }
  }
, upgrade:new Button({
    'text.dictionary': 'text.upgrade'
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup' , true ).from
      popup.previous = {
        val: 'roadblockMedia'
      , data: this.parent.data
      }
      popup.val = 'upgrade'
    }
  })
, mobile: new Button(
  { 'text.dictionary': 'text.purchase.freeWithMTV' 
  , display: { val:'none', hasMobile: 'block' } 
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.previous = 'upgrade'
      popup.val = 'verifyMobile'
    }
  }) //is set later
}).Class


},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../text/input":"/Users/youzi/dev/mtv-play/components/text/input.js","./article":"/Users/youzi/dev/mtv-play/components/popup/article.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/settings.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , Item = require('../item')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , Input = require('../text/input')
  , config = require('vigour-js/util/config')
  , raf = require('vigour-js/browser/animation/raf')
  , Page = require('./page')
  , dictionary = require('vigour-js/app/dictionary')
  , app = require('vigour-js/app/')

module.exports = new Element(
{ css:'settings'
, scroller:
  { language: new Item.IconRightSub(
    { txt:
      { 'title.text.dictionary' : 'text.settings.languages.title'
      , 'subtitle.text.dictionary': 'text.settings.languages.subtitle'
      }
    , 'events.click': function() {
        var popup = this.checkParent( 'on.popup', true ).from
        popup.val = 'languages'
      }
    })
  , FAQ:new Item.IconRightSub(
    { txt:
      { 'title.text.dictionary' : 'settings.help'
      , 'subtitle.text.dictionary': 'settings.helpSub'
      }
    , 'events.click': function() {
        var popup = this.checkParent( 'on.popup', true ).from
        popup.val = 'faq'
      }
    })
  , help:new Item.IconRightSub(
    { txt:
      { 'title.text.dictionary' : 'settings.feedback'
      , 'subtitle.text.dictionary': 'settings.feedbackSub'
      }
    , 'events.click': function() {
        var api = this.checkParent( 'api', true )
        api.email.send.val = {
          address:'helpme@mtvplay.tv'
        , subject: dictionary.get('text.mailHelp.title').val
        , body: dictionary.get('text.mailHelp.body').val
        }
      }
    })
  , 'hasMobile.about':new Item.IconRightSub(
    { txt:
      { 'title.text.dictionary' : 'settings.about'
      , 'subtitle.text.dictionary': 'settings.aboutSub'
      }
    , 'events.click': function() {
        var popup = this.checkParent( 'on.popup', true ).from
          , user = app.user //TODO: fix
        popup.previous = 'settings'
        popup.data = user.data.from.get( [ 'about', 'list', '0' ] )
        popup.val = 'article'
      }
    })
  , newsletter:new Item.IconRightSub(
    { txt:
      { 'title.text.dictionary' : 'settings.enableNewsletter.title'
      , 'subtitle.text.dictionary': 'settings.enableNewsletter.subtitle'
      }
    , display: { val: 'none', $isLoggedIn: 'table' }
    , 'events.click': function() {
        var popup = this.checkParent( 'on.popup', true ).from
        popup.val = 'newsletter'
      }
    })
  , 'native.wifi':new Item.IconRightSub(
    { txt:
      { 'title.text.dictionary' : 'settings.connectivity'
      , 'subtitle.text.dictionary': 'settings.connectivitySub'
      }
    , 'events.click': function() {
        var popup = this.checkParent( 'on.popup', true ).from
        popup.val = 'wifi'
      }
    })
  , verifyMobile:new Item.IconRightSub(
    { display:
      { val:cases.hasMobile
      , transform:function(v,cv){
          return cv && cases.$isLoggedIn.val ? 'table' : 'none'
        }
      , listen:cases.$isLoggedIn
      }
    , txt :
      { 'title.text.dictionary' : 'settings.verifyMobile'
      , 'subtitle.text.dictionary': 'settings.verifyMobileSub'
      }
    , 'events.click': function() {
        var popup = this.checkParent( 'on.popup', true ).from
        popup.previous = 'settings'
        popup.val = 'verifyMobile'
      }
    })
  , 'native.intro':new Item.IconRightSub(
    { txt :
      { 'title.text.dictionary' : 'settings.intro'
      , 'subtitle.text.dictionary': 'settings.introSub'
      }
    , 'events.click': function() {
        var popup = this.checkParent( 'on.popup', true ).from
        popup.previous = 'settings'
        popup.val = 'intro'
      }
    })
  }
, version:
  { text:
    { val:'MTV Play -'//dictionary: 'text.version'
    , add:[' ', window.package && window.package.version ]
    }
  }
, phone:
  { h:
    { parent:'h'
    }
  , scroller:
    { scrollbar:'y'
    , h:{parent:'h',sub:80}
    }
  }
}).Class

/*
  popup.data = user.data.from.get( [ this._name, 'list', '0' ] )
  popup.val = 'article'
*/





},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../text/input":"/Users/youzi/dev/mtv-play/components/text/input.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/share.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , Item = require('../item')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , Input = require('../text/input')
  , config = require('vigour-js/util/config')
  , Img = require('../img')
  , Page = require('./page')

module.exports = exports = new Page(
{ css:'share'
, 'holder.thumb': new Item.Thumb(
  { thumb:
    { h:60 
    , img:{h:60}
    }
  , righticon:false
  }) //moet ff iets van data op komen!
, facebook: new Item.IconLeft(
  { lefticon: { icon:'facebook' }
  , 'txt.text.dictionary': 'text.shareFacebook' 
  , 'events.click': function() {
      var api = this.checkParent('api', true)
      api.facebook.share.val = { val: true, url: true }
    }
  })
, email: new Item.IconLeft(
  { lefticon:{ icon:'email' }
  , 'txt.text.dictionary': 'text.shareEmail' 
  , 'events.click': function() {
      var api = this.checkParent('api', true)
      api.email.share.val = true
      //media
      // api.email.share.val = { url: true }
    }
  })
}).Class

},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","../text/input":"/Users/youzi/dev/mtv-play/components/text/input.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/popup/upgrade.js":[function(require,module,exports){
//anim up op phone
// anders scale en fade
var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app')
  , util = require('vigour-js/util')
  , Icon = require('../icon')
  , cases = require('vigour-js/browser/cases')
  , Button = require('../button')
  , Page = require('./page')

exports = module.exports = new Page(
{ css:'upgrade'
, block: 
  { img:{}
  , 'title.text.dictionary': 'text.purchase.goPremium'
  , 'txt.text.dictionary': 'text.purchase.getMore'
  }
, bottom: { 'text.container':  'text.legalContainer' }
, monthlyFee: new Button(
  { text: 
    { dictionary: 'text.purchase.monthlyPass.title'
    , add:
      [ ' '
      , app.api.price.monthly
      ]
    }
  , display: { val:'none', $storeAvailable:'block' } //web none! can also be ze mobile web
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.val = 'buyMonthly'
    }
  })
, annualFee: new Button(
  { text:
    { dictionary: 'text.purchase.yearlyPass.title'
    , add:
      [ ' '
      , app.api.price.yearly
      ]
    }
  , display: {val:'none', $storeAvailable:'block' }
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.val = 'buyYearly'
    }
  })
, upgradeUsingPhone: new Button(
  { text: { dictionary : 'tex.buyPremiumPhoneButton' }  
  , display: {val:'block', $storeAvailable:'none' }
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.previous = 'upgrade'
      popup.val = 'roadblockUpgrade' //'upgradeNoStore'
    } 
  })
, mobile: new Button(
  { 'text.dictionary': 'text.purchase.freeWithMTV' 
  , display: { val:'none', hasMobile: 'block' } 
  , 'events.click': function() {
      var popup = this.checkParent( 'on.popup', true ).from
      popup.previous = 'upgrade'
      popup.val = 'verifyMobile'
    }
  }) //is set later
}).Class



},{"../button":"/Users/youzi/dev/mtv-play/components/button/index.js","../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/components/popup/wifi.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , Icon = require('../icon')
  , Item = require('../item')
  , Page = require('./page')
  , app = require('vigour-js/app/')

module.exports = new Page({
  css:'wifi'
, wifiSwitcher:new Item.Switcher(
  { css:'ui-item switch'
  , 'on.$render.defer': function( update ) {
      this._parent._caller.righticon.hold.switchOn = app.wifiOnly
      update()
    }
  , txt:
    { 'title.text.dictionary': 'settings.enableCellular.title'
    , 'subtitle.text.dictionary': 'settings.enableCellular.subtitle'
    }
  , 'events.click':function() {
      var wifiOnly = app.wifiOnly
      wifiOnly.val = !wifiOnly.val
    }
  // , add: [ new Icon({ name:'lefticon', icon:'wifi' }), 'txt' ]
  })
}).Class
},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../item":"/Users/youzi/dev/mtv-play/components/item/index.js","./page":"/Users/youzi/dev/mtv-play/components/popup/page.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/rotate-message/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
	, Icon = require('../icon')

module.exports = new Element(
{ css:'rotate-message'
, holder:
	{ icon:new Icon({icon:'phone'})
	, message:{text:{dictionary:'text.rotateDevice'}}
	}
}).Class
},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/rotate-message/style.less","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/rotate-message/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/bar/index.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , dictionary = require('vigour-js/app/dictionary')
  , Icon = require('../../icon')
  , text = require('../../text')
  , active = dictionary.get( 'connect.active' )
  , waiting = dictionary.get( 'connect.waiting' )
  , cases = require('vigour-js/browser/cases')

module.exports = new Element(
{ css:{ val: 'second-bar' } //$isReceiver: 'second-bar isReceiver' BROKEN!
, device:new Icon(
  { icon:
    { data:'activeClient.device'
    }
  })
, info:
  { html:
    { data:'activeClient.device'
    , transform:function( v, cv ){
        return cv ? active.val + ' ' + text.highlight( cv ) : waiting.val
      }
    , listen:dictionary
    }
  }
}).Class

},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../text":"/Users/youzi/dev/mtv-play/components/text/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/bar/style.less","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/second/bar/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/channel/index.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Icon = require('../../icon')
  , Img = require('../../img')
  , Grid = require('../grid')

var information = new Element(
{ w:
  { val:Grid.colWidth
  , add:10
  , multiply:2
  , sub:10
  }
, y:
  { val:Grid.rowHeight
  , add:10
  , divide:2
  , add:40 
  }
, title:
  { text:
    { data:'media.title'
    }
  }
, img:new Img(
  { background:
    { data:'media.img'
    , range:100
    }
  , w:{parent:'w'}
  , h:{self:'w',divide:4/3}
  })
, extratitle:
  { text:
    { data:'media.title'
    }
  }
, description:
  { text:
    { data:'media.description'
    }
  }
})

var cover = new Img(
{ h:app.h
, w:
  { val:app.w
  , sub:
    [ information.w
    , 160
    ]
  }
, background:{ data:'media.img', range:100 }
, overlay:
  { message:
    { swipeicon:new Icon({icon:'swipeup'})
    , text:'Press Watch Big your device to start playing!'
    }
  }
})

module.exports = new Element(
{ css:'second-channel'
, information:information
, cover:cover
}).Class
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../grid":"/Users/youzi/dev/mtv-play/components/second/grid/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/channel/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/second/channel/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/channels/index.js":[function(require,module,exports){
require('./style.less')

var Grid = require('../grid')
  , Element = require('vigour-js/app/ui/element')
  , Img = require('../../img')
  , app = require('vigour-js/app/')
  , epgData = require('../../epg_temp')
  , Seekbar = require('../../player/seekbar')
  , clockTime = epgData.clockTime

  , Item = new Element(
    { w:{ parent:'itemWidth', sub:10 }
    , css:'grid-item'
    , img:new Img(
      { w:{ parent:'w', sub:2 }
      , h:{ parent:'w', multiply:3/4 }
      , background:{range:100}
      })
    , information:
      { channeltitle:
        { css:'ui-item-text'
        , text:{data:'title'}
        }
      , now:
        { text:
          { dictionary:'text.now'
          }
        }
      , epg:
        { showtitle:
          { text:
            { data:'title'
            }
          }
        , time:
          { text:
            { data:'minutes_since_midnight'
            , transform:clockTime
            , add:[ ' - ', { data:'endtime', transform:clockTime} ]
            }
          }
        , bar:new Seekbar(
          { seek:
            { w:
              { val:epgData.minutesSinceMidnight
              , sub:{data:'minutes_since_midnight'}
              , divide:{data:'duration'}
              , transform:function( v, cv ){
                  return !isNaN(parseInt(cv)) ? cv * 100 + '%' : 0
                }
              , clear:true
              }
            }
          , button:false
          })
        , model:
          { inherit:false
          }
        }
      }
    , model:
      { subscription:{epgid:true}
      , val:function(data){
          var epgid = data.epgid && data.epgid.val
          if(epgid !== void 0){
            this.information.epg.data = epgData.now(epgid)
            this.model = false
          }
        }
      }
    }).Class

Grid = new Grid(
{ css:'second-channels'
, itemWidth:{ val:app.w, sub:160, divide:{val:4,min:4},clear:true }
, title:{ text:'channels' }
, y:
  { val:Grid.rowHeight
  , add:10
  , divide:2
  , add:40
  }
, collection:
  { data:'channels'
  , element:new Item()
  }
, model:function( data ){
    var keys = data.channels && data.channels.keys
      , length = keys && keys.length

    if(length !== this._length)
    {
      this.itemWidth = { divide: length }
      this._length = length
    }
  }
})

module.exports = Grid.Class


},{"../../epg_temp":"/Users/youzi/dev/mtv-play/components/epg_temp.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../../player/seekbar":"/Users/youzi/dev/mtv-play/components/player/seekbar/index.js","../grid":"/Users/youzi/dev/mtv-play/components/second/grid/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/channels/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/second/channels/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/discover/index.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Grid = require('../grid')
  , Img = require('../../img')
  , cases = require('vigour-js/browser/cases')

var DiscoverGrid = new Grid(
{ itemHeight:Grid.rowHeight
, title:{}
, w:
  { self:'itemWidth'
  , add:10
  , multiply:1
  }
, collection:
  { data:true
  }
, model:
  { val:function(data){
      data = data[this.collection._flag.data[2]]
      var keys = data && data.keys
        , length = keys && keys.length
      if(keys && length !== this._length)
      {
        var page = this.parent
        this.w = { multiply:Math.ceil(length/4) || 1 }
        this._length = length
        page._index = null
        page.horizontalScroll.update()
      }
    }
  // , complete:function(){
  //     if(this.children[4]){
  //       this.children[4].w = {multiply:2,add:10}
  //       this.children[4].background.update()
  //     }
  //   }
  }
}).Class

var Carousel = new Element(
{ title:{text:{dictionary:'text.nav.discover'}}
, holder:
  { h:
    { val:Grid.rowHeight
    , add:10
    , multiply:2
    , sub:10
    }
  , w:
    { val:Grid.colWidth
    , add:10
    , multiply:3
    , sub:10
    }
  , roll:
    { w:{parent:'w'}
    , h:{parent:'h'}
    , x:
      { parent:'w'
      , multiply:{data:'carousel'}
      , animation: !cases.chromecast && { easing:'outCubic', time:36 }
      }
    , collection:
      { data:'marquee'
      , element:new Img(
        { w:{parent:'w'}
        , h:{parent:'h'}
        , background:
          { range:100
          }
        })
      }
    }
  }
// , bigPurp:
//   { y:10
//   , w:{val:Grid.colWidth,add:10,multiply:3,sub:10}
//   , h:{val:Grid.rowHeight}
//   }
}).Class

var discoverPage = new Element()

discoverPage.extend(
{ horizontalScroll:function( val ){
    var p = val.val
      , treshold = 1/4
      , index = Math.min(~~(p/treshold),3)

    if(index !== this._index)
    {
      var children = this.children
      if(index === 0)
      {
        this.x = 0
      }
      else if(index === 1)
      {
        this.x = 
          - children[0].holder.w.val - 80
      }
      else if(index === 2)
      {
        this.x = 
          - children[0].holder.w.val - 80
          - children[1].w.val- 80
      } 
      else
      {
        this.x = 
          - children[0].holder.w.val - 80
          - children[1].w.val - 80
          - children[2].w.val - 80
      }

      for (var i = children.length - 1, makeGone, child; i >= 0; i--) {
        child = children[i]
        if(makeGone)
        {
          child.opacity = 0
        }
        else if(i !== index)
        {
          child.opacity = 0.3
        }
        else 
        {
          child.opacity = 1
          makeGone = true
        }
      }

      this._index = index
    }

  }
})

module.exports = new discoverPage.Class(
{ css:'second-discover'
, '!chromecast.x.animation':
    { easing:'outCubic'
    , time:36
    }
, y:
  { val:Grid.rowHeight
  , add:10
  , divide:2
  , add:40
  }
, horizontalScroll:{data:'scroll'}
, spotlight:new Carousel()
, releases:new DiscoverGrid(
  { title:
    { text:
      { dictionary:'text.newReleases'
      }
    }
  , collection:
    { data:'releases'
    }
  })
, recommended:new DiscoverGrid(
  { title:
    { text:
      { dictionary:'text.recommended'
      }
    }
  , collection:
    { data:'recommended'
    }
  })
, free:new DiscoverGrid(
  { title:
    { text:
      { dictionary:'text.free'
      }
    }
  , collection:
    { data:'free'
    }
  })
}).Class
},{"../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../grid":"/Users/youzi/dev/mtv-play/components/second/grid/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/discover/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/second/discover/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/episode/index.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Icon = require('../../icon')
  , Img = require('../../img')
  , Grid = require('../grid')

var information = new Element(
{ w:
  { val:Grid.colWidth
  , add:10
  , multiply:2
  , sub:10
  }
, y:
  { val:Grid.rowHeight
  , add:10
  , divide:2
  , add:40 
  }
, title:
  { text:
    { data:'show.title'
    }
  }
, holder:
  { w:{parent:'w'}
  , img:new Img(
    { background:
      { data:'media.img'
      , range:100
      }
    , w:{parent:'w'}
    , h:{self:'w',divide:4/3}
    })
  , extratitle:
    { text:
      { data:'media.title'
      }
    }
  , opacity:
    { data:'media.number'
    , transform:function( v,cv ){
        if(!cv)
        {
          this.css = 'dontAnimate'
          return 0
        }
        else
        {
          this.css = ''
          return 1
        }
      }
    }
  , subtitle:
    { text:
      { val: { dictionary:'text.season' }
      , add:
        [ ' '
        , { data:'season.number' }
        , ' '
        , { dictionary:'text.episode' }
        , ' '
        , { data:'media.number' }
        ]
      }
    }
  , description:
    { text:
      { data:'media.description'
      }
    }

  }
})

var cover = new Img(
{ h:app.h
, w:
  { val:app.w
  , sub:
    [ information.w
    , 160
    ]
  }
, background:{ data:'show.img', range:100 }
, overlay:
  { message:
    { swipeicon:new Icon({icon:{ val:'cast', $isReceiver:'swipeup' }})
    , text:
      { dictionary: 'text.recieveSecondScreen'
      , transform: false
      , $isReceiver:
        { transform: {  dictionary:'text.recieveMainScreen' }}
      }
    // , display: { val: 'none', receiver: 'table' }
    }
  }
})

module.exports = new Element(
{ css:'second-episode'
, information:information
, cover:cover
}).Class
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../grid":"/Users/youzi/dev/mtv-play/components/second/grid/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/episode/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/second/episode/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/grid/index.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Value = require('vigour-js/value')
  , Img = require('../../img')
  , Grid = new Element()

var Item = new Element(
{ w:{ parent:'itemWidth' }
, h:{ parent:'itemHeight' }
, css:'grid-item'
, img:new Img(
  { 'events.click':function(){
      // appData.gotoItem.call(this)
    }
  , w:{ parent:'w' }
  , h:{ parent:'h' }
  , background:
    { range:100 }
  })
}).Class

Grid.extend(
{ itemWidth:function(){}
, itemHeight:function(){}
})

Grid.set(
{ itemHeight:{ }
, itemWidth:{ self:'itemHeight', divide:3/4 }
, collection:
  { element:new Item()
  }
})

module.exports = exports = Grid.Class
exports.Item = Item

exports.rowHeight = new Value({ val:app.h, sub:80, divide:6 })
exports.colWidth = new Value({ val:exports.rowHeight, divide:3/4 })
},{"../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/grid/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/components/second/grid/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')
  , Switcher = require('./switcher')
  , Screensaver = require('./screensaver')
  , Bar = require('./bar')

module.exports = new Element(
{ css:'second-state'
, switcher:cases.phone
    ? new Screensaver()
    : new Switcher()
, '!phone.bar':new Bar()
, 'phone.button.title.text.dictionary': 'text.returnTap'
}).Class
},{"./bar":"/Users/youzi/dev/mtv-play/components/second/bar/index.js","./screensaver":"/Users/youzi/dev/mtv-play/components/second/screensaver/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/style.less","./switcher":"/Users/youzi/dev/mtv-play/components/second/switcher/index.js","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/second/screensaver/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Switcher = require('vigour-js/app/ui/switcher')
  , app = require('vigour-js/app/')
  , cases = require('vigour-js/browser/cases')
  , Img = require('../../img')

var BasicImg = new Img(
{ w:app.w
, h:app.h
}).Class

var RandomImg = new BasicImg(
{ model:
  { subscription:{$:{img:true}}
  , val:function( data ){
      if(data._name)
      {
        var keys = data.keys
        if(keys)
        {
          var length = keys.length
          if(length)
          {
            var randomKey = keys[~~(Math.random() * length)]
            this.model = false
            this.data = data[randomKey]
          }
        }
      }
    }
  }
}).Class

module.exports = exports = new Switcher( 
{ css:'second-screensaver'
, on:
  { page:
    { defer:function( update ){ // discover / shows / channels
        var page = this.$userOrigin.val
          , parent = this._parent
          , caller = parent._caller
          , content = parent.content.from
          , imgdata

        if(page === 'discover')
        {
          imgdata = content.get('marquee.list')
        }
        else if(page === 'shows') 
        {
          imgdata = content.get('shows')
        }
        else if(page === 'channels')
        {
          imgdata = content.get('channels')
        }

        caller.transition = 
        { element:RandomImg
        , $params:
          { data:imgdata
          }
        , $options:{force:true}
        }

        update()
      }
    }
  , show:
    { defer:function( update ){
        var showdata = this.$userOrigin.val
          , parent = this._parent
          , caller = parent._caller

        caller.transition = 
        { element:BasicImg
        , $params:
          { data:showdata
          }
        , $options:{force:true}
        }

        update()
      }
    }
  , media:
    { defer:function( update ){
        var episodedata = this.$userOrigin.val
          , parent = this._parent
          , caller = parent._caller

        caller.transition = 
        { element:BasicImg
        , $params:
          { data:episodedata
          }
        , $options:{force:true}
        }

        update()
      }
    }
  }
, onTransition:function(current,last,direction,options){
    if(last)
    {
      last.opacity =
      { val:0
      , animation:
        { start:1
        , time:12
        }
      }
    }

    current.opacity = 
    { val:1
    , animation:
      { start:0
      , time:12
      , delay:12
      , done:function(){
          if(last) last.remove()
        }
      }
    }
    
    this.add(current)
  }
}).Class
},{"../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/screensaver/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/app/ui/switcher":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/second/screensaver/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/show/index.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Grid = require('../grid')
  , Img = require('../../img')
  , cases = require('vigour-js/browser/cases')

var roll = new Element(
{ x:
  { val:0
  , add:
    { val:Grid.colWidth
    , add:50
    , multiply:2
    }
  , animation: !cases.chromecast && { easing:'outCubic', time:36 }
  }
, collection:
  { data:'seasons'
  , element:new Grid(
    { itemHeight:Grid.rowHeight
    , title:
      { text:
        { val:'season'
        , add:
          [ ' '
          , {data:'number'}
          ]
        }
      }
    , w:
      { self:'itemWidth'
      , add:10
      , multiply:1
      }
    , collection:
      { data:'episodes' 
      }
    , model:
      { val:function(data){
          if(data.episodes){
            var keys = data.episodes.keys
              , length = keys.length
            if(length !== this._length)
            {
              this.w = { multiply:Math.ceil(length/4) }
              this._length = length
            }
          }
        }
      }
    })
  }
})

roll.extend(
{ pos:function( val ){
    var index = val.val | 0// 0 - 8
      , children = this.children

    if(children[1])
    {
      if(!index)
      {
        this.x.val = 0
      }
      else if(children[index - 1])
      {
        this.x = this.x.val - (children[index - 1].node.getBoundingClientRect().right)
      }
      for (var i = children.length - 1, makeGone, child; i >= 0; i--) {
        child = children[i]
        if(makeGone)
        {
          child.opacity = 0
        }
        else if(i !== index)
        {
          child.opacity = 0.3
        }
        else 
        {
          child.opacity = 1
          makeGone = true
        }
      }
    }
  }
})

module.exports = new Element(
{ css:'second-show'
, on:
  { show:
    { defer:function( update ){
        var caller = this._parent._caller
        caller.data = this.from.val
        update()
      }
    }
  , season:
    { defer:function( update ){
        var caller = this._parent._caller
          , data = this.from.val

        if(data)
        {
          var seasonnr = data && data._name
          if(!caller.data){
            this._parent.show.val = data._parent._parent
          }
          if(seasonnr !== void 0) caller.roll.pos.val = seasonnr
        }

        update()
      }
    }
  }
, y:
  { val:Grid.rowHeight
  , add:10
  , divide:2
  , add:40
  }
, roll:roll.set(
  { pos:0
  , model:
    { field:'show'
    , complete:function(){
        var _this = this
        window.requestAnimationFrame(function(){
          _this.pos.update()
          _this.model = false
        })
      }
    }
  })
, information:
  { title:{text:{data:'show.title'}}
  , holder:
    { h:{val:Grid.rowHeight,add:10,multiply:4,sub:10}
    , w:{val:Grid.colWidth,add:10,multiply:2,sub:10}
    , img:new Img(
      { background:
        { data:'show.img'
        , range:100
        }
      , w:{parent:'w'}
      , h:{self:'w',divide:4/3}
      })
    , description:{ text: {data:'show.description' } }
    }
  }
}).Class
},{"../../img":"/Users/youzi/dev/mtv-play/components/img/index.js","../grid":"/Users/youzi/dev/mtv-play/components/second/grid/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/show/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/second/show/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/shows/index.js":[function(require,module,exports){
require('./style.less')

var app = require('vigour-js/app/')
  , Element = require('vigour-js/app/ui/element')
  , Icon = require('../../icon')
  , Grid = require('../grid')
  , display = require('vigour-js/browser/element/properties/collection/display')

var grid = new Grid(
{ y:
  { translate:true
  , add:10
  }
, '!chromecast.y.animation':
  { time:36
  , easing:'outCubic'
  }
, itemWidth:
  { val:app.w
  , sub:70
  , divide:6
  , clear:true 
  }
, itemHeight:
  { self:'itemWidth'
  , divide:4/3
  , clear:true
  }
, user:{}
, collection:
  { data:'shows'
  , options:display
  , element:new Grid.Item(
    { display:'inline-block'
    , img:
      { background:
        { load:function(t) {
            if( !t.opacity || !t.opacity.val ) t.opacity = 0.3
          }
        }
      }
    , model:
      { val:function(data){
          var name = data._name
          if(name)
          {
            this.name = name
            this.model = false
          }
        }
      }
    })
  , filter:
    { condition: { title:{ $contains:'' } } 
    , sort:'title' 
    }
  }
, model:{subscription:{$:{img:true,title:true}}} //tempfix
})

grid.user.extend(
{ highlight:function( val ){
    var highlightString = val.val // eg '101.455.799.342.678'
      , grid = this._parent || (this._parent = this.parent)

    if(highlightString[0])
    {
      var next = highlightString.split('.')
        , old = grid._old || (grid._old = [])
      if(next[0])
      {
        h(old,next,grid,0.3)
        h(next,old,grid,1)
        m(next[0],next[next.length-1],grid)
        grid._old = next
      }
    }
  }
, search:function( val ){
    var string = val.val
      , grid = this._parent || (this._parent = this.parent)
    for(var str='',letter=0,len=string&&string.length;letter<len;letter++)
    {
     str+='\\s*'+string[letter]
    }
    str += '\\s*'
    if(grid.filter) grid.filter.filter = 
    { condition: { title:{ $contains:str } } 
    , sort:'title' 
    }
  }
})

grid.user.set(
{ highlight:{data:'highlight'}
, search:{data:'search'}
})

var searchbox = new Element(
{ searchicon:new Icon(
  { icon:'search'
  })
, text:
  { data:'search'
  , transform:function(v,cv){
      return cv
    }
  }
})

searchbox.extend(
{ paddingRight:function( val ){
    this.node.style.paddingRight = val.val + 'px'
  }
})

module.exports = new Element(
{ css:'second-shows'
, grid:grid
, search:
  { searchholder:
    { searchbox:new searchbox.Class(
      { paddingRight:
        { self:'text'
        , transform:function(v,cv){
            return cv[0] ? 20 : 0
          }
        }
      , opacity:
        { self:'text'
        , transform:function(v,cv){
            return cv[0] ? 1 : 0
          }
        }
      })
    }
  }
}).Class

function h (arr, compare, grid, val){
  for (var i = arr.length - 1, name, child; i >= 0; i--) {
    if(!~compare.indexOf(name = arr[i])){
      if(child = grid[name])
      {
        child.img.opacity = val
      }
    }
  }
}

function m (first, last, grid){
  first = grid[first]
  last = grid[last]
  if(first && last)
  {
    var appHeight = app.h.val - 80 //for bar!!
      , lastBottom = last.node.getBoundingClientRect().bottom
    if(lastBottom >= appHeight)
    {
      grid.y.val -= lastBottom - appHeight + 20
    }
    else
    {
      var firstTop = first.node.getBoundingClientRect().top
      if(firstTop <= 0) 
      {
        grid.y.val -= firstTop
      }
    }
    if(grid.y.val > 0) grid.y.val = 0
  }
}
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../grid":"/Users/youzi/dev/mtv-play/components/second/grid/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/shows/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/element/properties/collection/display":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/display.js"}],"/Users/youzi/dev/mtv-play/components/second/shows/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/second/switcher/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Switcher = require('vigour-js/app/ui/switcher')
  , cases = require('vigour-js/browser/cases')
  , Icon = require('../../icon')

module.exports = exports = new Switcher( 
{ css:'second-switcher'
, on:
  { $remove:
    { defer:function( update ){
        var caller = this._parent._caller
        if( caller._timer ) clearTimeout( caller._timer )
        update()
      }
    }
  , page:
    { defer:function( update ){ // discover / shows / channels
        var page = this.$userOrigin.val
          , parent = this._parent
          , caller = parent._caller
          , content = parent.content.from
          , pagedata
          , loadedBenchmark

        if( page )
        {
          if( page === 'discover' )
          {
            if( exports[page] === void 0 ) exports[page] = require( '../discover' )
            pagedata = 
            { marquee: content.get('marquee.list')
            , recommended: content.get('recommended.list')
            , releases: loadedBenchmark = content.get('releases.list')
            , watched: parent.watched.from
            , free: content.get('free.list')
            , channels: content.get('channels')
            , scroll: parent.scroll.from
            , carousel:parent.carousel.from
            }
          }
          else if( page === 'shows' ) 
          {
            if( exports[page] === void 0 ) exports[page] = require( '../shows' )
            pagedata =
            { shows: loadedBenchmark = content.get('shows')
            , search: parent.search.from
            , highlight: parent.highlight.from
            }
          }
          else if( page === 'channels' )
          {
            if( exports[page] === void 0 ) exports[page] = require( '../channels' )
            pagedata = 
            { channels: loadedBenchmark = content.get('channels')
            }
          }
          if(loadedBenchmark) {
            caller.transition = 
            { element:exports[page]
            , $params:
              { data:pagedata
              }
            , $options:
              { loader:loadedBenchmark.from
              }
            }  
          } else {
            void(0)
          }
          

          caller.current = 'page'
        }

        update()
      }
    }
  , show:
    { defer:function( update ){
        var showdata = this.$userOrigin.val
          , parent = this._parent
          , caller = parent._caller
          , showname = showdata._name
          , season = parent.season
          , media = parent.media
          , usage = parent.usage
          , seasondata
          , mediadata

        if(!season.from.checkParent('_name',showname))
        { 
          season.$userOrigin.val = showdata.from.get('seasons.0')
        }

        if(!media.from.checkParent('_name',showname))
        {
          media.$userOrigin.val = showdata.from.get('seasons.0.episodes.0')
        }

        mediadata = media.$userOrigin
        seasondata = season.$userOrigin

        caller.transition = 
        { element:exports.show || ( exports.show = require( '../show' ) )
        , $params:
          { on:
            { season:seasondata
            }
          , data:
            { show:showdata
            , season:seasondata//showdata.get('seasons.0')//parent.season && parent.season._val.val
            , media:mediadata//showdata.get('seasons.0.episodes.0')//parent.media && parent.media._val.val
            , showusage:usage.from.get(showdata.from._contentPath)
            , mediausage:usage.from.get(mediadata.from._contentPath)
            , volume:parent.volume
            }
          }
        , $options:{ loader: showdata.from.seasons }
        }

        update()
      }
    }
  , season:
    { defer:function( update, args ){
        if( args[0] ) this._parent.show._update()
        update()
      }
    }
  , media:
    { defer:function( update ){
        var parent = this._parent
          , caller = parent._caller
          , mediadata = this.$userOrigin.val

        if( !mediadata ) mediadata = this.$userOrigin.val = this.from
        if( mediadata._parent._name === 'episodes' )
        {

          var seasondata = mediadata._parent._parent
            , showdata = seasondata._parent._parent

          caller.transition = 
          { element:exports.episode || ( exports.episode = require( '../episode' ) )
          , $params:
            { data:
              { show:showdata
              , season:seasondata
              , media:mediadata
              }
            }
          , $options:{ loader:mediadata.from }
          , direction:caller.current === 'page'
            ? 1
            : caller.current === 'media' && -1
          }
        }
        else if(mediadata._parent._name === 'channels')
        {
          caller.transition = 
          { element:exports.channel || ( exports.channel = require( '../channel' ) )
          , $params:
            { data:
              { media:mediadata
              }
            }
          , $options:{ loader:mediadata.from }
          , direction:caller.current !== 'channel' && 1
          }
        }

        update()
      }
    }
  }
, onTransition:function(current,last,direction,options){
      if(last){
        this.add(current,last)
        last.opacity = 0
        last.node.pointerEvents = 'none'
        if(this._timer) clearTimeout(this._timer)
        this._timer = setTimeout(function(){
          if(last) last.remove()
          this._timer = null
          if(options.done) options.done()
        },200)
      }
      else
      {
        this.add(current)
        if(options.done) options.done()
      }
    }
, loader:new Element(
  { css:'second-loader'
  , x:{translate:true}
  , loadicon:new Icon({icon:'logo'})
  })
}).Class
},{"../../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","../channel":"/Users/youzi/dev/mtv-play/components/second/channel/index.js","../channels":"/Users/youzi/dev/mtv-play/components/second/channels/index.js","../discover":"/Users/youzi/dev/mtv-play/components/second/discover/index.js","../episode":"/Users/youzi/dev/mtv-play/components/second/episode/index.js","../show":"/Users/youzi/dev/mtv-play/components/second/show/index.js","../shows":"/Users/youzi/dev/mtv-play/components/second/shows/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/second/switcher/style.less","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/app/ui/switcher":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/second/switcher/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/switcher/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Switcher = require('vigour-js/app/ui/switcher')
  , cases = require('vigour-js/browser/cases')
  , app = require('vigour-js/app/')

module.exports = exports = new Switcher
( { css:'app-switcher'
  , w:{parent:'w'}
  , h:{parent:'h'}
  , on:
    { state:
      { defer:function( update ){
          var parent = this._parent
            , caller = parent._caller
            , state = this.from.val
            , content = parent.content._val
            , favourites = parent.favourites._val
            , navigation = parent.navigation._val
            , receiver = parent.receiver._val
            , highlight = parent.highlight._val
            , overlay = parent.overlay._val
            , watched = parent.watched._val
            , search = parent.search._val
            , usage = parent.usage._val
            , volume = parent.volume._val
            , scroll = parent.scroll._val
            , carousel = parent.carousel._val
            , notification = parent.notification._val
            , popup = parent.popup._val
            , play = parent.play._val
            , loading = parent.loading._val
            , profilepic = parent.profilepic._val
            , activeClient = parent.activeClient._val
            , videoData
            , seasonData
            , showData
            , Class
            , params
            , reset


          // console.log('2222!!! lezzzgo', navigation.page.val, state )

          if( state === 'empty')
          {  
            Class = new Element().Class
          }
          else if( state === 'first' || ( state === 'player' && ( cases.desktop || cases.tablet ) ) )
          {

            //!cases.cast TODTODOTDTODO
            //aparte first maken voor de tv
            Class = exports.first || ( exports.first = require('../first') )

            if( cases.tv ) 
            {
              // console.log('!!! lezzzgo', navigation.page.val )
              params =
              { switcher:
                { on:
                  { content: content
                  , page: navigation.page
                  , show: navigation.show
                  , media: navigation.media
                  }
                }
              }
              params.sidemenu = { data: { page: navigation.page } }
            }
            else
            {
              params = 
              { on: 
                { overlay: overlay
                , popup: popup
                , notification:notification
                , loading: loading
                , state:this.from
                }
              , section:
                { on://stuff for miniplayer maybe move elsewhere?
                  { msmedia:receiver.media
                  , usage:usage
                  , play:receiver.playing
                  , volume:receiver.volume
                  }
                , topbar:
                  { on:
                    { page:navigation.page
                    , show:navigation.show
                    , media:navigation.media
                    }
                  }
                , switcher:
                  { on:
                    { content:content
                    , favourites:favourites
                    , page:navigation.page
                    , show:navigation.show
                    , season:navigation.season
                    , media: navigation.media
                    , highlight:highlight
                    , scroll:scroll
                    , search:search
                    , usage:usage
                    , volume:volume
                    , watched:watched
                    , carousel:carousel
                    , play:play
                    , ms:receiver
                    }
                  }
                }
              }

              if(cases.phone) params.section.topmenu = { data: { page:navigation.page } }
              else params.sidemenu = { data: { page:navigation.page }}

            }

          }
          else if( state === 'second' )
          {
            
            Class = exports[state] || ( exports[state] = require('../second') )

            //DEBUG
            // if( activeClient && !exports.TEST ){
            //   exports.TEST = true
            //   activeClient.on(function(){
            //     console.error('jippie!!',activeClient.val)
            //   })
            // }


            params =
            { switcher:
              { on:
                { content:parent.content
                , page:navigation.page
                , show:navigation.show
                , season:navigation.season
                , channel:navigation.channel
                , media:navigation.media
                , highlight:highlight
                , scroll:scroll
                , search:search
                , usage:usage
                , watched:watched
                , carousel:carousel
                }
              }
            , bar:
              { data:{activeClient:activeClient}
              }
            }

          }
          else if( state === 'player' ) //cases.tv chromecast
          {
            Class = exports[state] || ( exports[state] = require('../player') )

            videoData = this._val.video.from

            if(videoData._parent._name === 'episodes')
            {
              seasonData = videoData._parent._parent
              showData = seasonData._parent._parent
              params =
              { data:
                { show:showData
                , season:seasonData
                , media:videoData//navigation.media
                , mediausage:usage.from.get(videoData._contentPath)
                , volume:volume
                }
              }
            }
            else if(videoData._parent._name === 'channels')
            {
              params =
              { data:
                { media:videoData//navigation.media
                , mediausage:usage.from.get(videoData._contentPath)
                , volume:volume
                }
              }
            }

          }

          if( Class )
          {
            caller.transition = 
            { element:Class
            , $params:params
            , $options:{force:reset}
            }
            
            app.user.updateNavigation()
            
          }

          update()
        }
      }
    }
  , onTransition:function( current, last ){
      if( last ) last.remove()
      this.add( current )
    }
  }
).Class



// exports.player = require('../player/fullscreen')
},{"../first":"/Users/youzi/dev/mtv-play/components/first/index.js","../player":"/Users/youzi/dev/mtv-play/components/player/index.js","../second":"/Users/youzi/dev/mtv-play/components/second/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/switcher/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/app/ui/switcher":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/components/switcher/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/components/text/index.js":[function(require,module,exports){
var Element = require('vigour-js/app/ui/element')
  , dictionary = require('vigour-js/app/dictionary')

exports.Title = new Element(
{ text:
  { data:'title'
  // , default:
  //   { dictionary: 'text.untitled'
  //   }
  }
}).Class

var seasonText = dictionary.get( 'text.season' )
var seasonsText = dictionary.get( 'text.seasons' )
var episodeText = dictionary.get( 'text.episode' )
var episodesText  = dictionary.get( 'text.episodes' )

exports.Subtitle = new Element(
{ text:
  { data:
    { val:function( data ){

        if( data ) data = data.from
        if( !data ) return ''
        if( data.subtitle ){
          return data.subtitle.val || ''
        }

        if( data.number )
        {

          var seasondata = data._parent._parent
            , seasonnr = seasondata.number
              ? seasondata.number.val
              : (data.season && data.season.val) || ((seasondata._name | 0)+1)

          if(data._parent._name === 'seasons'){
            return seasonText.val + ' ' + data.number.val
          }
          if(!isNaN(seasonnr)){
            return seasonText.val 
            + ' ' + seasonnr + ' ' 
            + episodeText.val
            + ' ' + data.number.val
          }
        }

        if( data.seasonCount && data.episodeCount ) 
        {

          var seasoncnt = data.seasonCount.val
            , seasons = data.seasonCount.val > 1 
              ? seasonsText.val
              : seasonText.val
            , episodecnt = data.episodeCount.val
            , episodes = data.episodeCount.val > 1 
            ? episodesText.val 
            : episodeText.val

          return seasoncnt 
                  + ' ' + seasons 
                  + ' ' + episodecnt 
                  + ' ' + episodes 
                  || ''
        }
        return ''
      }
    , listen:[ 'seasonCount', 'episodeCount', 'subtitle', 'number', 'season' ] // <---------- add on specific spots! THIS IS WRONG
    }
  , listen: dictionary
  }
}).Class

exports.TitleSubtitle = new Element(
{ title:new exports.Title()
, subtitle:new exports.Subtitle()
}).Class

exports.Description = new Element(
{ text:
  { data:'media.description'
  , default:
    { dictionary: 'text.noDescription'
    }
  }
}).Class

exports.highlight = function(string){
  var firstletter = string.charAt(0)
    , rest = string.slice(1)
    , str = firstletter !== 'i' ? firstletter.toUpperCase() + rest : firstletter + rest.charAt(0).toUpperCase() + rest.slice(1);
  return '<span class="text-highlight">' + str + '</span>'
}
},{"vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/components/text/input.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Icon = require('../icon')
  , app = require('vigour-js/app/')
  , events = require('vigour-js/browser/events')
  , cases = require('vigour-js/browser/cases')
  , util = require('vigour-js/util')
  , offset = require('vigour-js/browser/events/offset')
  , ua = require('vigour-js/browser/ua')
  , item = new Element({
    css:'ui-item ui-input',
    lefticon: new Icon({icon:'email'})
  })
  , firefox = ua.browser === 'firefox'
  , dictionary = require('vigour-js/app/dictionary')

//--------------- extensions ---------------

//constants
item.extend(
{ input:function(val) {

    var v = val.val
      , type
      , field = val && val.text && val.text.val

    if( v )
    {
      type =
      { email:
        { text: field || 'text.email'
        , msg: 'text.account.invalid.email'
        }
      // , phone: constants.invalid.phone
      , password:
        { text: field || 'text.password'
        , msg: 'text.invalid.password'
        , icon:'locked'
        }
      , phone: {
          text: 'text.cellphone'
        , msg: 'text.invalid.phoneWord'
        }
      }

      this.txt.text = type[v]
                    ? { dictionary :type[v].text }
                    : v

      this.lefticon.icon = type[v].icon || v
    }

    if( v === 'phone' ) {
      this.txt.attr = { type: 'tel', pattern: '\d*' }
    } else if( v==='age' ) {
      this.txt.attr = { type: 'tel', pattern: '\d*' }
    }

  }
},
{
  name:'key',
  get:function() {
    return (this.input && this.input.val) || this.txt.attr && this.txt.attr.type.val
  }
},
{
  name:'msg',
  get:function() {
    return map[this.key].msg
  }
}
,
{ name:'val'
, get:function() {
    return this.txt.node.value
  }
})

//--------------- input ----------------

module.exports = exports = item.set(
{ txt:
  { node:'input'
  , attr:{ type:'text', autocapitalize:'off'}
  , text:'search'
  , css:'inactive'
  , events:
    { focusin:focusIn
    , focusout:focusOut
    , keyup:firefox && focusIn
    , input:verify
    , move:function(e) {
        e.preventDefault()
      }
    , click:function(e) {
        if(e) e.preventDefault()
        app.blockResize = true

        this.node.focus()
        if(firefox) focusIn.call( this )
      }
    , down:function(e) {
        if(events.click.block) return;
        var t = this
        var holder = t.parent.input && t.parent.input.holder
        if(cases.touch && holder && holder.val) correctY(t, holder.val)
      }
    }
  }
, events:
  { out:function(e) {
      if(e.target.tagName!=='INPUT') this.txt.node.blur()
    }
  }
}).Class

//--------------- form ----------------

events.confirm = {
  val:{
    up: function (e, method, val) {
      e.preventDefault()
      method.call(this, e, val)
    }
  }
}

exports.Form = new Element(
{ node:'form'
, submitfix:
  { node:'input'
  , 'attr.type': 'submit'
  }
, events: 
  { submit: function( e ) {
      e.preventDefault()
      if( (!cases.touch || this.fDown ) && this.done )
      {
        this.done()
      }
    }
  , down: function (e ) {
      this.fDown = true
    }
  }
}).Class

exports.Form.base.extend(
{ verify:function(){}
})

//--------------- functions ----------------

function correctY(input, holder) {
  //ios full geen animatie
  holder.focused = input
  if(!holder.corrected) holder.corrected = app.h.val

  var y = offset.y(input)
    , h = holder.corrected - 380

  if(y > h) {
    var hY = holder.y.val
    if(!cases.ios) holder.focusing = true
    if(!holder.y.animation && !cases.ios) {
      holder.y = {animation:
         { time:10
         , easing:'outCubic'
         , complete:function() {
            // if(input.focusing) input.txt.node.focus() //ios fix
            this.focusing = false

         }
        }
      }
    }
    holder.y = {sub:y-h-10}
  }
}

function focusIn(e) {

  // e.preventDefault()
  // this.parent.y =

  var node = this.node

  document.body.scrollTop = 0;
  window.requestAnimationFrame(function(){ document.body.scrollTop = 0; })

  var input = this.parent.input

  app.blockResize = true
  // correctY(input, this.parent.parent)

  this.parent.css = 'ui-item ui-input active focus'

  if(node.value===this.text.val) node.value = ''
  if(input && input.val==='password') {
    node.setAttribute('type','password')
    node.setAttribute('autocapitalize','off')
    //autocapitalize="off"
  }

  if( firefox )
  {
    var _this = this
      , listener = function () {
          focusOut.call( _this )
          node.removeEventListener('blur',listener,true)
        }
    node.addEventListener('blur', listener, true);
  }
}

function focusOut() {
  if(this.focusing) return;

  window.scrollTo(0,0)

  app.blockResize = false

  var input = this.parent.input
    , holder

  if(cases.touch && input && input.holder) {
    holder = input.holder.val
    if(holder && !holder.focusing) holder.y = { sub:0 }
  }

  if(this.node.value==='') {
    this.node.value = this.text.val
    this.parent.css = 'ui-item ui-input'
    if(input && input.val==='password') {
      this.node.setAttribute('type','text')
    }
  } else {
    this.parent.css = 'ui-item ui-input active'
  }
}

function verify(e) {
  var type = this.node.type
    , parent = this.parent
    , val = this.node.value
    , input

  if(type!=='text' || parent.input) {
    input = parent.input.val
    if(input==='password') {
      parent.verified = val.length > 5
    } else if(type === 'email' || input === 'email') {
      parent.verified = /^[a-zA-Z0-9._%+-]+@[A-Za-z0-9.-]+\.[a-zA-Z]{2,4}$/.test(val)
      this.node.value = val.trim()
    } else if(parent.input && parent.input.val==='phone') {
      parent.verified = /^(\d){6,12}$/.test(val)
    } else if(parent.input && parent.input.verify && (parent.input.verify.__t===1)) {
      parent.verified = val>parent.input.verify[0]&&val<parent.input.verify[1]
    } else {
      parent.verified = val.length > 2
    }

    if(parent.input && parent.input.keyup && typeof parent.input.keyup._val === 'function') {
      parent.input.keyup._val.call(parent,parent.verified)
    }

    var form = this._form !== false
      && (this._form || (this._form = this.checkParent('verify') ) || false )
      , verify = form && form.verify
      , notVerified
      , righticon
      , i

    if(verify)
    {
      righticon = this._righticon
               || ( this._righticon = this.checkParent('topbar.holder.righticon',true) )

      for (i = verify.length - 1; i >= 0; i--) {
        if(!form[verify[i]._val].verified)
        {
          // console.error(form.verificationError)
          notVerified = true
          form.verificationError = verify[i]
          // break
        }
      }
      righticon.css = notVerified ? 'pointer' : 'pointer verified'
      righticon.verified = !notVerified
      form.verified = !notVerified
    }
  }
}
},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/text/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js","vigour-js/browser/events/offset":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/offset.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/components/text/search.js":[function(require,module,exports){
require('./style.less')

var Element = require('vigour-js/app/ui/element')
  , Icon = require('../icon')
  , dictionary = require('vigour-js/app/dictionary')
  , events = require('vigour-js/browser/events')
  , cases = require('vigour-js/browser/cases')
  , app = require('vigour-js/app/')

module.exports = new Element(
{ node:'form'
, css:'ui-search'
, name:'search'
, w:{val:210,touch:{val:app.w, sub:30}}
// , model:{field:'search'}
, icon:new Icon(
  { icon:'search'
  , h:30
  , placeholder:{ 'text.dictionary': 'text.search' }
  })
, field:
  { node:'input'
  , attr:
    { type:'text'
    , name:'search'
    , listen: dictionary.get( 'text.search' )
    , placeholder: dictionary.get( 'text.search' )
    }
  , text:{ 
      data:function(data) {
        if(data) {
          var val = data.search.val

          if( !this.first && !val ) {
            // console.log('HEY!', val)
          } else {
            this.first = true
          }

          if(this.first) {
            input(val,this.parent.parent)
            if(val === void 0 || val === false) {
              // if(!cases.touch)
              exit(this.parent)
            } else if(!this.parent.fromDown) {
              focus.call(this.parent,false,false, true)
            } else {
              this.parent.fromDown = false
            }
          }
          return val || ''
        }
        return ''
      }
    }
  , events:
    { keydown:function(e){
        if(e.keyCode == 13) e.preventDefault()
      }
    , keyup:function(e) {
        if(e.keyCode !== 9) {
          var srch = this.node.value.length ? this.node.value.trim() : ''
          // console.log('....', srch, this.data.search.$userOrigin._path)
          this.data.search.$userOrigin = srch
        }
      }
    }
  }
, clear:new Icon(
  { node:'form'
  , icon:'empty'
  , events:
    { down:function(e){
        e.prevent = true
        this.parent.fromDown = true

        //TODO: figure out why this.parent does not have data bound to it!
        this.parent.field.data.search.$userOrigin = ''

        if(!cases.touch) exit(this.parent,true)
        else {
          var val = ''
            , field = this.parent.field.node

          field.value = val
          focus.call(this.parent)
          input(val,this.parent.parent)
        }
      }
    }
  })
, cancel:
  { 'text.dictionary': 'text.cancel'
  , events:
    { down:function(e){
        e.prevent = true
        exit(this.parent,true)

        //TODO: figure out why this.parent does not have data bound to it!
        this.parent.data.search.$userOrigin = ''
      }
    }
  }
, events:
  { click:focus
  , out:function(e){
      if(this._active) exit(this)
    }
  }
})

function opacity(list,val){
  if(cases.touch){
    events.click.block = val === 1 ? false : true
    list.items.opacity = val
    list.favos.opacity = val
  }
}

function input(val,list){
  
  if(val && val.__t === 2) {
    throw new Error('object in search')
  }

  val = val && val.trim() || ''
  if(val.length){
    list.favos.display = 'none'
    list.search.clear.icon = 'closesmall'
  } else { 

    list.favos.display = 'block' //ff die transform repareren
  
    list.search.clear.icon = 'empty'
    
    var srch = val ? val.trim() : ''
    list.search.field.data.search.$userOrigin = srch
  }
  var str = '';
  for(var letter=0,len=val.length;letter<len;letter++) {
    var lett = val[letter]
    if(lett === '$' || lett.toUpperCase() === 'S') lett = '(\\$|s)'
    str+='\\s*'+lett
  }
  str += '\\s*'

  if(list.items.filter) list.items.filter.filter = 
  { condition: { title:{ $contains:str } } 
  , sort:'title' 
  }

}

function focus( e, events, fromModel ){
  this.css = 'ui-search focus'
  if(!fromModel) { 
    app.blockResize = true
    opacity(this.parent,0.5)
    this.field.node.focus()
    this._active = true
  }
}

function exit(form,clear){
  var val = clear ? '' : form.field.node.value.trim()

  if(!val.length){
    form.css = 'ui-search'
    form.clear.icon = 'empty'
    form.field.node.value = val
    input(val,form.parent)
  }

  opacity(form.parent,1)
  form._active = false
  app.blockResize = false
}
},{"../icon":"/Users/youzi/dev/mtv-play/components/icon/index.js","./style.less":"/Users/youzi/dev/mtv-play/components/text/style.less","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/app/dictionary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js","vigour-js/app/ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js"}],"/Users/youzi/dev/mtv-play/components/text/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/config.js":[function(require,module,exports){
window.name = 'mtvplay'

// window.package = require('./package.json')
// console.log('wtf...', window.package)

module.exports = exports = require( 'vigour-js/util/config' )
              .inject
              ( { 'repository.branch': 'branches' }
              , require( 'vigour-js/util/config/ua' )
              )

exports( function( result ) {
  for(var key in result) {
    // console.log('\n', i, result[i])
    exports[key] = result[key] 
  }
  exports.parsed = true

}, false, window.package, true )


},{"vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/util/config/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/ua.js"}],"/Users/youzi/dev/mtv-play/index.js":[function(require,module,exports){

window.package = require('package.json');

//override for testing
// window.__ua__ = { device:'tv' }

var config = require('./config')
  , remote


if( config.development && config.development.button )
{
  remote = require( 'vigour-js/util/debug' )
            .native( false, false, function(url) {} , 'build' )
}

if( !remote )
{
  var cases = require( 'vigour-js/browser/cases' )
    , ua = require( 'vigour-js/browser/ua' )
  //entry points

  if( ~window.location.href.indexOf( '$tv' ) )
  {
    cases.tv = true
    ua.device = 'tv'
  }

  if( ~window.location.href.indexOf( '$chromecast' ) )
  {
    cases.chromecast = true
    ua.device = 'chromecast'
  }

  if( ua.device === 'tv' && ua.platform === 'linux' ) {
    ua.platform = 'lg'
  }

  require('vigour-js/app/')

  if( cases.tv || cases.chromecast )
  {
    cases.$iplogin = true
  }

  if( cases.chromecast )
  {
    require( './platform/cast.js' )
  }
  else if( cases.tv )
  {
    require( './platform/tv.js' )
  }
  else
  {

    cases.phoneBrowser = ua.device === 'phone' && !( cases.native || cases.$isIosFull )
    require( './platform/all.js' )
  }

}
},{"./config":"/Users/youzi/dev/mtv-play/config.js","./platform/all.js":"/Users/youzi/dev/mtv-play/platform/all.js","./platform/cast.js":"/Users/youzi/dev/mtv-play/platform/cast.js","./platform/tv.js":"/Users/youzi/dev/mtv-play/platform/tv.js","package.json":"package.json","vigour-js/app/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/util/debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/debug/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/promise/index.js":[function(require,module,exports){
'use strict';

module.exports = require('./lib/core.js')
require('./lib/done.js')
require('./lib/es6-extensions.js')
require('./lib/node-extensions.js')
},{"./lib/core.js":"/Users/youzi/dev/mtv-play/node_modules/promise/lib/core.js","./lib/done.js":"/Users/youzi/dev/mtv-play/node_modules/promise/lib/done.js","./lib/es6-extensions.js":"/Users/youzi/dev/mtv-play/node_modules/promise/lib/es6-extensions.js","./lib/node-extensions.js":"/Users/youzi/dev/mtv-play/node_modules/promise/lib/node-extensions.js"}],"/Users/youzi/dev/mtv-play/node_modules/promise/lib/core.js":[function(require,module,exports){
'use strict';

var asap = require('asap')

module.exports = Promise;
function Promise(fn) {
  if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new')
  if (typeof fn !== 'function') throw new TypeError('not a function')
  var state = null
  var value = null
  var deferreds = []
  var self = this

  this.then = function(onFulfilled, onRejected) {
    return new self.constructor(function(resolve, reject) {
      handle(new Handler(onFulfilled, onRejected, resolve, reject))
    })
  }

  function handle(deferred) {
    if (state === null) {
      deferreds.push(deferred)
      return
    }
    asap(function() {
      var cb = state ? deferred.onFulfilled : deferred.onRejected
      if (cb === null) {
        (state ? deferred.resolve : deferred.reject)(value)
        return
      }
      var ret
      try {
        ret = cb(value)
      }
      catch (e) {
        deferred.reject(e)
        return
      }
      deferred.resolve(ret)
    })
  }

  function resolve(newValue) {
    try { //Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.')
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then
        if (typeof then === 'function') {
          doResolve(then.bind(newValue), resolve, reject)
          return
        }
      }
      state = true
      value = newValue
      finale()
    } catch (e) { reject(e) }
  }

  function reject(newValue) {
    state = false
    value = newValue
    finale()
  }

  function finale() {
    for (var i = 0, len = deferreds.length; i < len; i++)
      handle(deferreds[i])
    deferreds = null
  }

  doResolve(fn, resolve, reject)
}


function Handler(onFulfilled, onRejected, resolve, reject){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null
  this.onRejected = typeof onRejected === 'function' ? onRejected : null
  this.resolve = resolve
  this.reject = reject
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, onFulfilled, onRejected) {
  var done = false;
  try {
    fn(function (value) {
      if (done) return
      done = true
      onFulfilled(value)
    }, function (reason) {
      if (done) return
      done = true
      onRejected(reason)
    })
  } catch (ex) {
    if (done) return
    done = true
    onRejected(ex)
  }
}

},{"asap":"/Users/youzi/dev/mtv-play/node_modules/promise/node_modules/asap/asap.js"}],"/Users/youzi/dev/mtv-play/node_modules/promise/lib/done.js":[function(require,module,exports){
'use strict';

var Promise = require('./core.js')
var asap = require('asap')

module.exports = Promise
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this
  self.then(null, function (err) {
    asap(function () {
      throw err
    })
  })
}
},{"./core.js":"/Users/youzi/dev/mtv-play/node_modules/promise/lib/core.js","asap":"/Users/youzi/dev/mtv-play/node_modules/promise/node_modules/asap/asap.js"}],"/Users/youzi/dev/mtv-play/node_modules/promise/lib/es6-extensions.js":[function(require,module,exports){
'use strict';

//This file contains the ES6 extensions to the core Promises/A+ API

var Promise = require('./core.js')
var asap = require('asap')

module.exports = Promise

/* Static Functions */

function ValuePromise(value) {
  this.then = function (onFulfilled) {
    if (typeof onFulfilled !== 'function') return this
    return new Promise(function (resolve, reject) {
      asap(function () {
        try {
          resolve(onFulfilled(value))
        } catch (ex) {
          reject(ex);
        }
      })
    })
  }
}
ValuePromise.prototype = Promise.prototype

var TRUE = new ValuePromise(true)
var FALSE = new ValuePromise(false)
var NULL = new ValuePromise(null)
var UNDEFINED = new ValuePromise(undefined)
var ZERO = new ValuePromise(0)
var EMPTYSTRING = new ValuePromise('')

Promise.resolve = function (value) {
  if (value instanceof Promise) return value

  if (value === null) return NULL
  if (value === undefined) return UNDEFINED
  if (value === true) return TRUE
  if (value === false) return FALSE
  if (value === 0) return ZERO
  if (value === '') return EMPTYSTRING

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then
      if (typeof then === 'function') {
        return new Promise(then.bind(value))
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex)
      })
    }
  }

  return new ValuePromise(value)
}

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr)

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([])
    var remaining = args.length
    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then
          if (typeof then === 'function') {
            then.call(val, function (val) { res(i, val) }, reject)
            return
          }
        }
        args[i] = val
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex)
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i])
    }
  })
}

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) { 
    reject(value);
  });
}

Promise.race = function (values) {
  return new Promise(function (resolve, reject) { 
    values.forEach(function(value){
      Promise.resolve(value).then(resolve, reject);
    })
  });
}

/* Prototype Methods */

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
}

},{"./core.js":"/Users/youzi/dev/mtv-play/node_modules/promise/lib/core.js","asap":"/Users/youzi/dev/mtv-play/node_modules/promise/node_modules/asap/asap.js"}],"/Users/youzi/dev/mtv-play/node_modules/promise/lib/node-extensions.js":[function(require,module,exports){
'use strict';

//This file contains then/promise specific extensions that are only useful for node.js interop

var Promise = require('./core.js')
var asap = require('asap')

module.exports = Promise

/* Static Functions */

Promise.denodeify = function (fn, argumentCount) {
  argumentCount = argumentCount || Infinity
  return function () {
    var self = this
    var args = Array.prototype.slice.call(arguments)
    return new Promise(function (resolve, reject) {
      while (args.length && args.length > argumentCount) {
        args.pop()
      }
      args.push(function (err, res) {
        if (err) reject(err)
        else resolve(res)
      })
      var res = fn.apply(self, args)
      if (res && (typeof res === 'object' || typeof res === 'function') && typeof res.then === 'function') {
        resolve(res)
      }
    })
  }
}
Promise.nodeify = function (fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments)
    var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null
    var ctx = this
    try {
      return fn.apply(this, arguments).nodeify(callback, ctx)
    } catch (ex) {
      if (callback === null || typeof callback == 'undefined') {
        return new Promise(function (resolve, reject) { reject(ex) })
      } else {
        asap(function () {
          callback.call(ctx, ex)
        })
      }
    }
  }
}

Promise.prototype.nodeify = function (callback, ctx) {
  if (typeof callback != 'function') return this

  this.then(function (value) {
    asap(function () {
      callback.call(ctx, null, value)
    })
  }, function (err) {
    asap(function () {
      callback.call(ctx, err)
    })
  })
}

},{"./core.js":"/Users/youzi/dev/mtv-play/node_modules/promise/lib/core.js","asap":"/Users/youzi/dev/mtv-play/node_modules/promise/node_modules/asap/asap.js"}],"/Users/youzi/dev/mtv-play/node_modules/promise/node_modules/asap/asap.js":[function(require,module,exports){
(function (process){

// Use the fastest possible means to execute a task in a future turn
// of the event loop.

// linked list of tasks (single, with head node)
var head = {task: void 0, next: null};
var tail = head;
var flushing = false;
var requestFlush = void 0;
var isNodeJS = false;

function flush() {
    /* jshint loopfunc: true */

    while (head.next) {
        head = head.next;
        var task = head.task;
        head.task = void 0;
        var domain = head.domain;

        if (domain) {
            head.domain = void 0;
            domain.enter();
        }

        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function() {
                   throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    flushing = false;
}

if (typeof process !== "undefined" && process.nextTick) {
    // Node.js before 0.9. Note that some fake-Node environments, like the
    // Mocha test runner, introduce a `process` global without a `nextTick`.
    isNodeJS = true;

    requestFlush = function () {
        process.nextTick(flush);
    };

} else if (typeof setImmediate === "function") {
    // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
    if (typeof window !== "undefined") {
        requestFlush = setImmediate.bind(window, flush);
    } else {
        requestFlush = function () {
            setImmediate(flush);
        };
    }

} else if (typeof MessageChannel !== "undefined") {
    // modern browsers
    // http://www.nonblocking.io/2011/06/windownexttick.html
    var channel = new MessageChannel();
    channel.port1.onmessage = flush;
    requestFlush = function () {
        channel.port2.postMessage(0);
    };

} else {
    // old browsers
    requestFlush = function () {
        setTimeout(flush, 0);
    };
}

function asap(task) {
    tail = tail.next = {
        task: task,
        domain: isNodeJS && process.domain,
        next: null
    };

    if (!flushing) {
        flushing = true;
        requestFlush();
    }
};

module.exports = asap;


}).call(this,require('_process'))

},{"_process":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/process/browser.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/cloud.js":[function(require,module,exports){
var Cloud = require('vigour-js/browser/network/cloud')
    .inject(
      require('vigour-js/browser/network/cloud/datacloud'),
      require('vigour-js/browser/network/cloud/authenticate')
    ),
  Value = require('vigour-js/value'),
  Data = require('vigour-js/data'),
  util = require('vigour-js/util'),
  cases = require('vigour-js/browser/cases'),
  ua = require('vigour-js/browser/ua'),
  raf = require('vigour-js/browser/animation/raf')

// var semver = require('vigour-js/util/semver')

require('vigour-js/value/flags/process') // mustbecome injectable on object ( all these extension should be located seperately )

function setClientInfo (cloud, base) {
  // todo: move client to cloud

  var client = cloud.data.get(['clients', cloud.clientid]),
    title, device, castId

  if (cases.ios) {
    title = ua.device === 'phone' ? 'iphone' : 'ipad'
    device = ua.device === 'phone' ? title : ua.device
  } else {
    if (ua.platform === 'appletv') {
      title = 'Apple TV'
      device = 'airplay'
    } else if (cases.chromecast) {
      title = 'Chromecast'
      device = 'chromecast'
      castId = window.sessionId
    } else {
      device = ua.device
      title = cases.desktop ? ua.platform : ua.platform + ' ' + device
    }
  }

  var obj = {
    title: title,
    device: device
  }
  if (castId) {
    obj.castId = castId || false
  }


  // console.log('hey set my client info mofo!')

  client.val = obj
  cloud.client.val = client

  // DEBUG LOGS: 
  // cloud.client.on(function(val, stamp, from){
  //   // console.log('\n\n\n\nupdate kenker', val, from)
  //   var origin = from || this._updateOrigin
  //   if(val && val.token || (origin && origin._name === 'token')) {
  //     console.error('TOKENSETTOKENSETTOKENSET', val && (val.token || val) )
  //   }
  // })

  // user.clientUserToken = user.client.from.get('userToken') deze is duidelijk fucked up and has to be fixed
}

exports.extend = util.extend( require('./values'), function (base) {
  var _cloud = new Cloud(new Value())
    , _first //= true
  
  cases.$connected = new Value( _cloud.connected )

  // todo: move to cloud
  _cloud.client = new Value()

  _cloud.once('welcome', function (id) {
    setClientInfo(_cloud, base)
  })

  // _cloud.on('reconnect',)
  // console.error('>>> adding reconnect listener')
  _cloud.on('reconnect', function() {
    // console.log('>>>> reconnect set up reset client info!', _cloud.client.from.raw)
    var setObj = {}
    _cloud.client.from.each(function(i) {
      if(i !== 'key' && i !== 'type' && i !== 'ip'){
        setObj[i] = this._val
      }
    })
    _cloud.client.from.on('remove', function() {
      if(Object.keys(setObj).length) {
        // console.log('reset dat client info', setObj)
        _cloud.data.clients.set(_cloud.clientid, setObj)
      }
    })
  })

  base.define({
    cloud: {
      get: function () {
        return _cloud
      },
      set: function (val) {
        if (util.isObj(val)) {
          if (val.fastLogin) {
            _cloud.fastLogin.val = true
          }

          if (val.api) {
            _cloud.api.val = val.api
          }

          if (val.url) {
            _cloud.url.val = val.url
          }
        } else {
          _cloud.url.val = val
        }
      }
    }
  })

  var _version = new Data( _cloud.data.get('app'), { subscription: { $:true } } )

  //semvar -- APP VERSION DOES NOT WORK!
  base.versionData = new Value({
    val: _version,
    defer: function(update, args) {
      var doUpdate
      var t
      if(this.from.version) {
        void(0)
        if( !window.package ) 
        {
          void(0)
        }
        else 
        {
          var newversion = this.from.version.val
            , oldversion = window.package.version

          if(newversion && oldversion) {
            newversion = newversion.split('.')
            oldversion = oldversion.split('.')
            newversion = Number(newversion[1])
            oldversion = Number((oldversion[1]||0))
            if( newversion > oldversion ) {
              doUpdate = true
              this.clearCache()
              window.package.version = this.from.version.val
            }
          }
        }
      } 
      update( doUpdate ? void 0 : true )
    }
  })

})


},{"./values":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/values.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/network/cloud":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/index.js","vigour-js/browser/network/cloud/authenticate":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/authenticate.js","vigour-js/browser/network/cloud/datacloud":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/datacloud.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","vigour-js/value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/content.js":[function(require,module,exports){
var Value = require('../value')
  , CloudData = require( '../browser/network/cloud/data' )
  , util = require('../util')

util.define
( CloudData
, '_contentPath'
, { get: function() {
      var p = this._path
      for(var i in p ) {
        if( p[i] === 'shows' || p[i] === 'channels' ) {
          return p.slice( i )
        }
      }

      void(0)
      // throw new Error('_contentPath used on non-content data')
      // return this._path.slice( base.instances[0].data.from._path.length )
    }
  }
)

exports.extend = util.extend( 
  require('./values')
, require('./cloud')
, function( app ) {
    var content = app.content = new Value({})
    // var get = Value.prototype.get
    util.define(content, 'get', function(){
        if( this._val && this._val.cloud ) { 
          return this._val.get.apply(this._val, arguments) 
        } else { 
          throw new Error( 'app.content , dont have cloud data!') 
        }
      })

    app.region.on(onChange)
    app.language.on(onChange)

    onChange()

    function onChange(){
      var region = app.region.val
        , language = app.language.val

      //TODO:make this configurable in the app
      if(language==='it') {
        language = 'en'
      }

      if(region && language){
        //TODO: make mtvData configurable
        content.val = app.cloud.data.get(['mtvData', region, language])
      }
    }
    
  }
)

},{"../browser/network/cloud/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/data.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","./cloud":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/cloud.js","./values":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/values.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/dictionary/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 */
var util = require( '../../util' )
	, Element = require( '../ui/element' )
	, Value = require( '../../value' )
	, vObject = require( '../../object' )

Value.operators._dictionary = function( val, operator ) {
	return operator === false ? val : operator
}

//TODO: replace with a networkdata type value later -- get specific translations
//packer methods on .json files
//.json?path='text.blurf'

module.exports = exports = new Value({})

util.define(
  exports, 'get' , function( val ) {
		if( exports.map && exports.map[val] ) {
      val = exports.map[val]
    }
    // exports.map[]
		return typeof val === 'string' && util.path( exports, [ 'responseData' ].concat( val.split('.') ), '' )
	}
)

//set and listen to _dictionary (dictionary operator)
//just sets a flag to a thing in the dictionary
Value.flags.dictionary = {
	set: function( val, stamp ) {
		//TODO: if not there add a listener to exports
		// -- listener has one array updates when nessevary
		if( typeof val !== 'string' )
		{
			//dictionary addListener!
			this.set( '_dictionary', {
				val: val
			, transform: function( val, cv ) {
					
          if( cv && cv.text ) return cv.text

					var dict = exports.get( cv )
					if( dict ) {
						if( dict instanceof vObject ) {
              exports.once( function(){
                val._update()
              })
							return dict.val
						}
						else {
							return dict
						}
					}
				}
			})

		} else {
      var g = exports.get( val )
      g._clearCache = true
			this.val = g
		}
	}
}

exports._name = 'dictionary'
//more advanced things like creating the fields , creating possible maps


/* ------------ dictionary ------------ */

/*
//TODO:make dictionary init after ready
app.dictionary.val =
{ ajax: function( ajax, val ) {
    if( this.val ) {
      if( this._cached === this.val ) return;
      this._cached = this.val
      return this.val && config.dictionary( this.val )
    }
  }
, val: user.language
}

*/
},{"../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../ui/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * 
 * could think of something so style requires are parsed optionaly
 * maybe in vigour-js use dynamic script tags and parse those /w gaston if you are using gaston
 * this will make it more usable for others in the future and makes it compatible with pure browserify
 */

require('./style.less')
require('../browser/animation/easing')

var Element = require('../browser/element')
  , cases = require('../browser/cases')
  , animation = require('../browser/animation')
  , events = require('../browser/events/advanced')
  , ua = require('../browser/ua')
  , raf = require('../browser/animation/raf')
  , eventUtils = require('../browser/events/util')
  , app
  , _ios = ua.platform==='ios'
  , _windows = ua.platform === 'windows'
  , arr = ['phone','tablet','tv','desktop','ios','android','windows','mac','touch','slow','chromecast'] //maybe make this configrable
  //ui/cases --
  , i = arr.length - 1

//hier process in requiren en added 'appStart' ofzoiets dergelijks
//add ook process aan base dingen dan word iets pas geadd na een bepaalde process update
//ultra mofo powerfull

cases.iosBrowser = _ios && ('standalone' in navigator && !navigator.standalone)
cases.iosFull = (!cases.iosBrowser&&_ios) || ((_ios || _windows) && !!window.cordova) || false
cases.retina = window.devicePixelRatio > 1
cases.slow = (_windows && ua.device === 'phone') || (ua.noRaf&&ua.hasTransition) || _ios && (window.screen.height === (960 / 2)) || ua.device === 'tv'
cases.native = window.cordova ? true : false
cases.windowsMobile = ua.platform === 'windows' && ua.device === 'phone' && !!window.cordova
//packer case voor web // native

app = module.exports = new Element({
  'x,y':{ val:0,clean:true,translate:true }
, node: document.body
, w: window.innerWidth
, h: window.innerHeight
, css: 'app'
})

app.cases = cases

//if(cases.iosFull) {
  // app.y = {add:20}
  // app.h = {sub:20}
//}

var listener = function() {
//   console.log('resize!!','w:',window.innerWidth,'h:',window.innerHeight,'block?:',app.blockResize)
  if(!app.blockResize) {
    // animation.prevent = true
    app.w.val = window.innerWidth
    app.h.val = window.innerHeight
    // animation.prevent = false
  } else {
    app.blockResize = false
  }
}

function defaultCase(str) {
  if( cases[str] === void 0 ) {
    cases[str] = ( ua.device === str || ua.platform === str ) ? true : false
  }
  app.css = { addClass: cases[str] ? str : 'not-'+str }
}

// listener = eventUtils.throttle(listener,60)
// listener =
// cases.noCalc = !util.hasCalc()
//case too see if app is running in a browser on ios (limits video capabilities)

if(cases.touch) events.document.addEvent('move',function(e) {
  if(!events._maybescroll && !events._setscroll) e.preventDefault()
},'app')

if('orientation' in window) window.addEventListener('orientationchange',listener)
if(!_ios) window.addEventListener('resize',listener)

//adding #<case> in url forces case, multiple hashes ==> multiple cases
//this is for testing purposes , add development indentifier for compiler

//this has to go
if(window.location.hash) {
  var hashCases = window.location.hash.split('#')[1]
    , x = hashCases.split(',')

  for(var j in x) {
    var y = x[j].split('=')
    ua[y[0]] = y[1]
  }
  
}

if(ua.device === 'tv') {
  cases.slow = true
}

for(;i >= 0;) defaultCase(arr[i--])




},{"../browser/animation":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/index.js","../browser/animation/easing":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/easing.js","../browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","../browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","../browser/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","../browser/events/advanced":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/advanced.js","../browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js","../browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","./style.less":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/style.less"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/style.less":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

var Element = require('../../../browser/element')

require('../../../value/flags/parent')
require('../../../value/flags/self')
require('../../../value/flags/process')
require('../../../value/flags/util')
require('../../../browser/events')

module.exports =
  Element
  .inject
  ( require('../../../browser/element/properties/collection')
  , require('../../../browser/element/properties')
  , require('../../../browser/element/properties/scrollbar')
  , require('../../../browser/element/properties/process')
  , require('../../../value/on')
  )


},{"../../../browser/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","../../../browser/element/properties":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/index.js","../../../browser/element/properties/collection":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/index.js","../../../browser/element/properties/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/process.js","../../../browser/element/properties/scrollbar":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/scrollbar.js","../../../browser/events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js","../../../value/flags/parent":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/parent.js","../../../value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js","../../../value/flags/self":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/self.js","../../../value/flags/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/util.js","../../../value/on":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/on.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/sprite/index.js":[function(require,module,exports){
var Element = require('../element')
  , util = require('../../../browser/events/util') 
  , sprite = new Element({ 
    'w,h':50,
    x:{translate:true,val:0}
  })

sprite.extend({ name: 'params' //this has to come from ui (element)
  , type: false
  , set: function(val) {
    this._params = val
    this.Class.prototype._params = val //temp?
  }
})

sprite.setSetting({
  name:'spinner',
  render:function() {
    var t = this
      , params = this._params || {}
      , start = params.start || 0
      , speed = params.frames || 3
      , rows = params.rows || 1
      , cols = params.cols || 0 //ignore
      , once = params.once
      , cnt = start
      , steps = (params.steps || (rows*cols-start) || 19)
      , curRow = 0
      , curCol = 0

    if(!t.display || !t.display._base===t) {
      t.display = t.display && t.display.val || 'block'
    }
    t.display.addListener([displayListener,t],true)

    t.node.style.backgroundSize = this.w.val*cols+'px auto'
    //remeber where it was perhaps if re-rendered
    if(t.display.val==='none') return

    t._spinner = util.interval(function() { //test interval for leaks
      t.node.style.backgroundPosition = 
        (-t.w.val*curCol)+'px '+(rows ? (-t.h.val*curRow) : 0)+'px'
      cnt++
      if(cnt === steps) {
        cnt = start
        if(once) {
          // console.error('XXXXX')
          removeRaf.call(t)
          return
        }
      }
      curRow = rows ? ~~(cnt/cols) : 0
      curCol = cnt-(curRow)*cols
    },speed)
  },
  remove:removeRaf
})

function removeRaf() {
     // alert('lets remove this badboy')

  if(this._spinner) {
    this._spinner()
    this._spinner = null
  }
}

function displayListener (val) {
  if(val.val==='none') {
    removeRaf.call(this)
  } else {
    if(!this._spinner) this.setting('render')
  }
}

module.exports = sprite.Class



},{"../../../browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js","../element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/element/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

var Base = require('vigour-js/base')
  , Element = require('vigour-js/browser/element')
  , Value = require('vigour-js/value')
  , VObject = require('vigour-js/object')
  , switcher = new Element()
  , cases = require('vigour-js/browser/cases')

function extendFactory( field ){
  return { name:field
  , type:false
  , set:function( fn ){
      if(fn instanceof Function)
      {
        var set = {}
        set['_'+field] = fn
        this.define(set)
      }
      else
      {
        void(0)
      }
    }
  }
}

Value.flags.$params = {
  set:function( val ) {
    this.params = val
  }
}

Value.flags.$options = {
  set:function( val ) {
    this.options = val
  }
}

switcher.extend
( { loader:{}
  , animation:{}
  , delay:{}
  , done:{}
  , force:{}
  , backFallback:
    { cache:false
    // , set:function(){}
    }
  , onTransition:
    { cache:false
    // , set:function(){}
    }
  , transition:
    { cache:false
    , set:function( val ){
        var element = val.element && val.element._val
          , params = val.params
          , options = val.options || {}
          , force = options && options.force
          , children = this.children
          , last = this._swElem || children[0]
          , base = element && element.base
          , childrenLength = children.length
          , current
          , child
          , direction
          , _this = this

        // if there are still old pages, remove these
        if( childrenLength > 1 )
        {
          for ( i = childrenLength - 1; i >= 0; i-- ) 
          {
            child = children[i]
            if( child !== last ) child.remove()
          }
        }

        //if there are old loading listeners remove these
        if( this._loading )
        {
          this._loading[1].removeListener( this._loading[0] )
          this._loading = void 0
        }

        // if( _this._timer ){
        //   clearTimeout( _this._timer )
        //   _this._timer = null
        // }

        // console.log('options?!'.green.inverse,options)
        //is it the same , is it not the same whatup!
        if( base && base instanceof Element || element === Element )
        { 
          if( !force && this._swElem && this._swElem instanceof element )
          {
            this._swElem.set( params )
          }
          else
          {
            direction = this._direction = val.direction && val.direction._val
            if( options && options.loader && !options.loader.$loaded )
            {
              if( !this.loader )
              {
                void(0)
                return
              }

              var loader = new this.loader._val.Class()

              if( options.loader instanceof VObject ) //TODO: this has gotten VERY dirty > clean this up!
              {
                options.done = function(){
                  if( !current ) current = new element( params )
                  if( loader._remove )
                  {
                    options.done = void 0
                    options.delay = cases.tablet ? 400 : 200 //dit is natuurlijk absurd
                    
                    if( _this._swElem instanceof element )
                    {
                      _this._swElem.set( params )
                    }
                    else
                    {
                      _this.onTransition._val.call( _this, current, _this._swElem , 0, options )
                    }
                    options.delay = void 0
                  }
                }

                var path = options.loader._path
                this._loading = [ function() {
                  // if( _this._timer ){
                  //   clearTimeout( _this._timer )
                  //   _this._timer = null
                  // }
                  loader._remove = true
                  if( current && options.done ) options.done()

                }, options.loader ]

                // console.log('add the listener for',path)
                this._loading[1].is('loaded', this._loading[0] )
                // _this._timer = setTimeout( this._loading[0], 5000 )
              }
              else
              {
                options.done = function(){
                  if( !current ) current = new element( params )

                  options.done = void 0
                  options.delay = 200

                  if( _this._swElem instanceof element )
                  {
                    _this._swElem.set( params )
                  }
                  else
                  {
                    _this.onTransition._val.call( _this, current, _this._swElem , 0, options )
                  }

                  options.delay = void 0
                }
              }

              options.loader = void 0

              this.onTransition._val.call( this, loader, last, direction, options)
            }
            else
            {
              current = new element(params)
              options.done = void 0
              options.delay = void 0
              options.loader = void 0
              
              this.onTransition._val.call( this, current, last , direction, options )
            }

            if( options.animation !== void 0 ) options.animation = void 0
            if( options.delay ) options.delay = void 0

          }
        }
        else if(params)
        {
          void(0)
        }
        else if(params)
        {
          void(0)
        }
      }
    }
  }
)

switcher.define
({ back:function(){ //remove back logic from switcher (you can't isolate it! ie when you land on page, what is back?)
      this.backFallback._val.call( this )
		}
  , add:function( element, previous ){
      this._swElem = element
      // try
      // {
        Element.prototype.add.apply( this, arguments )
      // }
      // catch(err)
      // {
      //   console.error('error adding the new element',err,arguments)
      // }
    }
	}
)

switcher.extend
( { name:'on'
  , set:function( val ) {
      // set history variable for all
      // val.each(function(){
      //   var from = this.$userOrigin.val
      //   if(!from) return
      //   if(!from._history) from.set('history',true)
      //   if(!this.__checked)
      //   {
      //     this.on(function(){
      //       var caller = this._parent._caller
            
      //       if(!caller._backStore)
      //       { 
      //         caller._backStore = [ this ]
      //       }
      //       else if(caller._direction === -1)
      //       {
      //         if(caller._backStore[1] !== void 0) caller._backStore.shift()
      //         else caller._backStore = [ this ]
      //       }
      //       else if(caller._direction === 1)
      //       {
      //         caller._backStore.unshift( this )
      //       }
            
      //     })
      //     this.__checked = true
      //   }
      // })
    }
  , remove:function(){ // create refs to original
      if( this._loading )
      {
        this._loading[1].removeListener(this._loading[0])
        this._loading = null
      }
      
      if( this._swTimer ) clearTimeout( this._swTimer )
      if( this._timer ) clearTimeout( this._timer )

      if( this.on.$remove ) this.on.$remove.update()
    }
  , new:function(){
      if( this.on.$new ) this.on.$new.update()
    }
  }
)

module.exports = new switcher.Class().Class
},{"vigour-js/base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/switcher/transitions.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2015, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
var app = require('vigour-js/app')
  , cases = require('vigour-js/browser/cases')
  , util = require('vigour-js/util')

exports.extend = util.extend(function(base) {
  base.set(
  { onTransition:
    { defer:function( update ){ //obscure transform
        if( exports[this._val] ) this._val = exports[this._val]
        update()
      }
    }
  })
})

//slide transition
exports.slide = function( current, last, direction, options ){
  if( direction && last ) animate( this, current, last, direction, options )
  else basic( this, current, last, direction, options )
}

//fade transition
exports.fade = function( current, last, direction, options ){    
  basic( this, current, last, direction, options )
}

//basic transition
function basic( _this, current, last, direction, options ){
  var done = options.done
    , noAnimation = options.animation === false
    , delay = options.delay

  if( last )
  {
    add( _this, current, last )

    if( noAnimation )
    {
      remove( _this, last )
      add( _this, current )

      if( done )
      {
        if( delay )
        {
          timer( _this, function(){
            if( options.done ) options.done()
          }, delay)
        }
        else done()
      }
    }
    else if( delay )
    {
      timer( _this, function(){
        fade( _this, last, options )
      }, delay)
    }
    else fade( _this, last, options )
  }
  else add( _this, current, false, done )
}

//animated transition
function animate( _this, current, last, direction, options ){
  var animationTime = 20 // make this configurable
    , appWidth = app.w.val
    , currentStart
    , forward = direction === 1
    , lastEnd

  if( forward )
  {
    currentStart = appWidth
    lastEnd = appWidth/-3
  }
  else
  {
    currentStart = appWidth/-3
    lastEnd = appWidth
  }

  if( cases.windows )
  {
    current.x = 
    { translate:true
    , val:currentStart
    }
    
    last.x =
    { translate:true
    , val:0
    }
    
    window.requestAnimationFrame(function(){
      current.x = 0
      last.x = lastEnd

      timer( _this, function(){
        remove( _this, last, options.done )
      }, 210 )
    })
  }
  else
  {
    current.x =
    { val:0
    , animation:
      { start:currentStart
      , time:animationTime
      , delay:1
      , easing:'outCubic'
      , done:function(){
          remove( _this, last, options.done )
        }
      }
    }

    last.x =
    { val:lastEnd
    , animation:
      { time:animationTime
      , delay:2
      , easing:'outCubic'
      }
    }
  }

  if( !forward ) add( _this, current, last )
  else add( _this, current )

}

function add( _this, toAdd, before, done ){
  if( toAdd ) _this.add( toAdd, before )
  if( done ) done()
}

function fade( _this, last, options ){
  last.opacity = 0
  last.node.pointerEvents = 'none'
  timer( _this, function(){
    remove( _this, last, options.done )
  }, 200)
}

function remove( _this, toRemove, done ){
  if( toRemove ) toRemove.remove()
  if( done ) done()
}

function timer( _this, fn, time ){
  if( _this._swTimer )
  {
    clearTimeout( _this._swTimer )
    _this._swTimer = null
  }
  _this._swTimer = setTimeout(function(){
    fn.call( _this )
    _this._swTimer = null
  }, time)
}
},{"vigour-js/app":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/tv/index.js":[function(require,module,exports){
// require('./style.less')

var Element = require('../../../browser/element')
  , cases = require('../../../browser/cases')
  , animation = require('../../../browser/animation')
  , events = require('../../../browser/events/advanced')
  , ua = require('../../../browser/ua')
  , raf = require('../../../browser/animation/raf')
  , util = require('../../../util')
  , Value = require('../../../value')
  , app = require('../../')
  , url = require('../../../browser/network/url')
  , lg = ua.platform ==='lg' && ua.device==='tv' 
//check bij allemaal events.$focused.val !!!!

// var cached2
var lgFixCnt = 0

//maak een array aan hiervoor

//app.focusState
url.on( function() {
  //nog een special voor als het in het menu staat!!! dan gewoon back
  //cached2
  // console.error( url.string.val, lgFixCnt )

  //url.string.val
  var arr = url.string.val.split( '/' )
    , str = Number( arr[arr.length-1] )

  if( str < lgFixCnt ) 
  {
    // cached2 = 
    lgFixCnt = str
    var $focused = events.$focused && events.$focused.val
    if( $focused && $focused.events) {
      if( $focused.events.back ) {
        $focused.events.back._val.call( $focused, { preventDefault: function(){} } )
      }
    }
  }
})

document.addEventListener( 'keyup' , function( e ) {
  e.preventDefault()
})

document.addEventListener( 'keydown' , function( e ) {

  var $focused = events.$focused && events.$focused.val
    , _events

  if( $focused && ! $focused._node ) {
    events.$focused.val = false
  } 

  if( $focused && $focused.events ) 
  {

    var map = {
      arrowLeft: [  37, 4  ]
    , arrowRight: [  39, 5 ]
    , arrowDown: [ 40, 29461 ]
    , arrowUp: [ 38, 29460 ]
    , click: [ 13, 29443 ]
    //if not LG!
    }

    if( !lg ) {
      map.back = [  8, 88, 'VK_BACK' ]
    }

    _events = $focused.events

    for( var event in map ) 
    {

      if( _events[ event ] 
       && util.checkArray( map[ event ], e.keyCode ) !== false 
      )
      {
        if( lg ) 
        {
          cached = url.string.val
          url.val = ( lgFixCnt++ ) 
        }
        e.preventDefault()
        _events[ event ]._val.call( $focused, e )
        return;
      }
    }

  }
})

events.arrowLeft = {
  val: function(e, method, val ) {
    method.call( this, e, val )
  } 
}
events.arrowRight = {
  val: function(e, method, val ) {
    method.call( this, e, val )
  } 
}
events.arrowUp = {
  val: function(e, method, val ) {
    method.call( this, e, val )
  } 
}
events.arrowDown = {
  val: function(e, method, val ) {
    method.call( this, e, val )
  } 
}
events.back = {
  val: function(e, method, val ) {
    //sepecial!
    //[  8, 88, 'VK_BACK' ]
    method.call( this, e, val )
  } 
}

util.define
( events
, '$focused'
, { value: new Value() }
)

exports.$focused = events.$focused

events.$focus = {
  val: function( e, method, val ) {
    method.call( this, e, val )
  }
}

util.define( Element, '$focus', function( from, remove ) {
  // console.log( 'select obj!!!!!', this )
  if( this.events && this.events.$focus ) {
    if(events.$focused.val) {
      events.$focused.val._$focused = null
      if(events.$focused.val._node) {
        events.$focused.val.events.$focus._val.call(events.$focused.val, false, true ) 
      }
      events.$focused.val = false
    }
    if( !remove  ) {
      events.$focused.val = this
      var _this = this
      _this._$focused = true
      
      // if(!exports.$focused.rafId) {
      // }

      // {
        // exports.$focused.rafId = raf(function() { 
      var _this = events.$focused.val
      if( _this && _this.events && _this._node ) {
        _this.events.$focus._val.call( _this, true, from )
        // exports.$focused.rafId  = null
      }
        // })
      // }
    }
  }
})

function selectSibling( direction ) {
  var nodeDirection = direction+'Sibling'
  return function nodeSearch() {
     if( this._node ) {
      var found = this._node[ nodeDirection ]
      if( found ) found = found.base
      if( found && found.events && found.events.$focus && (!found.display || found.display.val !== 'none' ) ) {
        return found
      }
      else if( found  && found._node) {
        var field = '$' + ( direction === 'previous' ? 'prev' : direction )
        return found[field].val
      }
    }
  }
}

Element.base.extend({
  $prev:function() {
    //use custom get hiero
  }
, $next:function() {

  }
})

Element.base.set(
{ $prev: selectSibling( 'previous' )
, $next: selectSibling( 'next' )
})


},{"../../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/index.js","../../../browser/animation":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/index.js","../../../browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","../../../browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","../../../browser/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","../../../browser/events/advanced":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/advanced.js","../../../browser/network/url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/url.js","../../../browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/id.js":[function(require,module,exports){
var util = require('../../util')

require('../../value/flags/process')

exports.extend = util.extend
( function( base ) {
    // base
    base.extend
    ( 
      { id: function(val) {
          var id = val.val

          if( id && this.cloud ) 
          {
            this.data = this.cloud.data.get([ 'users', id ])
          } 
          else if( !id ) 
          {
            // this.data = void 0
            //TODO: this works buggy in values --- void 0 does not update data, maybe just use false for now
            void(0)
            this.data = base.mockdata
          }
        }
      , data: {
          //mockdata on start can break everything down
          val: base.mockdata ,
          set:function( val ) {
            var user = this

            // if(!this.first) {
              // this.first = true
            // } else {

            if(user.instances && user.instances.length) {
              // console.error ('-- tmp fix data on base switch to instance[0]' )
              //TODO: this is a hacky solution! fix later
              user = user.instances[0]
            }

            if( val.from.cloud  ) 
            {
              if( user.___c !== val.from ) 
              {
                user.initialised = null
                user.___c = val.from
                for(var key in user.on.user) {
                  user.on.user[key].call( user, key )
                }
                user.initialised = true
              }
            }
            else 
            {
              if( user.___c === false ) return
              user.___c = false
              for(var key in user.on.user) {
                user.on.mock[key].call( user, key )
              }
              user.initialised = null
            }
          }
          // }
        }
      }
    )

})

},{"../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/index.js":[function(require,module,exports){
require('../../value/flags/self')
require('../../value/flags/process')
require('../../value/flags/util')
  //TODO: clean these to work /w inject

var util = require('../../util'),
  Value = require('../../value'),
  Base = require('../../base'),
  Data = require('../../data'),
  vObject = require('../../object').inject(
    require('./origin')
  ),
  timestamp = require('monotonic-timestamp'),
  _subscriptions = {},
  MockData = require('./mockdata'),
  mockdata = new MockData({})
  // make mockdata vailable

var _extend = Base.prototype.extend

var user = new Base({
  defaultType: require('./type')
})

user.define({
  subscriptions: {
    get: function () {
      return _subscriptions
    },
    set: function (val) {
      if (val) util.merge(_subscriptions, val)
    }
  },
  mockdata: {
    get: function () {
      return mockdata
    },
    set: function (val) {
      if (val) mockdata.merge(val)
    }
  },
  on: {
    value: {
      mock: {},
      user: {}
    }
  }
, extend: function( settings ) {

    if(settings.mock) {
      this.mockdata = settings.mock
    }

    var ret = _extend.apply(this, arguments)

    if(settings.val !== void 0) {
      this[settings.name] = settings.val
    }

    if( settings.on ) {

      if( typeof settings.on === 'function' ) {
        settings.on.call( this, settings.name ) 
      } else {
        if( this.data && this.data.cloud ) {
          settings.on.user && settings.on.user.call( this, settings.name ) 
        } else {
          settings.on.mock && settings.on.mock.call( this, settings.name ) 
        }
      }    
    }

    return ret
  }
})

// user

exports.extend = util.extend(
  require('../cloud'),
  function (base) {
    var appuser = base.user = new user.Class().inject(
      require('./set'),
      require('./id')
      //inject pas op extend???
    )
    appuser.parent = base
    appuser.cases = base.cases
    appuser.cloud = base.cloud
  }
)
},{"../../base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js","../../data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../../value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js","../../value/flags/self":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/self.js","../../value/flags/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/util.js","../cloud":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/cloud.js","./id":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/id.js","./mockdata":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/mockdata.js","./origin":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/origin.js","./set":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/set.js","./type":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/type.js","monotonic-timestamp":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/monotonic-timestamp/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/mockdata.js":[function(require,module,exports){
var util = require('../../util')
  , Data = require('../../data')

module.exports = exports = Data.new()  

util.define( exports,
'get', function( val, set, notself ) {
  return this.path
  ( (val instanceof Array) ? val : String(val).split('.')
  , set !== void 0 ? set : {}
  , false
  , false
  , false
  , false
  , true
  , !notself
  )
})


},{"../../data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/multiscreen/cast/chrome/index.js":[function(require,module,exports){
// Q: how to read app config from vigour-js?

var config = require('vigour-js/util/config').chromecast
var cases = require('vigour-js/browser/cases')
var ua = require('vigour-js/browser/ua')
var Value = require('vigour-js/value')
var VObject = require('vigour-js/object')
var Data = require('vigour-js/data')
var xData = Data.new({ merge:true, mixed: 4 })
var eventDeviceOnline = 'deviceDidComeOnline'
var eventDeviceOffline = 'deviceDidGoOffline'
var eventConnected = 'didConnectToCastApplication'

// TODO: get config

// console.log('CHROMECAST GOT CONFIG WEXX', config)

// var config = {
//   applicationID: '8029F9D4',
//   script: "https://www.gstatic.com/cv/js/sender/v1/cast_sender.js"
// }

// config.id = '30C914C1'

var castApi


if(typeof chrome === 'undefined') var chrome = window.chrome || {}


module.exports = exports = window.curn = new Value(
{ api: 
  { defer: function( update, args ) {
      // console.log('CHROMECAST api defer!', this)

      var api = this
        , isSender = cases.native || 
          (cases.desktop && ua.browser === 'chrome')

      if(!isSender) {
        // console.log('CHROMECAST not sender just return true', cases.native)
        return true
      }

      var val = args[0]

      // console.error('CHROMECAST YES WAT go make dat api', val, api._parent.raw)
      // if(val === true) {
      //   debugger
      // }

      if(val === 'error') {
        // console.error('CHROMECAST chrome error')
        return
      }

      if( !isSender || castApi ) return true 

      // if(!val || !val.appid || !val.web){
      //   if(!(val instanceof Object)) val = {}

      //   if(!val.appid && config.appid){
      //     val.appid = config.appid
      //   }
      //   if(!val.web && config.web){
      //     val.web = config.web
      //   }

      //   if(!val.appid || !val.web) {
      //     return true
      //   }
      // }


      if( cases.native ) {
        // console.log('CHROMECAST ait shwung dat api native > init')
        setTimeout(function(){
          exports.init(config.id)
        }, 0)
        
        castApi = true
        update()
      } else {
        // console.log('CHROMECAST ait shwung dat api')
        var script = document.createElement('script')
          , error = script.onerror = function() {
              void(0)
               api.type = 'script'
               api.clearCache()
               api.val = args[0] = 'error'
               update()
            }
        // console.log('CHROMECAST script', config.web)
        script.src = config.web // config.chromecast.web
        script.id = 'chromecast-script'

        window['__onGCastApiAvailable'] = function(loaded, errorInfo) {
          // console.log('CHROMECAST __onGCastApiAvailable!')
          if (loaded) {
            // console.log('CHROMECAST loaded! call init!', config.id)
            exports.init(config.id)
            castApi = true
            update()
          } else {
            // console.error('CHROMECAST __onGCastApiAvailable error:', errorInfo)
            api.clearCache()
            api.val = args[0] = 'error'
            update()
          }
        }
        document.getElementsByTagName('head')[0].appendChild( script )
      }
    }
  }
, clients: false
, session: false
// , devices: {}
// , available: {}
, apiDefer:function( update, args ) {

    // console.log('CHROMECAST apiDefer is called wex', args)

    var _this = this
    var val = args[0]
    // assuming I have only one possible cast
    if(_this.session.status === 'connected') {
      // console.log("CHROMECAST session.status === 'connected'")
      update('success')
    } else if(val !== true) {
      // console.log('CHROMECAST durk wtf is going on')
      // val === the id

      // console.log('CHROMECAST \n\n========== is this where i tell the cast to connect?')

      // exports.connect( val, function( err, session ){
      //   if(err) update('error')
      //   if(session) { 
      //     var clients = _this.clients.from
      //     if(clients) {
      //       exports._checkClients( clients, update )
      //     } else {
      //       update('success')
      //     }
      //     _this.session = session
      //   }
      // })
    } else {
      update( true )
    }
  }
})

exports.devices = new VObject({})
exports.available = new VObject({})

exports.setReceiver = function setReceiver(client, cb){

  var user = exports.user
  var loading = user.parent && user.parent.loading

  // console.error('------- adding lookForCast!')
  user.candidates.removeListener(lookForCast)
  user.candidates.on(lookForCast)

  // console.error('CHROMECAST SET LOADING TRUE')
  if( loading ) {
    loading.val = true
  }
  client.set('loading', true)

  // console.error('CHROMECAST DID SET LOADING TRUYE', client.raw)  


  exports.connect(client, function(err, session){
    if( loading ) {
      loading.val = false
    }
    client.set('loading', false)
    if(err){
      return void(0)
    }

    // console.log('CHROMECAST yes this is the connect callback')
    // console.error('CHROMECAST SET LOADING FALSE')
    
    
    // console.error('CHROMECAST DIDE SET LOADING FALSE', client.raw)
    if(cb) {
      cb(session)
    }
    


  })
}

function lookForCast(){
  // console.error('------- lookForCast!')
  var candidates = this
  var user = candidates._base
  var castclient = findChromeCast(candidates)
  if(castclient) {
    // console.error('--------- lookForCast found cast client set dat token')
    // castclient.set('token', user.token.val)
    user.setReceiver(castclient)
    candidates.removeListener(lookForCast)
  }
}

exports.available.on(function(){
  var names = {}
  var change
  var user = exports.user

  if(!user || !findChromeCast(user.candidates) ){
    this.each(function(name){
      names[name] = true
      if(!exports.devices[name]){
        // console.log('CHROMECAST ------- add')
        change = true
        exports.devices.set(this._name, this)
      }
    })

    exports.devices.each(function(name){
      if(!names[name]) {
        // console.log('CHROMECAST -------- remove')
        change = true
        this.remove()
      }
    })

    if(change) {
      // console.log('yes update')
      // exports.devices._val._update()
    }
  }
})


// var count = 10
// exports._checkCount = count
// //checks and listens to the clients until cast is connected
// exports._checkClients = function( clients, update, cb ){
//   console.log('_checkClients!')
//   var cnt = exports._checkCount--
//   clients.once(function(){
//     var castClient = exports.castConnected( clients )
//     if( castClient ) {
//       exports._checkCount = count
//       if( update ) update( 'success' )
//       if( cb ) cb.call( castClient )
//     } else  {
//       if(cnt) exports._checkClients( clients, update )
//       else if( update ) update( 'error' )
//     }
//   })
// }

//checks if one of the clients is a cast
// exports.castConnected = function( clients ) {
//   console.log('castConnected!')
//   var pass
//   clients.from.each(function(i) {
//     var device = this.from.device
//     if( device && device._val === 'chromecast' ) {
//       pass = this
//       return true
//     }
//   })
//   return pass
// }

exports._name = 'chromecast'

//init cast, start finding devices!
exports.init = function(applicationID){
  // console.log('CHROMECAST init!', applicationID)
  this._init = true
  // console.error('CHROMECAST IOS? ', window.GoogleCast)
  if( window.GoogleCast ){
    //iOS
    // console.error('CHROMECAST IOS CALLING window.GoogleCast.startScanForDevices')
    window.GoogleCast.startScanForDevices(applicationID)
      
  } else if(chrome.cast && chrome.cast.SessionRequest) {
    //Android or Chrome
    var receiverListener
      , currentDeviceIDs

    if( cases.native )  { //android native
      currentDeviceIDs = []
      receiverListener = function(){
        // console.log('CHROMECAST receiverListener native!')
        // get list
        var castList = chrome.cast.getRouteListElement().innerHTML

        if(!castList) return

        var castItems = castList.split('><')
          , newDeviceIDs = []

        // handle additions
        for (var i = castItems.length - 1; i >= 0; i--) {
          var item = castItems[i].split('"')
            , id = item[3]
          if(!~currentDeviceIDs.indexOf(id)) exports.dispatchEvent(eventDeviceOnline,{id:id,friendlyName: item[4].split('</li>')[0].substring(1)})
          
          newDeviceIDs.push(id)
        }

        // check for removals
        for (i = currentDeviceIDs.length - 1; i >= 0; i--) {
          id = currentDeviceIDs[i]
          if(!~newDeviceIDs.indexOf(id)) exports.dispatchEvent(eventDeviceOffline,{id:id})
        }

        // set current list
        currentDeviceIDs = newDeviceIDs
      }
    } else {
      // chrome
      receiverListener = function(e){
        // console.log('CHROMECAST receiverListener not native!', e)
        // console.log('CHROMECAST man i wish it was', chrome.cast.ReceiverAvailability.AVAILABLE)
        if( e === chrome.cast.ReceiverAvailability.AVAILABLE) {
          // console.error('CHROMECAST WURKST!!!!')
        }

        if( e === 'available' ) {
          exports.dispatchEvent( eventDeviceOnline )
        } else {
          exports.dispatchEvent( eventDeviceOffline )
        } 
      }
    }

    var capabilities = [
        chrome.cast.Capability.VIDEO_OUT, 
        chrome.cast.Capability.AUDIO_OUT
        ]
      , timeout = chrome.cast.timeout.requestSession
      , sessionRequest = new chrome.cast.SessionRequest(applicationID, capabilities, timeout)
      , sessionListener = function (session) {
          // console.log('CHROMECAST sessionListener!')
          exports.session = session
          exports.val = session.sessionId
        }
      , autoJoinPolicy = chrome.cast.AutoJoinPolicy.TAB_AND_ORIGIN_SCOPED
      , defaultActionPolicy = chrome.cast.DefaultActionPolicy.CREATE_SESSION
      , apiConfig = new chrome.cast.ApiConfig(
          sessionRequest
        , sessionListener
        , receiverListener
        , autoJoinPolicy
        , defaultActionPolicy
        )

    chrome.cast.initialize(
      apiConfig
    , function () { 
        // console.log("CHROMECAST chrome.cast.initialize cast:onInitSuccess") 
      }
    , function ( message ) { 
        void(0) 
      }
    )
  }
}

//connect to specific cast
exports.connect = function connect(client, cb){
  // console.error('CHROMECAST --------- connect!!!!')
  // var appid = config.id

  var castid = client.castid.val
  // console.log('CHROMECAST CONNECT TO', castid)
  var success = function ( session ){
        void(0)
        if(cb) cb( null , session )
      }
    , error = function( error ){
        void(0)
        if(cb) cb( error )
      } 

  if(window.GoogleCast) { // ios
    // console.error('CHROMECAST IOS!!! calling GoogleCast.connectToDevice')
    window.GoogleCast.connectToDevice( castid ,success )
  } else if(cases.native) { // android
    try {
      // console.log('CHROMECAST go make dat connect shine')
      chrome.cast._emitConnecting()
    } catch (e) {
      void(0)
    }
    // console.log('CHROMECAST cordova exec dat')
    try {
      // castid = castid.split(':')[1]
      // console.error('CHROMECAST try connecting to', castid)
      cordova.exec( success, error,'Chromecast','selectRoute', [castid])
    } catch (e) {
      void(0)
    }
    
  }else if(chrome.cast) { // chrome
    // console.log('CHROMECAST REQUEST DAT SESSION')
    chrome.cast.requestSession( success, error )
  }
}

//dispatch events
exports.dispatchEvent = function(eventType, args){
  // console.error('CHROMECAST dispatchEvent!', eventType, args)
  var id = args ? args.id : 'unknown'
    , name = id.split('.').join('_').split('/').join('')
    , friendlyName = args && args.friendlyName 
      ? args.friendlyName : id
    , chromecast = 'chromecast'
    , set = {}

  if(friendlyName === 'unknown') friendlyName = 'Chromecast'

  if(eventType === 'deviceDidComeOnline'){
    
    // console.error('CHROMECAST deviceDidComeOnline', id)
    
    set[name] = { 
      title: friendlyName, 
      device: 'chromecast', 
      cast: 'chrome',
      castid: id
    }
    exports.available.val = set

  }else if(eventType === 'deviceDidGoOffline'){

    // console.error('CHROMECAST deviceDidGoOffline',id)

    if(exports.available[id])
    {
      set[id] = null
      exports.available.val = set
    }

  } else if(eventType === 'didConnectToCastApplication') {

    // console.error('CHROMECAST didConnectToCastApplication')

  }
}

if( window.GoogleCast ){ // ios
  // console.log('CHROMECAST setting window.GoogleCast.dispatchEvent')
  window.GoogleCast.dispatchEvent = function(eventType, args){
    // console.log('CHROMECAST window.GoogleCast.dispatchEvent!')
    exports.dispatchEvent(eventType, args)
  }
}


function findChromeCast(obj){
  obj = getEndpoint(obj)
  var result
  obj.each(function(){
    var client = this.from
    if(client.device.val === 'chromecast') {
      result = client
      return true
    }
  })
  return result
}

function getEndpoint(obj){
  while(obj && obj.__t === 4 && !obj._filter){
    obj = obj._val
  }
  return obj
}



},{"vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","vigour-js/util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/multiscreen/cast/index.js":[function(require,module,exports){
/*
* injectable 
* adds and manages (through sub-modules)
*   .casts: a live list of available cast devices
*/
var util = require('vigour-js/util')
var chrome = require('./chrome')

exports.extend = util.extend(function (user) {

  chrome.user = user

  user.extend({
    cast: {
      type: false,
      val: {}
    }
  })

  // user.devices.on(function(val, stamp){
  //   cast.devices.
  // })

  user.cast.chrome = chrome


  user.candidates.on(function(){
    // console.log('user.candidates.on: disjoin chrome.devices')
    util.disjoin(chrome.devices, user.candidates, 'device')
    // console.error('---------- check to put available back in devices')
    if(!hasChromeCast(user.candidates)) {
      // console.error('---------- no chromecasts in user.candidates')

      chrome.available.each(function(f){
        if(!chrome.devices[f]){
          // console.error('---------- set dat burk')
          didset = true
          chrome.devices.set(f, this)
        }
      })
      // if(didset) {
      //   chrome.devices.update()
      // }
    }
    user.devices._val._update()
  })

  chrome.available.on(function(){
    // console.log('chrome.available.on: disjoin user.candidates')
    util.disjoin(chrome.devices, user.candidates, 'device')
  })

  // console.log('PUSH DAT SOURCE TO DEVICES')

  user.devices._val.$sources.push(chrome.devices)

  // user.cast.set('chrome', chrome, true)
  // user.cast.set('dial', {})





  // user.cast.dial.on(function(){
  //   throw new Error('DIAL not supported yet')
  // })  

})

function hasChromeCast(obj){
  obj = getEndpoint(obj)
  var result
  obj.each(function(){
    return result = this.from.device.val === 'chromecast'
  })
  return result
}

function getEndpoint(obj){
  while(obj && obj.__t === 4 && !obj._filter){
    obj = obj._val
  }
  return obj
}

},{"./chrome":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/multiscreen/cast/chrome/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/multiscreen/index.js":[function(require,module,exports){
var util = require('vigour-js/util'),
  Value = require('vigour-js/value'),
  cases = require('vigour-js/browser/cases'),
  Data = require('vigour-js/data').inject(
    require('vigour-js/data/selection')    
  ),
  Compound = require('vigour-js/object/compound'),
  events = require('vigour-js/browser/events'),
  ua = require('vigour-js/browser/ua'),
  raf = require('vigour-js/browser/animation/raf')

var VObject = require('vigour-js/object')
VObject.inject(
  require('vigour-js/value/length')
)

var deviceIsCandidate = /(desktop)|(tv)|(cast)|(tablet)|(airplay)/i
cases.$isCandidate = deviceIsCandidate.test(ua.device)

var deviceIsTvLike = /(tv)|(cast)|(airplay)/i

require('vigour-js/value/flags/process')

exports.extend = util.extend(function (user) {

  var content = user.parent.inject(require('../../content')).content

  content.on('self', function() {
    if( user.token.val ) {
      if(user.receiver.media.val && user.receiver.media.from !== user.receiver.media ) {
        if(user.receiver.media.from!== content.get( user.receiver.media.from._contentPath )) {
          // console.error('lets go change it!', user.receiver.media)
          user.receiver.media.$userOrigin = content.get( user.receiver.media.from._contentPath )
        }
      }
    } 
  })

  // extend basic properties
  user.extend({
    receiver: {
      mock: {
        receiver: {
          volume: 1,
          media: false,
          playing: false
        }
      },
      subscription: {
        receiver: {
          volume: true,
          playing:true,
          media: {
            $: true
          }
        }
      },
      on: {
        mock: setMock_receiver,
        user: setUser_receiver
      }
    },
    clients: {
      subscription: {
        clients: {
          $: {
            $: true
          }
        }
      },
      on: {
        mock: setClients,
        user: setClients
      }
    },
    candidates: { val: {} },
    siblings: { val: {} },
    receiverClient: {
      val: {},
      on: {
        mock: setMock_receiverClient,
        user: setUser_receiverClient
      },
      subscription: {
        receiverClient:{
          $: true  
        }
      }
    },
    activeClient: {
      val: {},
      mock: {
        activeClient: true
      },
      subscription: {
        activeClient:{
          $: true  
        }
      },
      on: {
        mock: setMock_activeClient,
        user: setUser_activeClient
      }
    }
  })
  
  // extend devices (needs siblings)
  user.extend({
    devices: {
      val: new Compound(user.siblings)
    }
  })
  
  // extend case values
  user.extend({
    hasReceiver: {
      val: {
        val: user.receiverClient,
        transform: function(val, cv) {
          var endpoint = user.receiverClient.from
          return (
            endpoint && !endpoint._removed &&
            endpoint.cloud && endpoint._path[0] === 'clients'
          ) || 0
        }
      }
    },
    isReceiver: {      
      val: {
        defer: function(update, args){
          var origin = args[2] || this._updateOrigin
          if(!origin || 
             !(origin._prop || origin._name === 'receiverClient')
            ) {
            // console.log('block update', origin)
            return true
          }
          // console.log('no block')
          var stamp = args[1]
          if(stamp !== 'cleanup') {
            if(user._handleOldIsReceiver) {
              if( user._wasReceiver && 
                  !user.hasReceiver.val &&
                  !user.isActive.val
                ) {
                // console.error('i was receiver for this guy', user.data._val.raw)
                user.setReceiver(user.cloud.client.from)
              }
              user._handleOldIsReceiver = null
            }
            this.clearCache()
            user._wasReceiver = this.val
          }
          update()
        },
        val: user.receiverClient,
        transform: function(val, cv) {
          var endpoint = user.receiverClient.from
          return (
            endpoint && !endpoint._removed &&
            endpoint.cloud && endpoint === user.cloud.client.from
          ) || 0
        }
      }
    },
    hasCandidates: { 
      val: { 
        val: user.candidates.$length,
        $convertType: 'boolean'
      }
    },
    hasDevices: {
      val: { 
        val: user.devices.$length,
        $convertType: 'boolean'
      }
    },
    isActive: {
      val: {
        defer: function(update, args){
          // console.log('----- isActive check dat!')
          var origin = args[2] || this._updateOrigin
          if(!origin || 
             !(origin._prop || origin._name === 'activeClient')
            ) {
            // console.log('no blockit', 
            //   origin._path,
            //   origin,
            //   '\nval:', args[0]
            // )
            update(true)
            // return true
          }
          var stamp = args[1]

          if(stamp) {
            if(stamp !== 'cleanup') {
              if(user._handleOldIsActive) {
                if( user._wasActive && 
                    !( user.activeClient.$userOrigin && 
                       user.activeClient.$userOrigin._val
                     )
                  ) {
                  // console.error('i was activeClient for this guy RESET')
                  user.activeClient.$userOrigin = user.cloud.client._val
                }
                user._handleOldIsActive = null
              }
              this.clearCache()
              user._wasActive = this.val
            }
            
          }
          // console.log('go update!')
          update()
        },
        val: user.activeClient,
        // $bubble: {
        //   references: 2
        // },
        transform: function (c, cv) {
          var endpoint = user.activeClient.from
          return (
            (endpoint && endpoint.val === true) ||
            endpoint === user.cloud.client.from
          ) || 0
        }
      }
    },
    setReceiver: {
      type: false,
      val: function(client) {
        var user = this
        // console.error('setReceiver called lol')
        client = client.from
        if(!client) return

        var casttype = client.cast && client.cast.val

        if(casttype) {
          // console.log('setReceiver! user.cast[casttype]', user.cast[casttype])
          // console.log('setReceiver! user.cast[casttype].setReceiver', user.cast[casttype].setReceiver)
          user.cast[casttype].setReceiver(client)
        } else {
          client.set('token', user.token.val)
          user.receiverClient.$userOrigin = client
        }
      }
    }
  })
  
  // DEBUG:
  // user.activeClient.on(function(){
  //   console.error('activeClient happenin!', this.from && this.from.toString())
  // })
  
  // user.hasReceiver.on(function(){
  //   console.error('lol hasReceiver listener fires! val:', this.val)
  // })
  // user.isReceiver.on(function(){
  //   console.error('lol isReceiver listener fires! val:', this.val)
  // })
  // user.activeClient.on(function(){
  //   console.error('lol activeClient listener fires! val:\n', this.from.toString())
  // })

  // listeners:

  // on activity: make me activeClient
  if(!cases.chromecast) {
    var activeEvent = cases.tv ? 'keydown' : 'down'
    events.document.addEvent(activeEvent, function () {
      if( user.cloud.client._val &&
          !(cases.$isFullscreen && cases.$isFullscreen.val)
        ) {
        user.activeClient.$userOrigin = user.cloud.client.from
      }
    })  
  }
  

  // re-establish old setup after reconnect
  user.cloud.on('welcome', function(){
    if(user.cloud._status > 2){
      user._handleOldIsActive = true
      user._handleOldIsReceiver = true
      user.cloud.data.once(function(){
        // console.log('ok go reset dat old situation')
        user.isActive.update()
        user.isReceiver.update()
      })
    }
  })

  /*
  * when I become active, unset myself as receiver
  * and if not iplogin > select new receiver
  */
  user.isActive.on(true, function() {
    var isReceiver = user.isReceiver.val
    // console.log('isReceiver?!', isReceiver)

    if(user.hasCandidates.val) { //  && !user.iplogin.val
      // console.log('user.hasCandidates.val', user.hasCandidates.val)
      // console.log('isReceiver', 
      //   isReceiver, 
      //   '\nuser.hasReceiver.val', user.hasReceiver.val
      //   )
      if(isReceiver || !user.hasReceiver.val) {
        // console.log('ok select receiver because i became active!')
        var newreceiver = selectReceiver(user, user.candidates)
        if(newreceiver) {
          // wait for my own isactive set
          raf(function(){
            user.setReceiver(newreceiver)
          })
        } else if(isReceiver) {
          user.receiverClient.$userOrigin = null
        }
      }
    } else if(isReceiver){
      user.receiverClient.$userOrigin = null
    }
  })  
  

  // when receiver leaves, I might have to become the new receiver
  if(cases.$isCandidate) {
    user.hasReceiver.on(0, function(val, stamp, from){
      if(stamp === user.cloud.stamp) {
        // console.log('yes update is ok')
        if(!user.isActive.val){
          // wait for all removes to finish
          raf(function(){
            // select receiver
            // console.log('ok select receiver because receiver left!')
            var newreceiver = selectReceiver(user, user.clients)
            // if its me > update user
            if(newreceiver === user.cloud.client.from) {
              user.setReceiver(newreceiver)
            } else {
              // console.log('i am not new receiver! newreceiver is', newreceiver && newreceiver.raw)
            }
          })
        }
      } else {
        // console.log('update not from the cloud')
      }
    })
  }

  // when a tv joins, I might want to grab it
  if(!user.iplogin.val){
    user.candidates.on(function(val, stamp, from, remove, added){
      // console.error('-------- check for tv joiner')
      // console.log(user.candidates.toString())
      if(user.hasCandidates.val && user.isActive.val &&
          user.initialised
        ) {
        grabTV(user)
      } else {
        // console.error('no candidates')
      }
    })
  }

  
  // make cases
  cases.$isActive = user.isActive
  // cases.$hasCandidates = user.hasCandidates
  cases.$hasDevices = user.hasDevices
  cases.$hasReceiver = user.hasReceiver
  cases.$isReceiver = user.isReceiver


})

// clients
function updateClients() {
  this.clients.update()
}

function setClients () {
  var user = this
  var linked = user.data._val

  // clients
  var linkedclients = linked.get('clients')
  // cache old, set new, and remove listener if cached old
  var oldclients = user.clients._val
  user.clients = linkedclients
  linkedclients.addListener([updateClients, user], true)
  if( oldclients ) {
    oldclients.removeListener(updateClients, user)
  }

  // candidates
  // cache previouse value
  var oldcandidates = user.candidates && user.candidates._val
  // make candidates
  var candidates = user.candidates = new Data( linkedclients, {
    condition: { 
      device: {
        $contains: '(desktop)|(tv)|(cast)|(tablet)|(airplay)'
      },
      key: {
        $exists: true,
        $ne: this.cloud.clientid
      }
    }
  })
  // add listener because of reasons
  candidates.on(function(){
    user.candidates.update()
  })
  // clean up dat old selection
  if(oldcandidates) {
    oldcandidates.remove()
  }
  
  // siblings
  // cache previouse value
  var oldsiblings = user.siblings && user.siblings._val
  // make siblings
  var siblings = user.siblings = new Data( linkedclients, {
    condition: {
      key: {
        $exists: true,
        $ne: this.cloud.clientid
      }
    }
  })
  // add listener because of reasons
  siblings.on(function(){
    // console.log('update on candidates > update user.candidates')
    user.siblings.update()
  })
  // clean up dat old selection
  if(oldsiblings) {
    oldsiblings.remove()
  }
}

// activeClient

var acRemoveTarget
var acAddedTarget

function setMock_activeClient (i) {
  // console.log('setMock_activeClient')
  var user = this

  if(acRemoveTarget) {
    acRemoveTarget.removeListener(acRemoveCheck, user)
    acRemoveTarget = null
  }
  if(acAddedTarget) {
    acAddedTarget.removeListener(acAddedCheck, user)
    acAddedTarget = null
  }

  var linked = user.data._val

  user.activeClient = linked.get('activeClient', {})
  user.activeClient.$userOrigin = user.cloud.client.from

}



function setUser_activeClient () {
  // console.log('---------- setUser_activeClient!')

  var user = this

  // console.log('dat activeClient:', 
  //   user.data._val.activeClient
  //   ? 'yes activeclient\n' + user.data._val.activeClient.toString()
  //   : 'no activeClient in ma new user!!\n' + user.data._val.toString()
  // )

  if(acAddedTarget) {
    acAddedTarget.removeListener(acAddedCheck, user)
    acAddedTarget = null
  }
  
  var linked = user.data._val
  var linkedRef = linked.get('activeClient', {})

  if(acRemoveTarget) {
    acRemoveTarget.removeListener(acRemoveCheck, user)
  }
  acRemoveTarget = linkedRef
  acRemoveTarget.addListener([acRemoveCheck, user], true)

  user.activeClient = linkedRef
  
  // console.error('USERSWITCH ACTIVECLIENT')
  if(cases.tv) {
    // console.error('IM TV USERSWITCH WAT TO DO')
    // user.activeClient.$userOrigin = user.cloud.client.from
    // TODO: fix this:
    var activeClient = linkedRef.from
    // console.error('activeClient is', activeClient)
    // console.log('i am', user.cloud.client.from.raw)
    if(!(activeClient && activeClient._name !== 'activeClient')) {
      // console.error('set maself active')
      // console.error('SET ME TO DAT activeClient (TV)')
      user.activeClient.$userOrigin = user.cloud.client.from
    }else {
      // console.log('udpate activeClient because do it')
      user.activeClient.update()
    }
  } else if(!cases.chromecast) {
    // console.error('SET ME TO DAT activeClient')
    user.activeClient.$userOrigin = user.cloud.client.from
  } else {
    user.activeClient.update()
  }

  if(user.hasCandidates.val) {
    grabTV(user)
  }

}
function acRemoveCheck (firer, val, stamp, from, remove) {
  var user = this
  if(firer._removed) {
    if(acAddedTarget) {
      acAddedTarget.removeListener(acAddedCheck, user)
    }
    acAddedTarget = firer._parent
    acAddedTarget.addListener([acAddedCheck, user], true)
  }
}
function acAddedCheck (firer, val, stamp, from, remove, added) {
  var user = this,
    linkeduser = firer

  if(linkeduser.activeClient){
    acAddedTarget.removeListener(acAddedCheck, user)
    acAddedTarget = null
    
    acRemoveTarget = linkeduser.activeClient
    acRemoveTarget.addListener([acRemoveCheck, user], true)

    user.activeClient = linkeduser.activeClient
  }
}

// receiverClient
var rcAddedTarget
var rcRemoveTarget

function setMock_receiverClient () {
  var user = this

  if(rcAddedTarget) {
    rcAddedTarget.removeListener(rcAddedCheck, user)
  }
  if(rcRemoveTarget) {
   rcRemoveTarget.removeListener(rcRemoveCheck, user) 
  }

  var linked = user.data._val
  user.receiverClient = linked.get('receiverClient', false)
}
function setUser_receiverClient () {
  var user = this

  if(rcAddedTarget) {
    rcAddedTarget.removeListener(rcAddedCheck, user)
    rcAddedTarget = null
  }

  var linked = user.data._val
  var linkedRef = linked.get('receiverClient', {})

  if(rcRemoveTarget) {
    rcRemoveTarget.removeListener(rcRemoveCheck, user)
  }
  rcRemoveTarget = linkedRef
  rcRemoveTarget.addListener([rcRemoveCheck, user], true)

  user.receiverClient = linkedRef

  if(cases.tv) {
    // set tv to receiver if activeclient and no receiver
    var activeClient = user.activeClient.from
    if( activeClient && activeClient.__t === 2 &&
        activeClient !== user.cloud.client.from &&
        !user.hasReceiver.val
      ) {
      user.setReceiver(user.cloud.client.from)
    }
  } else if (cases.chromecast) {
    // always set chromecast to receiver
    user.setReceiver(user.cloud.client.from)
  }

}
function rcRemoveCheck (firer, val, stamp, from, remove) {
  var user = this
  if(firer._removed) {
    if(rcAddedTarget) {
      rcAddedTarget.removeListener(rcAddedCheck, user)
    }
    rcAddedTarget = firer._parent
    rcAddedTarget.addListener([rcAddedCheck, user], true)
  }
}
function rcAddedCheck (firer, val, stamp, from, remove, added) {
  var user = this,
    linkeduser = firer

  if(linkeduser.receiverClient){
    rcAddedTarget.removeListener(rcAddedCheck, user)
    rcAddedTarget = null

    rcRemoveTarget = linkeduser.receiverClient
    rcRemoveTarget.addListener([rcRemoveCheck, user], true)

    user.receiverClient = linkeduser.receiverClient
  }
}

// receiver
function setMock_receiver () {
  var user = this
  linkReceiver(user)
}
function setUser_receiver () {
  var user = this
  linkReceiver(user)
}
function linkReceiver (user) {
  var linked = user.data._val
    , linkedreceiver = linked.get('receiver', {})

  user.receiver = {
    volume: linkedreceiver.get('volume', 1),
    media: linkedreceiver.get('media', false),
    playing: linkedreceiver.get('playing', false)
  }
}

function selectReceiver(user, list) {
  // console.error('\n\n=========================selectReceiver!!!\n\n')
  while(list && list.__t === 4 && !list._filter){
    list = list._val
  }
  if(!list) {
    return void(0)
  }
  var winner
  list.each(function(){
    var client = this._val
    // sanity check
    if(!client || client._removed || !client.device) {
      return void(0)
    }
    // skip if client is the activeClient
    if(client === user.activeClient.from) {
      return
    }
    var device = client.device.val
    // skip if client is not a candidate
    if(!deviceIsCandidate.test(device)) {
      return
    }

    // skip if client is in use by other user
    if(client.token && client.token.val !== user.token.val) {
      return
    }
    // client is a possible winner
    winner = client
    // stick if client is tv-like
    if(deviceIsTvLike.test(device)) {
      return true
    }
  })
  // console.error('\n\n========================= winner:',winner,user.cloud.clientid,'\n\n')

  return winner
}

function grabTV(user){
  // console.error('============= grabTV!')
  user.candidates._val.each(function(){
    var candidate = this.from
    // console.error('candidate', 
    //   'deviceIsTvLike', deviceIsTvLike.test(candidate.device.val),
    //   '!candidate.token', !(candidate.token && candidate.token.val),
    //   'candidate.token', (candidate.token && candidate.token.val)
    // )
    if(candidate.device.val === 'tv' &&
        !(candidate.token && candidate.token.val)
      ) {
      // console.error('grab dat!')
      candidate.set('token', user.token.val)
      if(!user.hasReceiver.val) {
        user.setReceiver(candidate)
      }
    }
  })
}

// function log(){
//   console.log('--------------------\n\n\n\n')
//   console.log(window.FLAG,':')
//   console.log.apply(console, arguments)
//   console.log('\n\n\n\n--------------------')
// }
// log.start = function(flag){
//   console.log('\n\n\n====================== START',
//     window.FLAG ? window.FLAG : '', flag, '\n\n'
//   )
// }
// log.end = function(flag){
//   console.log('\n\n====================== END',
//     window.FLAG ? window.FLAG : '', flag, '\n\n'
//   )
// }

},{"../../content":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/content.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/browser/events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js","vigour-js/browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/data/selection":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/selection.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","vigour-js/object/compound":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/compound.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","vigour-js/value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js","vigour-js/value/length":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/length.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/navigation.js":[function(require,module,exports){
var util = require('vigour-js/util')
  , vObject = require('vigour-js/object')
  , MockData = require('./mockdata')

require('vigour-js/value/flags/process')

// content en switch op content pakken
//   media
//   show
//   season
//   niet last
// ook bubble: 1 op alle dingen
// function updateNavigation

exports.extend = util.extend
( function( user ) {

  var content = user.parent.inject(require('../content')).content

  content.on('self', function() {
    var nav = user.navigation

    var content = this

    var media = nav.media.from
      , season = nav.season.from
      , show = nav.show.from

    if(media._contentPath) {
      nav.media.$userOrigin.val = content.from.get(media._contentPath) //DIT IN NAVIGATION
    }

    if(season._contentPath) {
      nav.season.$userOrigin.val = content.from.get(season._contentPath) //DIT IN NAVIGATION
    }

    if(show._contentPath) {
      nav.show.$userOrigin.val = content.from.get(show._contentPath) //DIT IN NAVIGATION
    }
  })

  user.define({
    updateNavigation: function( key ) {
      if(this.navigation.last && this.navigation.last.$userOrigin) {
        key = key || this.navigation.last.$userOrigin.get('key').val
        if( typeof key === 'string' ) {
          this.navigation[key]._update( this.navigation[key]._val._val , 'l'+Math.floor(Math.random()*9999) )
          return
        }
      }
      
      this.navigation.page.$userOrigin = 'discover'
    }
  })

  user.extend({
    navigation: {
      mock: {
        navigation: 
        { show: false
        , page: false 
        , media: false
        , season: false
        , last: { key: 'page', time: 0 }
        }
      },
      subscription: {
        navigation: 
        { show:true
        , media:true
        , season:true
        , page:true
        , last: 
          { key:true
          , time:true
          }
       }
      },
      val: 
      { page: { defer: deferNavigation }
      , show: { defer: deferNavigation, val: false }
      , season: { defer: deferNavigation, val: false }
      , media: { defer: deferNavigation, val: false }
      },
      on: {
        user: function navigationToUserData( key ) {

          resolveLastListener(this)
          
          this.navigation = {
            last: this.data._val.get( [ key, 'last' ] )
          }
          this.__first = true

          var nav = this.navigation
            , userData = this.data.$userOrigin

          this._lastupdate = function lastUpdateUser( val, stamp, from ) {
            if( this.key && nav[this.key.val] )  
            {
              nav[this.key.val].$userOrigin._update( void 0, 'l'+stamp  )
            }
          }

          nav.last.from.on(this._lastupdate)

          // console.error('KEY',key)
          // debugger

          this.navigation = 
          { page: userData.get( [ key, 'page' ], 'discover' ) 
          , show: userData.get( [ key, 'show' ] )
          , season: userData.get( [ key, 'season' ] )
          , media: userData.get( [ key, 'media' ] )
          }

          if(nav.last.from.key) {

            // debugger

            nav.last.from._update( void 0, vObject.stamp() )
          } else if(!nav.last.from.key) {
            //no page switch to default ( make a default possilbe )
            nav.page.$userOrigin = 'discover'
          }

        },
        mock: function navigationToMockData() {

          resolveLastListener(this)
    
          var nav = this.navigation

           var mock = this.mockdata.navigation
            , set = 
              { page: mock.page
              , show: mock.show
              , season: mock.season
              , media: mock.media
              // , last: mock.last 
              }

          this.navigation = { last: mock.last }

          //TODO: this is a temp fix should go back to page you logout from!
          if(this.__first) {
            mock.page.val = 'discover'
          } 
    
          this._lastupdate = function lastUpdateMock( val, stamp, from ) {
            if( nav[this.key.val] ) 
            {
              nav[this.key.val].$userOrigin._update( void 0, 'l'+stamp  )
            }
          }

          nav.last.from.on( this._lastupdate )
          // var nav = hoe kom ik hier aan mn user???
          // console.error('?????',this.token._lval, this.token.val)
          // need to use setter (not nav ref)
          this.navigation = set
        }
      }
    }
  })

  function resolveLastListener( user ) {
    if( user._lastupdate 
        && user.navigation.last 
        && user.navigation.last.from !== user.navigation.last
     ){
      user.navigation.last.from.removeListener(user._lastupdate)
      user._lastupdate = null
     }
  }      

  function deferNavigation( update, args ) {
    if( args[1] && args[1][0] === 'l' && 
      this._name === this._parent.last.from.key.val
    ) {
      this.clearCache()
      update()
    } 
    else 
    {
      update( true )
    }
  } 

})

},{"../content":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/content.js","./mockdata":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/mockdata.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/origin.js":[function(require,module,exports){
//userOrigin
var util = require('../../util')
  , MockData = require('./mockdata')
  , timestamp = require('monotonic-timestamp')

exports.extend = util.extend( function( vObject ) {

  var _coreSet = vObject.set
    , _fromUser = function( obj ) {
        var val = obj
          , nav
          , last

        while (val && !val._removed && val instanceof vObject) {

          if( val._parent && val._parent._prop && val._parent._prop.name === 'navigation' ) {
            nav = val
          } 

          if( ( val.cloud && val._path[0] === 'users' ) 
              || val instanceof MockData 
            ) {
            return [ val, nav ]
          }
          last = val;
          val = val._val;
        }

        var result = last && !last._removed && last !== obj
          ? last 
          : false

        return [ result, nav ]

      }

  util.define( vObject, 
    '$userOrigin', {
    set: function( val ) {

      var search = _fromUser(this)
        , found = search[0] //|| this
        , nav = search[1]
        , same

      if(!found) {
        var propname = this._prop && this._prop.name

        if(propname) {
          // console.error('>>>>>>>> making and linking', propname)
          var user = this._caller,
            linkeduser = user.data._val

          found = linkeduser.get(propname, {})
          this.val = found
        }
      } else {
        // console.error('FOUND', this._prop && this._prop.name, found._path, found.raw, found)
      }

      if(!found) {
        throw new Error('cannot find correct $userOrigin for '+ ( this._name || this._prop && 'propety '+this._prop.name ) )
      }

      _coreSet.call( found , val)

      if(nav && nav._name ) {
        nav._parent.last.from.val = 
        { time: timestamp()
        , key: nav._name
        }
      } 

    },
    get: function() {
      return _fromUser( this )[0] //|| this
    }
  })
})
},{"../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./mockdata":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/mockdata.js","monotonic-timestamp":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/monotonic-timestamp/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/set.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

var util = require('../../util')
  , user = require('./')
  , vObj = require('../../object')

exports.extend = util.extend( 
function( base ) {

  function setUser(i) {
    //make these 2 more defualt
    // console.log(i)
    // console.log( 'swtich to user', i, this.data._val )
    this[i] = this.data.$userOrigin.get( i, this[i]._prop.$default )
  }

  function setMock(i) {
    // console.log( 'swtich to mock', i, this.mockdata[i] )
    this[i] = this.mockdata[i]
  }

  base.define({
    _set: function(val, i ) 
    {
      if ( this[i] instanceof vObj ) 
      {
        //TODO: torough testing
        this[i].val = val[i]
      } 
      if (typeof this[i] === 'function') 
      {
        if (val[i] instanceof Array) 
        {
          this[i].apply(this,val[i])
        } else 
        {
          this[i](val[i])
        }
      } 
      else 
      {
        if ( this.isProperty( i, val ) ) {
          // console.warn('this is a property!', i , val )
          this[i] = val[i]
        } else {
          if( this[i] ) 
          {
            // merge? check ook voor cloud bijvoorbeeld
            this[i] = val[i]
          }
          else 
          {
            // console.error('NOW LETS MAKE A BASIC TYPE', i, this)

            var mock = {}

            mock[i] = val[i]

            var subscription = {}
            subscription[i] = true

            // this.mockdata = mock

            this.extend({
              name:i
            , mock: mock
            , $default: val[i]
            , subscription: subscription //maybe do this if not specified
            , on: {
                mock: setMock
              , user: setUser
              }
            })

            //dit beter---- moet namelijk niet val[i] worden maar mockdata (of meteen switchen naar userData)
            
           

          }
        }

        // console.log('hey', i, this[i] )
        
      }
    }
  })

})
},{"../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/token.js":[function(require,module,exports){
var util = require('../../util')
  , Value = require('../../value')
  , cases = require('../../browser/cases')

require('../../value/flags/process')

//TODO: url error on start up (set from cloud)
exports.extend = util.extend
( function( base ) {

  base.define({
    updateId: function( res ) {
      this.id = res instanceof Array ? res[ res.length -1 ] : res
      
      //hier ff voor navigation
      //get last?
    }
  , authenticate: function authenticate( _this, request, val, update ) {
      var user = this
        , cloud = user.cloud

      if(cloud.params.fastLogin && typeof localStorage !== "undefined"){
        var userId = localStorage.getItem('userId')
        if(userId){
          request.id = userId
        }
      }
      // console.log('go cloud.authenticate!!')
      cloud.authenticate( request, function( res ) {
        
        if(res.error && typeof localStorage !== "undefined"){
          localStorage.removeItem('userId')
        }
        _this.clearCache()

        if(val !== _this.val){
          // console.error('\n\n\ndid a fast re-login! -- double check')
        }

        if( res.error || !_this.val ){
          _this.val = false
          user.id = false
          update()
          if( res.error ){
            void(0)
          }else{
            if(! (user.iplogin && user.iplogin.val) ){
              user.cloud.emit('logout', res )

              if(typeof localStorage !== "undefined" ){
                localStorage.removeItem('userId')
              }
            } 
            // console.error('token is set to false while authenticating (logout! -- need to get a method to break it while in progress)')
          }
        }else{
          // console.log('AUTH SUC6', user, res )
          //dit is ook wrong completely! -- dit alleen doen met een usertoken!!!!
          // anders wachten tot een overtake actie
          if( _this.val !== true ) {
            user.updateId( res )
          }

          if(cloud.params.fastLogin && typeof localStorage !== "undefined"){
            var userId
            if(res instanceof Array)
              userId = res[res.length-1]
            else
              userId = res
            localStorage.setItem('userId', userId)  
          }

          if(user.iplogin && user.iplogin.val) {
            // console.log('TV LOGIN SUCCESS! maybe go make maself dat user')
            // console.log('>>> token', user.token.val)
            
          }
          
          update()
        }
      })
    }
  })
  
  // console.log('????????????? set iplogin', cases.tv || cases.chromecast)
  // base.iplogin = cases.tv || cases.chromecast
  
  base.extend(
  { //primary
    iplogin: { val: cases.tv || cases.chromecast },
    token:{
      // TODO: when IP based connectivity is fixed this is not needed
      subscription: {
        token: true
      },
      val:{
        transform: function( val, cv ) {
          return ( cv instanceof Object ) ? false : cv
        },
        defer:function( update, args, tempdefer ) {

          if(args[0] && args[0].defer) return true

          var token = this
          var user = token._caller

          // console.error('TOKEN SET!xxx', token)

          user.cloud.connected.is(true, function() {
            var oldval = args
              , val = token.val
              , userId = user.id && user.id.val
              , iplogin = user.iplogin && user.iplogin.val

            // if( user.iplogin && user.iplogin.val ){
            //   iplogin = true
            // }
            //DOUBLE CHECK --- this was in there to allways make sure this stuff did not happen...
            // if( user.activeClient && user.activeClient.$userOrigin && user.activeClient.from === user.client.from  ) {
              // console.log('mc dirty lets fix this here! on logout set false to be certain', user.activeClient.$userOrigin )
              // user.activeClient.$userOrigin = false
            // }

            token.clearCache()

            // console.error('token is set!', val)
            // console.log('token is set!', iplogin)

            if( userId && !iplogin ){
              // console.log('LOGOUT ---> EMIT'.red.inverse, userId )
              var _last = user.cloud.logout( userId )
              if(typeof localStorage !== "undefined"){
                localStorage.removeItem('userId')
              }
            }

            if( val ){

              var url = user.cloud.api.get('auth')

              if( !url ) {
                throw new Error('could not determine auth url (got: ' + url + ')')
              }

              var request = 
              { url: user.cloud.api.auth.val
              , subs: user.subscriptions
              , token: val
              //TODO: also add tv
              }
              , auth = user.__authenticated__

              if( iplogin ){
                // this is all tv vibes
                if( val === true ) {
                  delete request.token
                }
                request.tv = true

                if( !auth ){
                  // console.log('IPLOGIN FIRST TIME POP DAT AUTHENTICATE')
                  user._authrequest = request
                  user.authenticate( token, request, val, update )
                  user.__authenticated__ = true
                }else{
                  var users = user.cloud.data.get('users')
                    , set

                  // console.error('IPLOGIN USERSWITCH')
                  // find the user I should switch to
                  users.each(function( key ) {

                    // console.log('>> HAVE USER', this)
                    var clouduser = this

                    if(clouduser.token && clouduser.token.val === token.val) {
                      // im switching to this user
                      set = clouduser._name
                      // console.log('switch to this usert!')
                    } else {
                      if(
                        clouduser.receiverClient && 
                        clouduser.receiverClient.from === user.cloud.client.from
                        ){
                        // console.error('this other user has me as receiverClient, better remove')
                        clouduser.receiverClient.$userOrigin = null
                      }
                      if(clouduser.activeClient && 
                        clouduser.activeClient.from === user.cloud.client.from
                        ){
                        // console.error('this other user has me as receiverClient, better remove')
                        clouduser.activeClient.$userOrigin = null
                      }
                    }
                  })
                  if(!set) {
                    user.id = false
                  }else{
                    user.id = set

                  }
                  update() 
                }

              }else{
                user._authrequest = request
                user.authenticate( token, request, val, update )
              }
            }else{
              user.id = false
              update() 
            }
          })
        }
      }
    },
    localStorageToken: {
      val: {
        defer:function(update, args) {
          var user = this._caller
          if(!user._readLocalStorage && typeof this.val === 'string') {
            user._readLocalStorage = this.val
            var token = localStorage.getItem(user._readLocalStorage)
            if(token && token !== 'true') {
              // console.error('TOKEN SET!', token)
              user.token = token
            }
            user.token.on(function() {
              var tokenval = this.val
              if(typeof tokenval === 'string') {
                localStorage.setItem(user._readLocalStorage, tokenval)
              } else {
                localStorage.removeItem(user._readLocalStorage)
              }
            })
            update()
          } else {
            update(true)
          }
        }
      }
    }
  })

  // base.token = false

  base.cases.$isLoggedIn = new Value(
  { val: base.token
  , transform:function(val, cv) {
      if(cv === true) return 0
    }
  })

  var myclient = base.cloud.client

  myclient.on(function(val, stamp, from){
    // console.log('something happened on my cloud client!')
    origin = from || this._updateOrigin
    if(stamp === base.cloud.stamp) {
      var cloudclient = myclient.from
      if(cloudclient.token){
        // console.log('-------- token on user is now', base.token.val, 'set with', cloudclient.token.val)
        base.token.val = base._authrequest.token = cloudclient.token.val

        // console.log('-------- did set token on user')
      }
    }
  })

  base.token._name = 'token'

})




},{"../../browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../../value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/type.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var base = require('../../base')
  , Value = require('../../value')//.new()
  , objectSet = require('../../object').set
  , util = require('../../util')

// Value.inject(require('./listen_fix'))

module.exports = {
  type: Value,
  create: function(val, prop, settings, noupdate) {

    // console.log('create it', val, settings )
    var v = new Value()
    v._base = this
    v._caller = v._base
    v._prop = settings
    // console.log('set')
    objectSet.call(v, val, false, false, true)
    // console.log('done setting')
    if (this._class) this._class.prototype._[settings.name] = v
    if (settings) {

      if (!settings._vset) {

        //can also add a thing to set on get by default?

        if(settings.mock) {
          //if not set add some efficiency plz
          this.mockdata = settings.mock
        }

        if(settings.subscription) {
          this.subscriptions = settings.subscription
        }

        if(settings.on) {
          if( typeof settings.on === 'function' ) {
            this.on.mock[settings.name] = settings.on
            this.on.user[settings.name] = settings.on
          } else {
            if(settings.on.mock && !this.on.mock[settings.name]) {
              // console.log(base, base.on)
              this.on.mock[settings.name] = settings.on.mock
            }
            if(settings.on.user && !this.on.user[settings.name]) {
              this.on.user[settings.name] = settings.on.user
            }
          }
        }

        settings._vset = function(stamp, from, remove, cval) {
          
          var base = this._caller
                || this._base
                || this


          //if !base --
          // if(!base.)

          if(settings.set) {
            settings.set.call(
              base, this, stamp, from, remove, cval
            )
          }
        }
      }

      if (!noupdate) {
        // console.log('UPDATE creation')
        v._update(val)
      }
    }
    return v
  },
  set: function(val, prop, settings) {
    // console.error('set it', val )
    this._caller = this
    return val
  },
  get: function(prop, settings) {
    if (prop) prop._caller = this
    if (settings.get) return settings.get.call(this, prop)
    return prop
  }
}
},{"../../base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js","../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/url.js":[function(require,module,exports){
var util = require('vigour-js/util')

require('vigour-js/value/flags/process')

//TODO: url error on start up (set from cloud)
exports.extend = util.extend
( function( base ) {

  //TODO: add remove setting
  base.extend(
  { url: function( val ) {
      if( !val.urlset && val.__t === 4 ) 
      {
        val.urlset = true
        var _this = this
      
        _this.navigation.page.on( function(e) {
          val.from.val = _this.navigation.page.val
        })

        _this.navigation.show.on( function(e) {
          val.from.val = _this.$parse( this ).url 
        })

        _this.navigation.media.on( function() {
          val.from.val = _this.$parse( this ).url
        })

        val.from
          .on( function( ) {
            //urlMap ook reparse setup
            // console.log('update from url!'.gree.inverse)
            _this.$execUrl()
          })

      } else {
        // console.warn( 'ui.user: no url!' )
        //console.log() use deze voor updates?
      }
    }
  })

  base.define({
    $execUrl: function( defaultUrl ) {
      var _this = this

     var url = _this.url.from.string.val
       , nav = _this.navigation
       , data = _this.parent.content
       , urlArray
       , show
       , season
       , media
       , channel

      if(!url || url === '$tv') url = defaultUrl

      if( !~url.indexOf( '/' ) )
      {
       nav.page.$userOrigin = url
      }
      else if( url.indexOf( 'shows' ) === 0 ) 
      {

       urlArray = url.split( '/' )
       show = Number( urlArray[1].split( '-' )[0] )
       if( urlArray[2] ) season = Number( urlArray[2] ) 
       if( urlArray[3] ) media = Number( urlArray[3].split('-')[0] )

       if( show ) {
          show = data.from.get( [ 'shows', show ] )
          nav.show.$userOrigin = show
       } 

      if( media ) {
        media = data.from.get( nav.show.from._path.slice(3).concat( [ 'seasons', String( season-1 )  ,'episodes', String( media-1 ) ] ) )
        nav.media.$userOrigin = media
      } 

      }
      else if( url.indexOf('channels') === 0 )
      {
      urlArray = url.split( '/' )
      channel = Number( urlArray[1].split( '-' )[0] )
      // console.error('channel')
      // debugger
      nav.page.$userOrigin = 'channels'
      }
    },
    $parse: function( data ) {

      var old = this.url.val 

      var type =  data.from._parent && data.from._parent._name
        , parsed = {}

      if( data.from ) {
        parsed.title = data.from.get( 'title', false).val
        if( type === 'episodes' ) {
          parsed.season = Number( data.from._parent._parent._name )+1
          parsed.media = Number( data.from._name )+1
          parsed.show = data.from._parent._parent._parent._parent
        }
        if( type && this.urlMap[ type ] ) { 
          parsed.url = this.urlMap[ type ]( data, parsed )
        } else {
        }
      }

      // if( old ) {
      //   var x = old+'/'      
      //   if(x.replace(/-[a-z0-9+]+\//g, '/') === parsed.url+'/') {
      //     parsed.url = old
      //   }
      // } else {
      //   console.warn('block url update! DOUBLE CHECK THIS -- should not happen ( too fast url settings prop in shows)')
      //   parsed.url = window.location.href
      //               .replace(String(window.location.origin) + '/', '')
      //               .replace(/^#\//, '')
      // }

      return parsed
    }
  , urlMap: {
      value: {
        episodes: function( data, parsed ) {
          var title = parsed.title
            , str = this.shows( parsed.show )
                  + '/'+parsed.season
                  + '/'+parsed.media
          if( title ) str += '-'+title
          return str && str.replace(/ /g, '+').replace('?', '')
        }
      , shows: function( data, parsed ) {
          var title = parsed 
              ? parsed.title 
              : data.get('title', false).val
          , id = data.from._name
          , str = 'shows/'+id
          if( title ) str += '-'+title
          return str && str.replace(/ /g, '+').replace('?', '')
        }
      }
    }
  })

})
},{"vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/usage.js":[function(require,module,exports){
var util = require('vigour-js/util')

var vObject = require('vigour-js/object')

var MockData = require('./mockdata')

var cases = require('vigour-js/browser/cases')

var Data = require('vigour-js/data')
      .inject( require('vigour-js/data/selection') )


require('vigour-js/value/flags/process')

exports.extend = util.extend
( function( user ) {

  var content = user.parent.inject(require('../content')).content

  user.extend({
    usage: {
      mock: {
        usage:{}
      },
      subscription: {
        usage: {
          shows: {
            $: {
              media:{
                //dit moet sowieso niet title worden! liever gewoon true of id ofzo
                $:true
              },
              favourite:true,
              timestamp:true
            }
          }
        }
      },
      on: {
        mock:function() {
          this.usage = this.mockdata.usage
        },
        user:function() {
          this.usage = this.data.from.get('usage',{})
        }
      }
    },

    watched:{
      on: {
        //mischien eigen , nieuwe selection maken alvast
        mock: function() {
          if(this.__watched) {
            this.__watched.remove()
            this.__watched = null
          }
          if(this.watched) this.watched.$empty()
          this.watched = {}
        },
        user:function() {
          var user = this
          if(this.__watched) {
            this.__watched.remove()
            this.__watched = null
          }

          var selection = this.__watched = new Data( user.usage.from.get('shows') , {
            condition: { 
              media: {
                title: {
                  $exists: true
                }
              }
            }
          })

          user.watched = {}

          selection.on(function() {
            var sets = {}

            selection.each(function(i) {
              var bla =  content.get(this._path.slice(-2))
              var obj = {}
              
              util.path(obj, bla._path, {
                img:true,
                title:true
              })

             var _cloud =  user.parent.cloud
             _cloud.subscribe(obj)

              user.watched.set(this._name, 
              { show: bla
              , media: this.media.from
              })

              user.watched[this._name].once('remove', function() {
                _cloud.unsubscribe(obj)
              })

              sets[this._name] = true
            })

            user.watched.each(function(name) {
              if(!sets[name]) {
                if(user.watched)
                this.remove()
              }
            })

            sets = false

            user.watched.update()
          })
          selection._update()

        }
      } 
    },

    favourites:{
      on: {
        //mischien eigen , nieuwe selection maken alvast
        mock: function() {
          if(this.__favourites) {
            this.__favourites.remove()
            this.__favourites = null
          }
          if(this.favourites) this.favourites.$empty()
          this.favourites = {}
        },
        user:function() {
          var user = this
          if(user.__favourites) {
            user.__favourites.remove()
            user.__favourites = null
          }
          this.favourites.$empty()
          var selection = user.__favourites = new Data( user.usage.from.get('shows') , {
            condition: { 
              favourite: true
            }
          })

          user.favourites = {}

          selection.on(function() {
            var sets = {}

            selection.each(function(i) {
              var bla =  content.get(this._path.slice(-2))

              user.favourites.set(this._name,bla)
              sets[this._name] = true
            })

            user.favourites.each(function(name) {
              if(!sets[name]  ) {
                this.remove()
              }
            })

            sets = false

            user.favourites.update()
          })
          selection._update()

        }
      } 
    }
  })

  user.extend({
    hasWatched: {
      val: {
        val: user.watched,
        transform: hasTransform
      }
    },
    hasFavourites: {
      val: {
        val: user.favourites,
        transform: hasTransform
      }
    }
  })

  var oldContent = content._val

  content.on('self', function() {
    // console.log('content is changing from', oldContent && oldContent._path, 'to', this._val._path)
    if( user.token.val ) {
      resolveWatchedMedia( user )
      user.favourites._prop.on.user.call(user)
      user.watched._prop.on.user.call(user)
    } else {
      resolveWatchedMedia( user )
      user.favourites._prop.on.mock.call(user)
      user.watched._prop.on.user.call(user)
    }
  })

  cases.$hasFavourites = user.hasFavourites
  cases.$hasWatched = user.hasWatched

})

function resolveWatchedMedia( user ) {
  user.watched.from.each(function() {
    var media = this.media && this.media.from
    if(media) {

      var newPath = user.parent.content.from._path.concat( media._contentPath )       
      var oldPath = media._path

      if( !util.compareArrays( oldPath, newPath ) ) {
        void(0)
        this.media.val = user.parent.content.get( newPath )
      }
    }
  })
}

function hasTransform( c, cv) {
  var selection = c._parent._val
  if(selection) {
    if(selection.$length.val>0) {
      return true
    }
  }
  return 0
}
  
},{"../content":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/content.js","./mockdata":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/user/mockdata.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","vigour-js/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","vigour-js/data/selection":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/selection.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/values.js":[function(require,module,exports){
var config = require('../util/config')
var languages = config.languages
var util = require('../util')
var Value = require('../value')
var url = require('../browser/network/url')
var ua = require('../browser/ua')

require('../value/flags/process')

//---------------------------------------


//---------------------------------------

exports.extend = util.extend(function(app) {

  //use cases reference on app
  var cases = app.cases || (app.cases = equire('../browser/cases'))

  app.initialised = new Value(false)

  app.overlay = new Value(false)

  app.focusState = new Value('menu')

  app.region = new Value({
      init: app.initialised
    })
    //browser
    //ua.browser

  app.url = ua.device === 'tv' && ua.platform === 'lg' ? new Value({
      defer: function() {},
      params: {},
      string: ''
    }) : url
    //ook pas op app initilised!

  app.ready = new Value()

  app.menu = new Value({
    init: app.ready
  })

  //TODO:network
  //move network api file to here perhaps
  app.network = new Value()

  //TODO: double check this is efficient
  app.loading = new Value({
    init: app.ready,
    defer: function(update, args) {
        //TODO: cached updatePath ?
        var id = this.updatePath.join('.')
        if (args[0] === false && ((id && id === this.id) || !this.id)) {
          this.val = args[0]
          this.id = false
        } else if (args[0] === true) {
          this.id = id
          this.val = true
        }
        update()
      }
      //add defered later (maybe dont show a loader for less then xxx sec)
  })

  // '_set', function(val, stamp, from, remove, noupdate, added, oldval) {
  //add localstorage

  var guessLanguage = app.guessLanguage = function guessLanguage() {
    //TODO: cordova language
    var language = window.navigator.userLanguage || window.navigator.language
    var guess = (language && language[1]) ? language : app.region.val
    if (guess) {
      guess = guess.slice(0, 2).toLowerCase()
      if (languages && util.checkArray(languages, guess) === false) {
        guess = 'en'
      }
      return guess
    }
    return 'en'
  }

  app.language = new Value({
    transform: function(val, cv) {
      if (!cv || typeof cv !== 'string') {
        cv = guessLanguage()
      }
      return cv ? cv.slice(0, 2).toLowerCase() : false
    },
    init: app.initialised
  })

  app.fullscreen = new Value({
    force: true
  })

  app.loader = new Value()

  app.volume = new Value({
    val: 1,
    transform: function(v, cv) {
      // console.log('volume?',cv,isNaN(cv) ? 1 : cv)
      //TODO: use loDash for isNan
      return isNaN(cv) ? 1 : cv
    }
  })

  app.popup = new Value({
    init: app.ready
  })

  app.state = new Value({
    init: app.ready
  })

  app.notification = new Value({
    init: app.ready,
    force: true //TODO: make this better
  })

  app.playing = new Value({
    init: app.ready,
    val: false
  })

  app.restrictPlayback = new Value()

  //make injectable
  app.wifiOnly = new Value(
    localStorage ? {
      val: localStorage.getItem('wifiOnly') || false,
      defer: function(update) {
        if (this._val) localStorage.setItem('wifiOnly', true)
        else localStorage.removeItem('wifiOnly')
        update()
      }
    } : false
  )

  app.restrictPlayback.val = {
    val: app.wifiOnly,
    transform: function(v, cv) {
      return (cv && cases.native && api.network.val !== 'wifi') ? true : false
    }
  }

  cases.$playing = app.playing

  cases.$storeAvailable = new Value(
    cases.native && (cases.ios || cases.android || cases.windowsMobile) //&& window.Store
  )

})

},{"../browser/network/url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/url.js","../browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var V = require('../')
  , util = require('../util')
  , inject = require('../util/inject')
// , raf = require('../browser/animation/raf')


/*
  util.define( extend, 'extensions',{val:[], setClass:true} )
*/

/**
 * Base is used as a class constructor.
 * @constructor V.Base
 * @param  {*} [val] Startvalue for new V.Base
 */
var base = V.Base = module.exports = exports = function(val) {
  this._from = this.constructor
  if (val) this.set(val)
}

exports.settings = require('./settings')

/**
 * Sets properties defined in an object.
 * Define a _set method on a base instance to get custom method per set.
 * @function _set
 * @param  {*} val         Any value
 * @param  {*} [params]    Added parameters
 * @param {Boolean} noset  When true returns a parsed val object but set nothing
 * @return {Object}        return self for chaining
 */
var _set = exports.set = function(val, params, noset) {
  for (var i in val) {
    if (~i.indexOf(',')) {
      for (var arr = i.split(','), multiobj = {}, m = 0, ml = arr.length; m < ml; m++) {
        multiobj[arr[m]] = util.clone(val[i])
      }
      if (!noset) {
        _set.call(this, multiobj, params, noset)
      } else {
        delete val[i]
        for (var n in multiobj) {
          val[n] = multiobj[n]
        }
      }
    } else {
      i = util.dotField(val, i)

      // console.error( 'SET', this, this._set)

      if (this._set && !noset) {
        this._set.call(this, val, i, params)
      } else {
        //TODO: check for property move from element set to here
        // if( V.Object && this.isProperty( i, val ) && this[i] instanceof V.Object )
        // {
        //   console.log('??', i, val, this.isProperty( i, val ) )
        //   this[i].val = val[i]
        // }
        // else
        // {
          this[i] = val[i]
        // }
      }
    }
  }
  return noset ? val : this
};

util.define(base,
  /**
   * When a Base is extended without defining the type this is the default type.
   * @property defaultType
   */
  'isProperty', function( i, val) {
    var t = this
      , result = 

      
    // val[i] instanceof Object  //THIS MAY GO AWAY LATER
           //TODO: check if this is really nesseracy ( void 0 )
           // && 

      //SUPER DANGERGOUS THING

          !( t._[i] === void 0 //--- danger resolve when define _ is fixed
           && !util.lookup.call(t, i) 
           && typeof t[i]!=='function' 
          )

    // console.log( val[i] instanceof Object, t._[i] === void 0, 'val:',t._[i], !util.lookup.call(t, i), typeof t[i]!=='function'  )

    // console.log( 'IS PROPERTY', i, result )

    return result
  },
  'defaultType', false,
  'extensions', false,
  'define', function(val) {
    for(var i in val) {
      util.define( this, i, val[i] )
      util.define( this.Class, i, val[i] )
    }
  },
  /**
   * Extend is used to add properties to base.
   * Settings are similar to standard defineProperty.
   * @method extend
   * @param   {Object}   settings        Define the following fields: name, type, set, new, remove.
   * @param   {String}   settings.name   Define the name of the property
   * @param   {Object}   [settings.type] Define the type of object e.g. V.Value, set type to false if you want to use standard defineProperty
   * @param   {Function} settings.set    Define a function on set
   * @param   {Function} settings.new    Define a function on construct
   * @param   {Function} settings.remove Define a function on remove
   * @return  {[type]}                   [description]
   */
  'extend', function(settings) {

    //TODO: add to instance as well , have a dictionary of extenstions -- get to orginal easyly
    var args = util.arg(arguments)
      , l = args.length
      , i

    if (l > 1) {
      for (i = 0; i < l; this.extend( args[i++] ));
    } else if (!settings.name) {
      for (i in settings) {

        if( typeof settings[i] === 'function' ) 
        {
          this.extend( { name: i, set: settings[i] } )
        }
        else
        {
          settings[i].name = i
          this.extend( settings[i] )
        }

      }
    } else {

      if( settings === true ){
        alert()
      }


      if (!settings.def && settings.def !== 0) settings.def = false;
  
      if (this.Class.prototype._settings) {
        exports.settings.parse.call(this, settings)
        if (settings._settings) exports.settings.create.call(this, settings)
      }
      //1. normal extensions
      if (settings.type === false || ( !settings.type && !this.defaultType ) ) {

        //TODO: test if double define is actually ok!
        // util.define(this, settings.name, settings)

        util.define(this.Class, settings.name, settings)

      } else {
        //2. V.Values
        if (!settings.type) settings.type = this.defaultType
          //a type has fields type, set ,get, create
        var get =  function(prop) {
            //custom get
            return settings.type.get 
              ? settings.type.get.call(this, prop, settings)
              : prop
          }
          , set =  function(val) {

            var prop = this[settings.name]
            if(prop===null) return
            if (prop===settings.def) { //(prop instanceof V.Object)
              //return is hier mischien niet nodig;
              return settings.type.create.call(this, val, prop, settings)
            } else {
              // console.log('????????????', this, val, prop, settings)
              
              val = settings.type.set.call(this, val, prop, settings)
              if (val!== null) prop.val = val
            }
          }

        //TODO: test if double define is actually ok!
        util.define(
          this,
          settings.name,
          settings.def,
          set,
          get,
          true
        )
        //dit breaked wat shit

        //or on value ? value.prop

        //make extended prototype object perhaps
        // this.Class.prototype['__'+settings.name+'__'] = settings

        util.define(
          this.Class,
          settings.name,
          settings.def,
          set,
          get
        )
      }
    }
  },
  /**
   * Removes this Base. Also removes all listeners added to extensions.
   * Instances true will remove all instances as well.
   * @method remove
   * @param  {[type]} instances  [description]
   * @param  {[type]} fromremove [description]
   * @param  {[type]} params     [description]
   */
  'remove', function(instances, fromremove, params) {

    // this._removing = true

    if(!this._from) return

    this.setting('remove', [params]);

    if (!fromremove) {
      var ins = this._from.base.instances
      if(ins) {
        for (var n = 0, l = ins.length; ins[n] !== this || !ins.splice(n, 1); n++);
      }
    }

    for (var i in this.__) {
      if (this.__[i] instanceof V.Object) {
        //nested, blacklist, not (fields in object), from, stamp, noupdate
//         console.log('---------', i, this.__[i], this.__[i]._path )
        this.__[i].remove(false, false, false, false, false, true);
        this.__[i] = null
      } else {
        this.__[i] = null
      }
    }
    this.__ = null

    if (instances && this.instances) {
      for (j = this.instances.length - 1; j >= 0; this.instances[j--].remove(true, true));
    }

    for (var j in this) {
      // if(this[j] instanceof V.Base) {
      //   this[j].remove()
      // } 
      this[j] = null;
    }

    this._settings = null
    this._ = null
    delete this._settings
    delete this._
    delete this.__
    // delete this._class; may not be nessecary
  },
  /*set on prototype*/
  'set', _set,
  'get', function( path, self ) {
    return util.get( this, path, self )
  },

  'inject', inject,
  /**
   * Passes field parameter only for instances matching a field
   * @method
   * @param  {Function} fn    [description]
   * @param  {String}   field [description]
   * @param  {*}        val   [description]
   * @param  {*}        p     [description]
   * @return {Boolean}        [description]
   */
  'eachInstance', function(fn, field, val, p) {
    var instances = this.instances;
    if (instances) {
      for (var i = 0, l = instances.length, instance; i < l; i++) {
        instance = instances[i];


//problem! has to correct for missing instances!!!
//   console.log(instance, instances)

          

        if (instance && (!field || !instance.__ || !instance.__[field])) {
          if (fn.call(instance, val, p)) {
            return true;
          }
          if (instance.eachInstance(fn, field, val)) {
            return true;
          }
        } else if(!instance) {
          void(0)
          // debugger
        }
      }
    }
  },
  /**
   * Creates a class from the current Base instance
   * @constructor Class
   * @return {Object}
   */
  'Class', {
    get: function() {
      if (!this._class) {
        this.instances = [];
        this._class = function(val, proto, setting) {
          if (!proto) {
            var from = this._from.base;
            from.instances.push(this);
            if (this.setting) {
              this.setting('new', [from, setting]);
            }
            if (val) {
              this.set(val);
            }
          }
        };
        this._class.base = this;
        this._class.prototype = new this._from(false, true);
        this._class.prototype.__ = null;
        util.setstore.call(this);
        var i, _proto = this._class.prototype._ = {};
        for (i in this.__) {
          _proto[i] = this.__[i];
        }
        for (i in this._) {
          if (_proto[i] === void 0) {
            _proto[i] = this._[i];
          }
        }
        this._class.prototype._from = this._class;
        this._class.inject = inject
      }
      return this._class;
    }
  });
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../util/inject":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/inject.js","./settings":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/settings.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/settings.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var base = require('./'),
  util = require('../util');

/**
 * Settings are used for special cases e.g. onRemove or onNew instance
 * @property
 */
util.define(base, '_settings');

base.prototype._._settings = {};

/**
 * Set settings on Base
 * @function _set
 * @param  {Object}  set      Object to set
 * @param  {Boolean} [remove]
 * @param  {Boolean} [force]  True/false
 */
var _set = function(set, remove, force) {
  var _s = set._settings //e.g. node , remove and parent
    , t = this
    , __t = t._._settings
    , setting
    , i
    , _t

  util.setstore.call(t)

  if (!t.__._settings) {
    // console.log('create my own settings')
    t.__._settings = {}
    for (var j in __t) {
      t._settings[j] = __t[j]
    }
  }

  _t = t.__._settings

  // console.log('SETTINGS?'.inverse, set, __t)

  for (i in _s) {
    setting = _s[i]
    //efficient memory management only make own if absolutely nessecary
    if ((remove && _t[setting][set.name]) || (!remove && !_t[setting][set.name]) || force) {
      
      if (_t[setting] === __t[setting]) {
        _t[setting] = {}
        for (var n in __t[setting]) {
          _t[setting][n] = __t[setting][n]
        }
      }

      if (remove) {
        this.eachInstance(function() {
          if (this[set.name] !== t[set.name]) {
            if (this._setting !== _t && this._settings[setting] === _t[setting]) {
              // console.log('found that the settings are the same and not the same property make my own');
              // console.log('------ SETTING')
              _set.call(this, _t[setting][set.name], false, true);
            }
          } else {
            if (this._setting !== _t && this._settings[setting] !== _t[setting]) {
              // console.log('------ REMOVE SETTING')

              // console.log(this.name,set.name,'found that the property is the same but settings are not!');
              this.removeSetting(set.name, setting);
            }
          }
        });
        _t[setting][set.name] = null;
        delete _t[setting][set.name]; //delete is kut!;
        if (util.empty(_t[setting])) {
          // console.log('lets put this to true!')
          _t[setting] = true;
        }
      } else {
        // console.log('------ DO SETTING', set, _t, setting, set.name)
        if(_t[setting]===true) {
          _t[setting]={}
        }
        _t[setting][set.name] = set;
        // console.log('RESULT?', setting, _t[setting])
      }
    }
  }

  // console.log('SETTINGS? -- result'.inverse, _t, this._settings===_t, this.BLUXEN)

};

/**
 * Creates a setting
 * @method create
 * @param  {[type]} set [description]
 * @return {[type]}     [description]
 */
exports.create = function(set) {
  set._set = set.set;
  set.set = function(val, prop) {
    _set.call(this, set)
    set._set.apply(this, arguments)
  }
}

/**
 * Extracts settings from settingsobject and stores them in an array.
 * @method parse
 * @param  {Object} settings Settingobject
 * @param  {Object} object   Settingsobject
 */
exports.parse = function(settings, object) {
  if (!object) {
    object = this._settings
  }
  for (var i in object) {
    if (settings[i]) {
      if (!settings._settings) {
        settings._settings = [];
      }
      settings._settings.push(i);
    }
  }
};

/**
 * Adds setting(s) to Base prototype
 * @method add
 * @param  {String[]}    name  Array of settingnames
 * @param  {Prototype}   proto Prototype eg. myBase class
 */
exports.add = function(name, proto) { //start using this sometimes!;
  if (name instanceof Array) {
    for (var i in name) {
      if (proto) {
        this.add(name[i], proto);
      } else {
        this.addSetting(name[i], false);
      }
    }
  } else {
    if (!proto) {
      util.setstore.call(this);
      if (!this.__._settings) {
        this.__._settings = {};
      }
      for (var j in this._._settings) {
        this._settings[j] = this._._settings[j];
      }
      this._settings[name] = true;
    } else {
      proto.prototype._settings[name] = true;
    }
  }
};

/**
 * Add settings to instances of Base
 * settings only work for instances of the added Basesettings
 * @method
 */
util.define(base,
  'addSetting', function(name) {
    exports.add.call(this, name);
    if (this._class) {
      this._class.prototype._._settings = this._settings;
    }
  },
  /**
   * Simple implementation of setting.create
   * @method setSetting
   * @param  {Object} set Settingobject
   */
  'setSetting', function(set) {
    //eerst checken of ie al bestaat anders kan het voorkomen dat het teveel is
    exports.parse.call(this, set);

    // console.log('SET SETTING'.yellow.inverse, set, this._settings )

    //get gebruiken --- object is een check op meerdere fields returns true of false // bij get ook mogelijk om field mee te geven
    _set.call(this, set);

    // console.log('SET SETTING -- result'.yellow.inverse, this._settings )

  },
  /**
   * [description]
   * @method removeSetting
   * @param  {String}       name     Name of the setting to remove
   * @param  {Array|Object} settings Settingobject
   */
  'removeSetting', function(name, settings) {

    // if(!settings) {
    //   //this may all be not nessecary!
    //   for(var i in this._settings) {
    //     for(var j in this._settings[i]) {
    //       if(this._settings[i][j].name===name) {
    //         settings=this._settings[i][j]
    //         break;
    //       }
    //     }
    //   }
    // }

    if (!(settings instanceof Array)) {
      //this may all be not nessecary!
      // if(settings instanceof Object) {
      //   settings = settings._settings
      // } else {
        settings = [settings];
      // }
    }

    for (var i = settings.length - 1, found, _settings = this._settings; i >= 0; i--) {
      if (_settings && _settings[settings[i]] && _settings[settings[i]][name]) {
        found = true;
        break;
      }
    }
    if (found) {
      _set.call(this, {
        name: name,
        _settings: settings
      }, true);
    }
  },

  /**
   * Checks if object has settings and executes them. Arguments are passed to settings.
   * @method setting
   * @param  {String}    name Name of the setting
   * @param  {Arguments} arg  Arguments to pass to settings
   */
  'setting', function(name, arg) { //misschien arg
    var _s = this._settings;
    if (_s && _s[name] && _s[name] !== true) {
      for (var i in _s[name]) {
        _s[name][i][name].apply(this, arg);
      }
    }
  });

/**
 * Base has two default settings
 * new is invoked on construction , remove on removal;
 * @settings
 */
exports.add(['new', 'remove'], base)

},{"../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/easing.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
var animation = require('./');
animation.easing = exports;
// t: current time, b: beginning value, c: change In value, d: duration
// courtesy of Robert Penner
exports.inCubic = function(t, b, c, d) {
  return c * (t /= d) * t * t + b;
};

exports.outCubic = function(t, b, c, d) {
  return c * ((t = t / d - 1) * t * t + 1) + b;
};

exports.outBack = function(t, b, c, d, s) {
  var s = 1.70158;
  return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
};
},{"./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/frame.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var Value = require('../../value')
  , frame = new Value(1)
  , util = require('../../util')
  , _on = function() {
    // console.group()
    // console.log('\n\n----RAF----'.magenta.bold)
    exports.rafId = window.requestAnimationFrame(_on)
    frame.val++
    // console.groupEnd()
  }

frame.done = new Value(true)

util.define(frame,
  'addListener', function(val, mark, remove) {
    if (!this._listeners){
      this.done.val = false
      _on()
    }
    Value.prototype.addListener.call(this, val, mark, remove)
  }
, 'removeListener', function(val, mark, remove) {
    var t = this
    Value.prototype.removeListener.call(t, val, mark, remove)
    if (!this._listeners) {
      window.cancelAnimationFrame(exports.rafId)
      this.val = 1
      this.done.val = true
    }
  }
)

module.exports = frame
},{"../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */

var element = require('../element').inject(require('../element/properties')) //element added (extend) //call extend on flags (make buffer if already extended)
  , object = require('../../object')
  , util = require('../../util')
  , flags = require('../../value/flags/util')
  , operators = require('../../value/operators')
  , frame = require('./frame')
  , _linear = function(t, b, c, d) {
    return c * t / d + b
  }
//-------------------------------------------------------------------
operators._a = function (val, operator) {
  return operator
}

function preventSet(val) {
  this._p = true
  this.val = val
  this._p = false
}

operators._a.order = 2

flags.animation = {
  set: function (val) {
    
    var thisObject = this
      , _p = thisObject.checkParent('_prop')

    if (val) {

      if (!thisObject._val) thisObject.val = 0

      var name = _p._prop.name
        , element = _p._caller
        , noListener = val.noListener
        , path = thisObject._path
        , id = name.concat(path.join(''))
        , skip = val.skip
        , easing = val.easing 
          && exports.easing[val.easing] 
          || val.easing 
          || _linear
        , time, start, ready

      if(!_p._animListen) _p._animListen = function (val) {
        var tn = this[name]
        if(tn) tn.update(this, true)
        else {
          var FORTESTING = frame._listeners && frame._listeners.length
          void(0)
          frame.removeListener(void 0, this)
          void(0)
          if(FORTESTING && FORTESTING === (frame._listeners && frame._listeners.length))
          {
            void(0)
            // debugger
          }
        }
      }

      element.setSetting({
        name:'animation',
        remove:function() {
          var FORTESTING = frame._listeners && frame._listeners.length
          // console.log('remove setting',frame._listeners && frame._listeners.length)
          

          frame.removeListener( void 0, this)


          if(frame._listeners && FORTESTING && FORTESTING === (frame._listeners && frame._listeners.length))
          {
            for(var i in frame._listeners ) {
              if( frame._listeners[i] instanceof Array ) {
//                 console.log('COMPARE',frame._listeners[i][1]===this, frame._listeners[i][1], 'vs', this )
                if( frame._listeners[i][1]===this, frame._listeners[i][1] ) {
                    // frame._listeners.splice(i,1)
//                     console.error('this >>',this.node)
                    // debugger
                }
              }
            }
          }


        }
      })

      _p.preventSet = preventSet

      _p.set('translate', true)

      thisObject.set('_a', {
        time: val.time || 60,
        val: function(v, cv, b) {
          
          var t = this
            , a
            , prop = _p //t[name] ||
            , pr = t[name]

          if (!t._a) t._a = {}
        
          if (!t._a[id]) {

            start = val.start === void 0 
              ? t.rendered && (thisObject.__lval !== void 0)
                ? thisObject.__lval
                : cv
              : val.start instanceof object 
                ? val.start.val
                : val.start

            t._a[id] = {
              _start: start,
              _end: start,
              _current: start,
              _count: 0
            }

            if (!t.rendered) return start
          }

          if (t.rendered) {
            if(skip) {
              t._a[id]._current = cv
              skip = false
              return cv
            }

            a = t._a[id]
            if (pr._p || exports.prevent) {
              a._frame = 0
//               console.log('remove prevent',frame._listeners && frame._listeners.length)
              frame.removeListener(prop._animListen, this, true)
//               console.log('>> remove prevent',frame._listeners && frame._listeners.length)
              if (pr._p !== 1) {
                a._current = a._end = cv
                if (val.complete) noListener = val.complete.call(t, cv)
                if (val.done) setTimeout( function() { val.done.call(t,cv) }, 0)
                if (val.once) {
                  setTimeout( function() { 
                    if(val.once) val.once.call(t,cv) 
                    val.once = null
                  }, 0)
                }
              }
            } else if (a._frame !== frame.val) {
              if (a._frame || (cv !== void 0 && a._current !== cv)) { //checking a.frame faster than comparing a.current to cv
                if (a._end !== cv) {

                  if (val.init) val.init.call(t, a._current)
                  if(!noListener) {
                    frame.addListener([prop._animListen, this, name]
                      , function (listenArray, listeners) {
                        for(var i in listeners) {
                          if(listeners[i].pop) {
                            if(listeners[i].pop && listeners[i][1]===t && listeners[i][2]===name) {
                              return false
                            }
                          }
                        }
                       return true 
                      }
                    )
                  }
                  a._start = a._current
                  a._end = cv
                  a._count = 0
                  time = ~~v.time.val
                }
                a._frame = frame.val

                if(val.delay){
                  val.delay--
                  return a._start
                }

                var cnt = ++a._count
                a._current = easing.call(t, cnt, a._start, a._end - a._start, time || (time = ~~v.time.val))
                if(val[cnt]) val[cnt].call(this,a._current,cv)
              }
              if (a._count === time) {              
                a._current = cv
                a._frame = 0
                a._count = 0

                if (val.complete) noListener = val.complete.call(t, cv)
                if (val.done) setTimeout( function() { val.done.call(t,cv) }, 0)
                if (val.once) {
                  setTimeout( function() { 
                    if(val.once) val.once.call(t,cv) 
                    val.once = null
                  }, 0)
                }

                if(!noListener)
                {
//                   console.log('remove nolistener',frame._listeners && frame._listeners.length)
                  frame.removeListener(prop._animListen, this, true)
//                   console.log('>> remove nolistener',frame._listeners && frame._listeners.length)
                }
              }
            }
            return a._current
          } 
        }
      })
            
      _p._skip = true
      thisObject._skip = true
      
      if (val.start !== void 0) {
        var caller = this._caller
        if(!caller) caller = this.checkParent('_prop')._caller
        caller.setRender(name, function(parent) {
          this.update(name)
        })
      }
    } 
    else {
      thisObject.remove('_a')
      thisObject._skip = void 0
      _p._skip = void 0
      _remove(_p)
    }

  }
}
},{"../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value/flags/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/util.js","../../value/operators":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/operators.js","../element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","../element/properties":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/index.js","./frame":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/frame.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
var ua = require('../ua'),
  RAF = 'equestAnimationFrame',
  CAP = 'R' + RAF,
  util = require('../../util')
  lastFrame = 0;

util.define(ua, 'hasTransition', {
  get:function() {
    if(!ua._hasTransition) {
       var b = document.body || document.documentElement
        , s = b.style
        , p = 'ransition';
      ua._hasTransition = typeof s['t'+p] === 'string' 
        || typeof s[ua.prefix + 'T'+p] === 'string'
    }
    return ua._hasTransition
  }
})
  
RAF = 'r' + RAF;
if (!window[RAF]) { 

  ua.noRaf = true

  //window[ua.prefix + CAP] || 

  window[RAF] = function(callback) {
    return setTimeout(callback, 20);
  };
  window.cancelAnimationFrame = function(id) {
    clearTimeout(id);
  };
}



module.exports = exports = window[RAF]

exports.timer = function( fn, frames, repeat ){
  if( --frames ){
    exports(function(){
      if( repeat ) fn()
      exports.timer( fn, frames, repeat )
    })
  } else {
    exports( fn )
  }
}

exports.repeat = function( fn, frames ){
  exports.timer( fn, frames, true )
}

//check ios 6 paul irish says stuff goes wrong there...
},{"../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/base.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

var cases = require('./'),
  element = require('../element'),
  setFlags = require('../element/set'),
  base = require('../../base'),
  util = require('../../util');

//------------------CASES FOR SET-------------------------------
var _css = function(t, name, invert, remove) {
    if (!invert) {
      if(!t.css) { t.css = '' }
      t.css.set( remove ? 'removeClass' : 'addClass', name ) 
      t.css.update(t)
                  // console.error('\n\n\nset css!!!!!xxx', name, t.node)

      t.eachInstance(function() {
            void(0)

        // if(this.css !== t.css) {
          this.css.set( remove ? 'removeClass' : 'addClass', name ) 
          this.css.update(this)
        // }
      })
    }
  },
  methods = cases.methods;

setFlags.remove = function(i, val, copy, top) {
  //this could become a seperate module since remove may be usefull for different purposes
  if (val && val.__remove__) {
    if (this[i] instanceof base) {
      top[i] = false;
    } else if (util.lookup.call(this, i)) {
      delete val.__remove__;
    } else {
      delete val[i];
      return true;
    }
  }
};

setFlags.cases = methods.reader(function caseReaderBase(name, val, dynamic, invert) {
  var t = this,
    f = function(obj) {
      obj = base.set(obj, false, true);
      for (var i in obj) {
        if (util.isObj(obj[i])) {
          obj[i] = f(obj[i]);
        }
      }
      return obj;
    },
    method,
    parsed,
    set,
    sVal,
    original;
  val = f(val);

  if (dynamic) {
    if (!t._cases) {
      t._cases = {};
    }
    if (val === null) {
      if (t._cases[name].method) {
        // console.error(name, 'case === null , remove it');
        cases[name].removeListener(t._cases[name].method);
      }
      if (cases[name].val) {
        t.css = {
          removeClass: name
        };
         t.eachInstance(function() {
            this.css = {
              removeClass: name
            };
         })
      }
      delete t._cases[name]; //removes case orginal
    } else {
      // console.error('SET CASE',name,t._cases[name]&&t._cases[name].method);
      parsed = methods.original(t, true, val, t._cases, true, name);
      t._cases[name] = {
        val: val,
        orig: parsed[0],
        nested: parsed[1]
      };

      if (!t._cases[name].method) {
        // console.error('this is what i have set for original', t._cases);
        method = t._cases[name].method = function() {

          // console.log('LETS TRY TO RUN METHOD',name,val);

          if (val) {
            set = methods.merge(true, name, val, t._cases); //arg no val;
            sVal = set [0];
            original = set[1];
            delete sVal.val;
            delete original.val;
            if (cases[name].val) {
              _css(t, name, invert);
              t.set(sVal, true);
            } else {
              _css(t, name, invert, true);
              t.set(original, true);
            }
          }
        };
        // console.error('ADD LISTENER TO',name,  t._cases[name]);
        cases[name].addListener(method);
        //remove setting on remove (saves memory)
        t.setSetting({
          name: '_c' + name,
          remove: function() {
            if(this === t ) {
              cases[name].removeListener(method); //if(!this.css === this._from.base.css) 
              this._cases[name].method = null
            }
          }
        });
        // } else {
        // console.log(name, 'already got listeners for case',name);
      }
      if (cases[name].val) {
        _css(t, name, invert);
        t.set(val, true);
      }
    }
  } else {
    _css(t, name, invert);
    t.set(val); //maybe copy args?
  }
  return true;
});
},{"../../base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","../element/set":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/set.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

var object = require('../../object'),
  util = require('../../util'),
  element = require('../element'), //element /w extend
  value = require('../../value'),
  flags = require('../../value/flags');

/**
 * cases
 * cases are used to set one or more values when a specific case is true
 * there are 2 types of cases , static and dynamic ,
 * static cases are set at initialization of the application , usefull for things such as device type (phone, desktop, tv)
 * dynamic cases can be changed dynamicly and Objects or Bases that use the case will be changed dynamicly as well
 */

util.define(exports, 'methods', {});
//multiple, recursive and original have to become extensions on V.Object.convert so it's possible to use the same for data and events

var _isObj = util.isObj,
  /*
    _recur
    special merge that adds __remove__ if a field has to be removed
  */
  _recur = function(original, merge, fieldExists) {

    // console.log(original, merge, fieldExists)

    var keys, i, key, originalChild, mergeChild;
    if (fieldExists) {
      keys = {};
      for (key in original) {
        keys[key] = true; //keys can be undefined -- code can become shorter
      }
    }
    for (i in merge) {
      if (!fieldExists || keys[i]) {
        originalChild = original[i];
        mergeChild = merge[i];
        if (originalChild instanceof Object) {
          if (originalChild.__remove__ && (mergeChild && !mergeChild.__remove__)) {
            delete originalChild.__remove__;
          }
          if (!(mergeChild instanceof Object)) {
            merge[i] = {
              val: mergeChild
            };
          }
          _recur(originalChild, mergeChild, fieldExists);
        } else {
          original[i] = mergeChild;
          originalChild = 'burn';
        }
      }
    }
  },
  /*
          _multiple
          merge multiple orginals into a new orginal object also resolve nested cases
      */
  _multiple = function(t, nested, cases, currentObj, currentVal, base, name, path, orig) {

    if (!path) {
      orig = t;
      path = [];
    }
    var j, _case, cvChild;

    if((currentVal instanceof object) && !base) {

      // currentObj.val = t._val
      // console.error('VOBJ', currentObj)


    } else if (currentVal instanceof Object) {
      for (j in currentVal) {
        cvChild = currentVal[j];
        if (exports[j]) {
          _case = exports[j];
          if (_case instanceof object) {
            if (!base || !element.set.lookup.call(orig, path[path.length - 1])) { //element is required in cases.base, make this part extendable
              nested[j] = true;
            }
          }
          if (!_isObj(cvChild)) {
            currentObj.val = t && (t._val !== void 0 ? t._val : void 0);
          } else {
            path.push(j);
            //should be possible to use nested for current nested case;
            _multiple(t, nested, cases, currentObj, cvChild, base, name, path, orig);
          }
          currentObj[j] = null;
        } else {
          if (_isObj(cvChild)) {
            if (!currentObj[j]) {
              currentObj[j] = (t && t[j] && t[j].convert && t[j].convert(cvChild)) || (cvChild instanceof Array ? [] : {});
            }
            path.push(j);
            _multiple(t && t[j], nested, cases, currentObj[j], cvChild, base, name, path, orig);
            if (base && (!t || !t[j])) {
              currentObj[j].__remove__ = true;
            }
          } else {
            if (t && currentObj && !currentObj[j]) {
              if (flags[j]) {
                delete currentObj[j];
                currentObj.val = t._val !== void 0 ? t._val : void 0;
              } else {
                currentObj[j] = j === 'val' 
                  ? (t._val !== void 0 ? t._val : void 0) 
                  : (t[j]!==void 0 && t[j].convert && t[j].convert())
              }
            }
          }
        }
      }
    }
  };

/*
      original
      create a orginal store for a new case
    */
exports.methods.original = function(t, isObj, val, cases, base, name) {



  var obj = isObj ? t.convert(val) : t._val,
    i, cflag, nested = {};

  _multiple(t, nested, cases, obj, val, base, name);

  // for(var i in nested) {
  //   console.error('NESTED:::',i);
  // }
  // console.log(base ? 'BASE:': 'PROPERTY:' , name,'ORIGINAL GENERATION','\nval:',val,'\nobj:',obj,'\nnested:',nested,'\ncases:',cases);

  for (i in cases) {
    if (!nested[i]) {
      cflag = cases[i].orig;
      if (!isObj) {
        if (_isObj(cflag)) {
          if (cflag.val) {
            obj = cflag.val;
          }
        } else {
          obj = cflag;
        }
      } else {
        if (_isObj(cflag)) {
          if (!cases[i].nested[name]) {
            _recur(obj, cflag, name);
          }
        } else if (obj.val) {
          obj.val = cflag;
        }
      }
    }
  }



  return [obj, nested];
};
/*
  merge
  merge dynamic cases (overwrite /w cases that are true and further in the order of cases)
*/
exports.methods.merge = function(isObj, name, val, cases) {
  var original = util.clone(cases[name].orig),
    sVal = val,
    overwrite,
    i,
    merge,
    originalChild;
  for (i in cases) {
    if (i !== name && !cases[name].nested[i]) {
      if (exports[i].val) {
        merge = cases[i].val;
        if (_isObj(original) || _isObj(merge)) {
          if (!_isObj(original)) {
            original = {
              val: original
            };
          }
          if (!_isObj(merge)) {
            merge = {
              val: merge
            };
          }
          _recur(original, merge, true);
          for (i in exports) {
            originalChild = original[i];
            if (originalChild !== null && originalChild !== void 0) {
              delete original[i]; //delete is pretty slow
            }
          }
          if (overwrite) {
            if (isObj) {
              if (sVal === val) {
                sVal = util.clone(sVal);
              }
              merge = util.clone(merge);
              for (i in exports) {
                if (merge[i] !== null && merge[i] !== void 0) {
                  // console.error('REMOVE FIX', i);
                  delete merge[i]; //delete is pretty slow
                }
              }
              _recur(sVal, merge, true);
            } else {
              if (merge.val) {
                sVal = merge.val;
              }
            }
          }
        } else {
          original = merge;
        }
      }
    } else {
      overwrite = true;
    }
  }
  return [sVal, original];
};
/*
  reader
  abstraction for use in cases.object and cases.base
*/
exports.methods.reader = function(fn, dynamic, _static) {
  return function reader(name, val) {
    var invert = (name[0] === '!'),
      vCase = invert ? exports[(name.slice(1))] : exports[name],
      ret;
    if (vCase) {
      if (vCase instanceof object) {
        if (invert && !exports[name]) {
          exports[name] = new value({
            val: function() {
              return !vCase.val;
            },
            listen: vCase
          });
        }
        ret = fn ? fn.call(this, name, val, true, invert) : dynamic;
      } else {
        ret = invert ? !!fn : fn ? fn.call(this, name, val) : _static
      }
    } else if (invert) {
      ret = fn ? fn.call(this, name, val, false, invert) : _static;
    }
    if (vCase === false && fn) {
      ret = true;
    }
    return ret;
  };
};

require('./object');
require('./base');
},{"../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../../value/flags":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js","../element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","./base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/base.js","./object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/object.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/object.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

var flags = require('../../value/flags'),
  Cases = require('./'),
  object = require('../../object'),
  util = require('../../util'),
  methods = Cases.methods,
  dynamic = {
    set: function(val, stamp, reset, name) {

      if(!this._flag) this._flag = {}

      var t = this,
          //selection for t._flag easy maken
          
          
        flags = t._flag.case || (t._flag.case = [
          'case',
          t._val,
          false, {},
          dynamic
        ]),
        cases = flags[3],
        isObj = util.isObj(val),
        setVal = (isObj && !val.val) ? false : true;
      if (val === null) {
        if (cases[name]) {
          Cases[name].removeListener(cases[name].method);
        }
        delete cases[name];
      } else {
        flags[5] = true;
        if (!cases[name]) {
          var x = methods.original(t, isObj, val, cases, false, name);
          cases[name] = {
            val: val,
            orig: x[0],
            nested: x[1],
            method: function() {
              var set = methods.merge(isObj, name, val, cases),
              sVal = set[0],
              original = set[1];
              // console.log(name)
              // if(name === '$isActive' )console.error('boeloe boeloe boeloe!!!',sVal,original)

              flags[5] = true; //the closures here are not really nessecary better to avoid
              if (Cases[name].val) {

                if(!sVal) void(0)
                if (setVal && sVal) {
                  // if(name === '$isActive' )console.log('yee its true')
                  flags[1] = sVal.val || sVal;
                }
                t.val = sVal;
              } else {
                                  // if(name === '$isActive' )console.log('no way gozee')

                if (setVal) flags[1] = original && original.val || original

                if(name === '$isActive' )void(0)

                t.val = original;
              }
              flags[5] = null;
            }
          };
          Cases[name].addListener(flags[3][name].method);
        }
        if (Cases[name].val) {
          if (setVal) {
            flags[1] = val.val || val;
          }
          object.set.call(t, val, stamp, false, true);
          //not always
          t._ignorefornow = true

        }
        flags[5] = null;
      }
    },
    // reset:function() {
      // console.error('reset')
    // },
    //add reset later
    remove: function(flags, name) {
      // console.log(flags, name)
      var cnt = 0
      for (var i in flags[3]) {
        // if(flags[3])
        cnt++
        if(!this._ignorefornow && !name || i===name) {
          cnt --
          Cases[i].removeListener(flags[3][i].method);
        } else {
          delete this._ignorefornow
        }
      }
      if(cnt) {
        // console.log('CASE OBJECT REMOVAL --- IT IS NOT EMPY')
        return true
      }
    },
    stack: 'case'
  },
  _static = {
    set: function(val, stamp, reset, name) {
      if (val !== null) {
        object.set.call(this, val, stamp, false, true);
      }
    }
  };

flags.dynamic.cases = methods.reader(false, dynamic, _static);
},{"../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value/flags":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/css.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

/*
  gets and caches values for css classes, also possible to change styles of classes
  return an array of multiple css objects corresponding to the class name
  when you pass field it searches the field trough all the classes selected, always takes first argument
  maybe have to make this for things such as div selectors / nested stuff --- will be cpu intensive!;
*/
var selector = 'cssRules',
  parseclass = function(slctr) {
    slctr = '.' + slctr.replace(/\./g, ' .').toLowerCase();
    for (var robj, select = document.styleSheets, length = select.length, i = 0, selectItem; i < length; i++) {
      selectItem = select[i][selector] || select[i][(selector = 'rules')]; //location of this polyfill can be improved
      if(selectItem) {
        for (var j = 0, l = selectItem.length, item; selectItem, j < l; item = selectItem[j++], item.selectorText === slctr && (robj = item.style));
      }
    }
    return robj;
  },
  c = function(cssClass, cache) {
    var t = exports;
    cache.push(t[cssClass] || (t[cssClass] = parseclass(cssClass)) || {});
    return cssClass;
  };

module.exports = function(slctr, field) {
  if (slctr) {
    var cache = this[slctr];
    if (!cache) {
      cache = [];
      for (var selectarray = slctr.split(' '), i = 0, l = selectarray.length, cssClass; i < l; i++) {
        if ((cssClass = c(selectarray[i], cache).split('.')) instanceof Array) {
          c(cssClass[cssClass.length - 1], cache);
        }
      }
      this[slctr] = cache;
    }
    if (field) {
      if(!(cache instanceof Array))
        return
      for (var ret, i = cache.length - 1; !ret && i >= 0; ret = cache[i--][field]);
      cache = ret;  
    }
    return cache;
  }
};
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var base = require('../../base')
  , valueBase = require('../../value/base')
  , vigour = require('../../')
  , util = require('../../util')
  , elementBase = new base()

elementBase.defaultType = valueBase.type

module.exports = exports = vigour.Element = elementBase.Class
exports.base = elementBase

var _doc = typeof document !== 'undefined' ? document : 'no document', //reference to document is faster than using window.document;
  /**
   * Removes children from parent node
   * @method _removeChildren
   */
  _removeChildren = function() {
    for (var c = this._node.childNodes, i = 0, l = c.length; i < l; i++) {
      if (c[i].base) {
        // console.log
        c[i].base.remove(false, false, true);
      }
    }
  };

/**
 * node
 * adds and clones html nodes;
 * @attribute
 */
exports.base.extend({
    name: 'node',
    type: false ,
    /**
     * Defines what happens when node is set
     * @method set
     * @param  {*} val Defines the value of this._node
     */
    set: function(val) {
      //changing node bugs /w conversions
      //iframe selectors dont evaluate to a string
      if (val instanceof Object || !val.length) {
        this._node = val;
      } else {
        this._node = _doc.createElement(val);
      }
      this._node.base = this;
    },
    /**
     * Defines what happens when you get node
     * @method get
     */
    get: function() {
      if (!this._node) {
        this.node = _doc.createElement('div');
      }
      return this._node;
    },
    /**
     * Defines what happens when you create a new node
     * @method new
     * @param  {Object} from    Target
     * @param  {[type]} newnode [description]
     */
    "new": function(from, newnode) {
      if (!newnode) {
        var node = from._node;
        if (node) {
          this._node = node.cloneNode(true); //especialy good to do for memory (also saves 20% on cpu)
          this._node.base = this;
        }
      } else {
        this._node = newnode;
      }
      if (from._node && from._node.hasChildNodes()) {
        var i, c = this._node.childNodes,
          cf = from._node.childNodes,
          l = c.length,
          ci, cfb;
        for (i = 0; i < l; i++) {
          cfb = cf[i].base;
          if (cfb) {
            c[i].base = new cfb.Class(false, false, c[i]);
            //maybe call children new stuff with a custom setting as well?
            if (cfb._name) {
              c[i].base._name = cfb._name;
              this[cfb._name] = c[i].base;
            }
            c[i].base.setting('parent', [this]);
          }
        }
      }
    },
    /**
     * Defines what happens when you remove a node
     * @method remove
     * @param  {*}  [param] If param doesn't remove node from parent
     */
    remove: function(param) {
      _removeChildren.call(this);
      if(this._node) this._node.base = null //little slow optimize later
      if (!param) {
        var _p = this._node.parentNode;
        if (_p) {
          _p.removeChild(this._node);
          if (this._name && _p.base) {
            _p.base[this._name] = null;
          }
        }
      }
    }
  },
  /**
   * Set css class of a div
   * Use addClass or removeClass to add/remove a class
   * @attribute css
   * @param  {Object} val [description]
   * warning: the add operator in css is currently used by .name,
   * and will be replaced when you try to build a string
   * using {val: .... add: ....}
   */
  {
    // __$css: function(val) {
      // this.css
    // }
    css: function(val) {
      var _val = val.val || '';
      val._skip = true; //_skip is an ugly name
      if(val.addClass){
        if (!~_val.indexOf(val.addClass.val)) {
          val._val = ((_val.length > 0 ? _val + ' ' : '') + val.addClass.val);
          if(val.add) val._val = val._val.replace(val.add.val,'')
          val._lval = false;
          val.__lval = false;
          val.___lval = false;
          _val = val.val;
        }
        val.addClass.remove();
      }

      if(val.removeClass){
        if (_val && val._val) {
          val._val = val._val.replace(new RegExp(' ?' + val.removeClass.val), '');
          val._lval = false;
          val.__lval = false;
          val.___lval = false;
          _val = val.val;
        }
        val.removeClass.remove();
      }

      if( _val ) {
        this.node.className = _val.replace('$','')
      } else {
        this.node.className = ''
      }
    }
  },
  /**
   * Makes it possible to reference a child by name
   * Setting on a class does not update names of instances
   * Element[NAME]
   * @attribute name
   */
  {
    name: 'name',
    type: false,
    set: function(val) {
      var _p = this.parent;
      if (this._name) {
        if (_p) {
          _p[this._name] = null;
        }
      }
      this._name = val;
      if (!this._node || val !== this.node.nodeName.toLowerCase()) {
        //name does not inherit, beware!
        // console.log('WHATS THIS?',val);
        // this.css = {addClass:val};
        // this.className = this._name;
        if(!this.css || this.css._val!==val)this.css = { add: ' ' + val }
        //special name field?
      }
      if (_p) {
        _p[val] = this;
      }
    },
    get: function() {
      return this._name;
    }
  },
  /**
   * Returns parent base element
   * @attribute parent
   */
  {
    name: 'parent',
    type: false,
    get: function() {
      if (this._node) {
        var _p = this._node.parentNode || this._p;
        return _p ? _p.base || _p._p : false;
      }
    }
  },
  /**
   * Returns childNodes /w base classes array slow, cache if possible
   * @attribute children
   */
  {
    name: 'children',
    type: false,
    get: function() {
      if(!this._node) return []
      var c = this._node.childNodes,
        l = c.length,
        _c = new Array(l),
        i;
      for (i = 0; i < l; i++) {
        _c[i] = c[i].base || c[i];
      }
      return _c;
    }
  });

var recurRender = function(parent) {

  if (!this.lastindex) this.setting('render', [parent]) //execute render settings

  if (this.renders) {

    // console.error('RENDER ---', this.name, this.renders)

    for (var p
      , c = this.node.childNodes
      , cl
      , arr = this.renders
      , obj
      , i = this.lastindex || 0, l = arr.length; i < l; i++) {
      obj = arr[i]

     if(obj) {
        p = util.checkArray(c, obj, 'base')
        if (p !== false) {
          recurRender.call(obj, this)
        } else if(obj._from) {

          // console.log('CLASS!',obj, obj.name && this[obj.name] && this[obj.name] === cl)

          cl = obj.Class

          if(obj.name && this[obj.name] && this[obj.name] === cl) {
            recurRender.call(this[obj.name], this)
          } else {
           for (var j in c) {
             if (c[j].base && c[j].base instanceof cl) {
               recurRender.call(c[j].base, this)
               break;
             }
            }
          }
        }
      }
      // arr.splice(i,1)
    }
  }

  this.lastindex = l
},

setRender = function() {
  var p, pp;
  if (this.parent) {
    p = this.parent;
    if (p.renders) {
      p.renders.push(this);
    } else {
      p.renders = [this];
      pp = p.parent;
      if (pp && !(pp._settings && pp._settings.render !== true)) {
        setRender.call(p);
      }
    }
  }
},

valRender = function(val) {
  var _settings = (val.__ && val.__._settings || val._._settings)
  if (val._.renders || val.__ && val.__.renders || _settings.render !== true) {
    if (!this.renders) this.renders = []
    if (!(this.__ && this.__.renders)) this.renders = util.clone(this.renders)
    // console.log(this.renders===this.__.renders, this.__.renders, this._.renders)

    // console.log(util.checkArray(this.renders,val._from))
    // console.log('XXXXXX',val)
    // if(util.checkArray(this.renders,val._from._from,'_from._from')===false&&util.checkArray(this.renders,val._from,'_from')===false) {
      this.renders.push(val)
    // }
    // console.log('renders push --- creates leaks!')
  }
}

//define vanuit base (korter!)
util.define(exports,
   'append', function(arr) {

    // alert('APPEND')
    // console.log('APPEND'.inverse,arr)

      var args = arguments

      if(arguments.length>1) {
        arr = util.arg(arguments)
      } //else if(arr )

      var insertbefore
      if(!arr.length && !(arr instanceof exports) && arr.val) {
        insertbefore = arr.before
        arr = arr.val
      }
      var Class = arr[0]
      , i = 0
      , l = arr.length
      if(!arr.length) {
        this.add(arr, insertbefore)
      } else if(typeof Class === 'function') {
        for(var i=1, l = arr.length;i<l;i++) {
          this.add(new Class(arr[i]), insertbefore)
        }
      } else {
        for(;i<l;i++) {
          this.add(arr[i], insertbefore)
        }
      }
  },
  'checkRender', function(val, notRendered) {
    if (val) valRender.call(this, val)
    if (!notRendered) {
      var _renders = (this.__ && this.__.renders || this._.renders)
      if ( ( (_renders  || ((this.__ && this.__._settings)  || this._._settings).render !== true)
          && (!this.lastindex || (_renders && this.lastindex < _renders.length))
        ) && this.rendered) {
        recurRender.call(this, this)
      } else {
        if(this.parent) valRender.call(this.parent, this)
      }
    }
  },
  'checkParent', util.checkParentFactory('parent'),
  'get',function(path, self) { //get does not need an array as path
    return util.get(this, path, self);
  },
  'find', function(get, match, level) {
    if(level === void 0) level = true
    var children = this.node.childNodes
      , i = 0
      , found
      , child
      , len = children.length
      , passOn = level===true ? true : level-1
    for(;i<len;i++) {
      child = children[i].base
      if(child) {
        if(child.get(get, true)==match) {
          return child
        } else if(level) {
          found = child.find(get, match, passOn)
          if(found) return found
        }
      }
    }
  },
  'setRender', function(name, val) {
    this.setSetting({
      name: name,
      render: val
    });
    setRender.call(this);
    this.eachInstance(function() { //look for current caller instance perhaps?
      setRender.call(this)
    }, name);
  },
  'renders', false,
  /**
   * Add element as child
   * @method
   * @param  {Object}  val  Object to be added
   * @return {Object}       Returns the V.element
   */
  'add', function(val, insertbefore) {
    
    if(insertbefore) {
      if(typeof insertbefore === 'string') insertbefore = this[insertbefore]
      if(insertbefore) {
        this.node.insertBefore(val.node, insertbefore.node || insertbefore)
      } else {
        void(0)
      }
    } else {
              // console.error(val)

      this.node.appendChild(val.node)
    }

    val.setting('parent', [this]) //execute parent settings
    if (val.name) this[val.name] = val
    //--------------------
    //needs cleaning costs 3% now...
    this.checkRender(val)
    //--------------------
    return this
  },
  /**
   * Removes all children
   * @method empty
   * @param  {Boolean} instances True will remove all instances of children removed
   */
  'empty',
  function(instances) {
    var c = this.node.childNodes
      , i
    this.node.innerHtml = ''
    for (i = c.length - 1; i >= 0; i--) {
      if (c[i].base) c[i].base.remove(instances)
    }
  });

exports.base.addSetting('parent')
exports.base.addSetting('render')
require('./set')
},{"../../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../../base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../value/base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/base.js","./set":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/set.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/display.js":[function(require,module,exports){
var collection = require('./util')

exports.prepare = function(el) {
  if(!el.display) el.display = 'block'
}

exports.newElement = function(data, element, t) {
  var c = collection.children(t)
  for(var i in c) {
    if(c[i]._d && c[i]._d===data) {
      c[i].display = element.display.val
      return true
    }
  }
}
 
exports.rem = function (el, t, hasFilter, noResolve) {
 el.display = 'none'
 return true
}

exports.fragment = function(a,b,exclude,i) {
  //since it never removes excludes should never be applied
  //exclude is normally used to not add things again if they already exist
  if(exclude) exclude[i]=null
}

},{"./util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/util.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/index.js":[function(require,module,exports){

var collection = require('./util')
  , util = require('../../../../util')

/**
 * collection
 * links arrays or object to elements
 * use filter if you want to convert
 * @attribute
 */

exports.extend = util.extend(
  require('../data'),
  function(base){

    base.extend({
      name:'collection',
      // render:function() {
      //   this.update('collection') 
      // },
      remove:function() {
        if(this._colElem) this._colElem.remove()
      },
      set: function(val, stamp, from, remove, change, added) {

        val._skip = true

        var hasFilter = collection.filter(val, this)
          , data = this.filter || val.val
          , options = this._colOptions || val.options 
              && (this._colOptions = val.options.convert())
          , orig =  val.element
          , el = this._colElem 
              || (orig && orig._val) && (this._colElem = new (orig._val.Class || orig._val)())
          , firstRun = !this._colInit
          , slStamp
          , elVal
          , colElem = this._colElem

          // console.log('!!!OPTIONS!', options)

        //dirty block! clean it FAST

        // || !this.rendered 

        if(!(data && el)) return //||!this.rendered
        
        slStamp = orig._slStamp
        elVal = orig._val

        if(slStamp) {
          orig._slStamp = stamp
        } else if(colElem && orig._slStamp !== stamp) {
          if(!(elVal.Class && (colElem instanceof elVal.Class)) 
            && !(!elVal.Class && (colElem instanceof elVal))) {
            el = this._colElem = new (elVal.Class || elVal)()
            orig._slStamp = stamp
          }
        }



        // console.log('ook leuk ff update', val, stamp, from, remove, change, added)
          // console.log('pass!')
          
        if(firstRun) {

          options && options.prepare && options.prepare(el)

          this._colInit = true
          this.node.appendChild(collection.fragment( data, el, this, false, options
            , hasFilter ))

        } else {

          if(from && from._parent === data.from) {
            if(remove) {
              var r = util.checkArray(collection.children(this),from,'_d',true)
              if(r) {
                if(!(options && options.rem && options.rem(r, this, hasFilter))) {
                  r.remove()
                }
              }
            } else if(util.checkArray(collection.children(this),from,'_d')===false) {

              collection.element( from, el, this, true, this.node, options, hasFilter, true )
            } else if(hasFilter && options && options.indexChange) {

                options.indexChange(
                  util.checkArray(collection.children(this),from,'_d',true)
                  , this, hasFilter )
            }
            
          } else {
            
            // console.log('122XXXXX', from, hasFilter, collection.filter(val, this)) //try to fix order by name better

            if(!from) {

              if(remove) {
                collection.clear(this, options)
              } else {

                var c = collection.children(this)
                  , exclude = {}
                  , name
                  , fField
                  , keys
                  , child

                // console.log('XXXXX',hasFilter) //try to fix order by name better
                if(hasFilter===true) {
                  keys = data.keys
                }

                for(var j in c) {
                  child = c[j]
                  name = c[j]._d._name

                  // console.log(c[j], hasFilter, keys, util.checkArray(data,child._d) === false)

                  if(hasFilter && !keys ? util.checkArray(data,child._d) === false : !data[name] || data[name]!==child._d ) {

                    // console.log('CHECK!---',j)

                    if(!(options && options.rem && options.rem(child, this, hasFilter, hasFilter))) {
                      child.remove()
                    }
                  } else {
                    //this is more efficient
                    // if(data[name]!==c[j]._d) c[j].data = data[name] 
                    exclude[name]=true
                    if(hasFilter) {
                      if(options && options.indexChange) {
                        if(child._d._indexCache[hasFilter][0]!==child.i) {
                          options.indexChange(child, this, hasFilter, true)
                        }
                      } else if(hasFilter===true) {
                        if(j!=util.checkArray(keys,name,true)) {
                          delete exclude[name]
                          if(!(options && options.rem && options.rem(c[j], this, hasFilter, hasFilter))) {
                            child.remove()
                          }
                        } 
                      }
                    }
                  }
                }

                this.node.appendChild(
                  collection.fragment(data, el, this, exclude, options, hasFilter)
                )
              }

            }
          }
        }
      }
    })
})
},{"../../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/data.js","./util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/util.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/collection/util.js":[function(require,module,exports){
var element = require('../')
  , Data = require('../../../../data').inject(require('../../../../data/selection'))
  , util = require('../../../../util')

var r = function() {
  return String(~~(Math.random()*9))+''
}

exports.element = function (data, element, t, update, node, options, hasFilter, resolve) {
  var elem
  if(options && options.newElement) {
    elem = options.newElement.apply(this,arguments)
    if(elem===true) return
  }
  elem = elem || new element.Class()
  
  elem._col = true

//   console.log( '---->', data )

  if (data !== void 0) elem._dSet(data)
  if (node) node.appendChild(elem.node)
  elem.setting('parent', [t])
  ;options&&options.element&&options.element(elem, t, hasFilter, resolve)
  if (update && data !== void 0) elem.updateData()
  t.checkRender(elem, true)
  return elem
}

exports.fragment = function (data, element, t, exclude, options, hasFilter) {
  var frag = document.createDocumentFragment()
    , item = function(i) {
        //if you use the passed i it is a different value for selections
        if(this._name) i = this._name
        if(!(options&&options.fragment&&options.fragment(t,this,exclude,i))
          && (!exclude || !exclude[i]) ) {
          var elem = exports.element( this || null, element, t, false, frag, options
              , hasFilter)
          if(elem) frag.appendChild( elem.node )
        }
      }
  frag._p = t

  if(data.each) {
    data.each(item)
  } else {
    //normal data
    for(var i in data) {
      item.call( data[i] ,i )
    }
  }

  element.updateData(true)
  return frag
}

exports.children = function (t, options) {
  if(!t) return
  var ch = []
  for(var i in t.node.childNodes) {
    var child = t.node.childNodes[i].base
    if(child && child._col) {
      ch.push(child)
    }
  }
  ;options&&options.children&&options.children(ch)
  return ch
}

exports.clear = function (t, options) {
  t.colInit = null
  var c = exports.children(t)
  for(var i in c) { c[i].remove() }
  ;options&&options.clear&&options.clear(t)
}

exports.filter = function (val,t) {


  var data = val.val


  // console.log('DO I HAVE FULTER!>?',data,  val, t)


  if(val.filter && val.filter.val===true) {
    // console.log('sort by name') moet beter
        // console.log('got it!DATAx!')

    return true
    //different vibes
  }

  if (data && val.filter && !t.filter) {

    // console.log('MAKE NEW STYUFFF')

    var a = val.filter.raw
    //dit is kapot
    data = t.filter = new Data(data, a)

    // console.log('FILTERSSSS!', a, t)
    // debugger

    a._col = true
    
    data.addListener(function (val, stamp, from, remove) {
      t.collection._update(val, stamp, from, remove)
    })
    
    t.setSetting({
      // name: 'collecitonfilter',
      remove: function () {
        t.filter.remove()
        t.filter = null
      }
    })

    // console.log('DATAx!')
    return data._uid
    // return t.filter._uid//data is filter
  } else if(data && data._filter) {
        // console.log('DxxxATAx!')

    return data._uid
  } 
  else if(t.filter) {

    return t.filter._uid
  }

    // console.log('NO DATAX! FILTER', t)

}

// exports.indexChange = function(el, t, hasFilter, noResolve) {
// var oldIndex = el._d._indexCache[hasFilter][1]
//     , newIndex = el._d._indexCache[hasFilter][0]
//     , ch = !noResolve && collection.children(t,exports)
//     , l


//   exports.xy(el)

//   if(noResolve) return

//   l = ch.length
  
  
//   var clone = el.node.cloneNode(true)
//   t.node.removeChild(el)
//   el._node = clone


   
//   // t.h = t.node.scrollHeight
// }
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/index.js","../../../../data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","../../../../data/selection":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/selection.js","../../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/data.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var data = require('../../../data/base')
  , util = require('../../../util')
  , flags = require('../../../value/flags')

/**
  * extends updateData to take childNodes into account
  * may need to add extra argument for go deep
  * @method
*/
exports.extend = util.extend([ data, {
  updateData: function ( instances, data, fmodel ) {

    // console.log('????----------->>>>>')
    if (this._d) {
      this._subscribed = false
      data = this._d
    }

    var ffmodel = false

    // console.log(fmodel, this.model)
    //dit is omdat er geen model property is op het ding waar data op wordt gebinded dan default ie naar models die er wel zijn
    //oplossing maak model aan altijd als data en niet dfrom

    if (!fmodel && !this.model && !this._fmodel) ffmodel = true
    //fmodel is first model
    for (var children = this.node.childNodes
      , i = children.length - 1
      , base; i >= 0; i--) {
      base = children[i].base
      if (base
      && (!(base.model && base.model.inherit && base.model.inherit.val===false))
      && (base._d === void 0 || base._dfrom)) {
        if (base.model && data) {
          if (ffmodel) base._fmodel = true

          // console.log('FMODEL! -- dSet', data)
          // console.log('------ XXXXXXXXXXXXXXXXX', ffmodel, base._name, '\n', base, data )
          base._dSet(data, true)
        }
        base.updateData(instances, data, base._fmodel || fmodel)
      }
    }
  }
}])

},{"../../../data/base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/base.js","../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../../value/flags":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

  /*
    here some basic html properties are added to V.Element.Nessecary
    for values that you want to be able to bind to V.Objects
    Uses base.extend -- see core.base for more information
  */

var ua = require('../../ua')
  , css = require('../../css')
  , Value = require('../../../value')
  , util = require('../../../util')
  , hash = require('../../../util/hash')
  , raf = require('../../animation/raf')
  , _load = require('../').images = {}
  , _transform = ua.prefix + 'Transform'
  , _cssTransform = ua.prefix + '-transform'
  , body = document.body.style
    //think about doc ready event or fallback if no body
  , _translate = body.perspectiveProperty != void 0
                 || body.WebkitPerspective != void 0
                    ? ['translate3d(', ',0px)']
                    : ['translate(', ')']
  , _coordinate = function(style) {
      var margin = 'margin' + (style[0].toUpperCase() + style.slice(1));
      return function(val) {
        if(val.clean) {
          _cleanCoordinate.call(this,style,margin)
          val.clean = null
        }
        if (val.translate) {
          this.translate(val)
        } else {
          this.node.style[this.relative ? margin : style] = val.val + 'px'
        }
      }
    }
  , _clearTransform = new RegExp(_cssTransform+'(.*?);')
  , _clear =
    { x: /(margin-left(.*?);)|(left(.*?);)/g
    , y: /(margin-top(.*?);)|(top(.*?);)/g
    }
  , _cleanCoordinate = function( check ) {
      var t = this._t
      , keep = false
      , val = this[check]
      , cssText = this.node.style.cssText.replace( _clear[check], '' )

    if( val && val.translate && val.translate.val===false) val.translate = null

    if(this.node.style[_transform] && !val.translate) {
      if(t) {
        if(!this[check].translate) {
          for(var i = 2 ; i < 6 ; i++) {
            if(t[i])keep=true
          }
        } else {
          keep=true
        }
      }
      if(!keep) cssText = cssText.replace(_clearTransform,'')
    }
    this.node.style.cssText = cssText
  }

exports.extend = util.extend(function(base) {
  util.define(base.Class,
    'cleanCoordinates', function(coord) {
       if(this._node) {
        if(!coord) {
          _cleanCoordinate.call(this,'x')
          _cleanCoordinate.call(this,'y')
        } else {
          _cleanCoordinate.call(this,coord)
        }
      }
    },
    'translate', function(val) {
    var _x
      , _y
      , _val =  val.val
      , _scale
      , _rotate
      , _rotateY
      , _rotateX
      , _str = ''
      , _name = val && val._prop.name
      , _t = this._t = this._t || []
      , nope = false

    //cirtical performance point hence use of | 0
    if (_name === 'x') {
      _x = _val | 0
      if (_x === _t[0]) nope = true
    } else if (_name === 'y') {
      _y = _val | 0
      if (_y === _t[1]) nope = true
    } else if (_name === 'rotate') {
      _rotate = _val
      if (_rotate === _t[2]) nope = true
    } else if (_name === 'scale') {
      _scale = _val
      if (_scale === _t[3]) nope = true
    } else if (_name === 'rotateY') {
      _rotateY = _val
      if (_rotateY === _t[4]) nope = true
    } else if (_name === 'rotateX') {
      _rotateX = _val
      if (_rotateX === _t[4]) nope = true
    }

    if (!nope) {
      _t[0] =  _x || (this.x.translate && this.x.val | 0) || 0
      _t[1] =  _y || (this.y.translate && this.y.val | 0) || 0
      _t[2] = _rotate || this.rotate.val
      _t[3] = _scale || this.scale.val
      _t[4] = _rotateY || this.rotateY.val
      _t[5] = _rotateX || this.rotateX.val
      if (_t[0] || _t[1]) {
        _str = _str
          .concat(
            _translate[0]
          + _t[0] + 'px,'
          + _t[1] + 'px'
          + _translate[1]
          )
      }
      if (_t[2]) { _str = _str.concat(' rotate(' + _t[2] + 'deg)') }
      if (_t[3]) { _str = _str.concat(' scale(' + _t[3] + ')') }
      if (_t[4]) { _str = _str.concat(' rotateY(' + _t[4] + 'deg)') }
      if (_t[5]) { _str = _str.concat(' rotateX(' + _t[5] + 'deg)') }
      this.node.style[_transform] = _str
    }
    return this
  }, 'update', function() {
    for (var i = 0, _args = util.arg(arguments), l = _args.length, p; i < l; i++ ) {
      if (_args[i] instanceof Array) {
        this.update.apply(this, _args[i]);
      } else {
        p = util.get(this, _args[i]);
        if (p) {
          p.update(this);
        }
      }
    }
    return this;
  });

  function createScroll(dir){
    var s = 'scroll'
      , sdir = s + dir //scrollLeft or scrollTop

    return {
      name:sdir,
      set:function(val) {
        var v = val.val
          , self = this
        if(v !== void 0) self.node[sdir] = v
        if(!self.__sT){
          self.__sT = true
          self.addEvent(s,function(){
            if(val._listeners !== void 0) val.val = self.node[sdir]
            else self[sdir].__lval = void 0
          })
        }

      },
      get:function(val){
        if(val.__lval === void 0) val.val = this.node[sdir]
        return val
      },
      render:function() {
        var self = this
          , val = self[sdir].__lval
        if(val){
          raf(function(){
            self.node[sdir] = val
          })
        }
      }
    }

  }

  base.extend({
    name: 'relative',
    type: false,
    get: function() {
      var s = this.position !== false ? this.position.val : (this.position = {
        css: true,
        val: css(this.css.val, 'position')
      })
      return s !== 'absolute'
    }
  },
  {
    type: false,
    name: 'rendered',
    get: function() {
      var ret = this._rendered || (this.node === document.body),
        parent;
      if (!ret) {
        parent = this.node.parentNode;
        while (!ret && parent) {
          if (parent.base && parent._rendered) {
            ret = true;
          }
          if (parent == document.body) {
            ret = true;
          }
          parent = parent.parentNode;
        }
        if (ret) {
          this._rendered = true;
        }
      }
      return ret;
    }
  },
  createScroll('Left'),
  createScroll('Top'),
  {
    position: function(val) {
      // console.log('?????',val.css.val)
      // if (!val.css) { //check when ignoring this becomes a problem
        this.node.style.position = val.val;
      // }
    },
    // scrollTop:function(val) {
    //   console.error(val.val)
    //   this.node.scrollTop = val.val
    // },
    rotate: function(val) {
      this.translate(val);
    },
    rotateY: function(val) {
      this.translate(val);
    },
    rotateX: function(val) {
      this.translate(val);
    },
    scale: function(val) {
      this.translate(val);
    },
    src: function(val) {
      var v = val.val;
      if (v && v[v.length - 1] !== '/') {
        this.node.src = v;
      }
    },
    attr:function(val) {
      var t = this
      val.each(function(i) {
        t.node.setAttribute(i,this.val)
      })
    },
    backgroundPos: function(val) {
      this.node.style.backgroundPosition = val.val
    },
    backgroundBatch: function(val) {


    },
    background: function(val) { //optional maybe in a seperate module
      var v = val.val
        , t = this
        , style = this.node.style
        , url
        , hashed
        , parentBatch
        , batch

      if(val.gone && val.gone.val) {
        val._skip = true
        style.backgroundImage = ''
      } else if (v && v[v.length - 1] !== '/') {
        url = 'url(' + v + ')'
        if(style.backgroundImage===url) return

        //Value
        if (val.size) style.backgroundSize = val.size.val

        if (val.load) {

          hashed = hash(v)
          parentBatch = this.checkParent('backgroundBatch')
          if(parentBatch) batch = parentBatch.backgroundBatch

          if(!_load[hashed]) {
            this._loaded = null
            //also remove setting

            if(batch) {
              window.cancelAnimationFrame(batch._raf)
              if(!batch.batch) batch.batch = []
              batch.batch.push(hash)
            }

            _load[hashed]=new Value(false)
            var img = document.createElement('img')
            img.onload = function() {

             if(batch) {
               batch.batch.splice(util.checkArray(batch.batch,hashed),1)
               if(batch.batch.length===0) {
                batch.batch = null
                batch._raf = raf(function() {
                  if(parentBatch._node) batch._val.call(parentBatch)
                })
               }
             }

              _load[hashed].val = true
              img.onload = null
              img = null
              _load[hashed].remove(false,false,false,false,false,true)
              _load[hashed] = true
            }
            img.src = v
          }

          if(_load[hashed]!==true) {
             this._loaded = null

            _load[hashed].addListener([function() {
              if(val.load && val.load.val!==true) val.load._val.call(this, t);
            },val._base], true)
          } else {

            this._loaded = true

            if(batch) {
              if((!batch.batch) || batch.batch.length===0) {
                batch.batch = null
                window.cancelAnimationFrame(batch._raf)
                batch._raf = raf(function() {
                   if(parentBatch._node) batch._val.call(parentBatch)
                })
              }
            }

            if(val.load.val!==true) val.load._val.call(this, t);

          }
        }

        style.backgroundImage = url

      }
    },
    padding: function(val) {
      this.node.style.padding = val.val + 'px';
    },
    y: _coordinate('top'),
    x: _coordinate('left'),
    display: function(val) {
      this.node.style.display = val.val;
    },
    w: function(val) {
      // console.log('w');
      var v = val.val
      this.node.style.width = (v > -1 ? (v | 0)  + 'px' : v ) || '100%' 
    },
    h: function(val) {
      // var v = val.val | 0 typo or bug?
      var v = val.val
      this.node.style.height = (v > -1 ? (v | 0)  + 'px' : v ) || '100%'
    },
    opacity: function(val) {
      var v = val.val;
      this.node.style.opacity = v > -1 ? v : 1;
    },
    html: function(val) {
      var v = val.val || ''
      if( v.replace )
      {
        //add some injection prevention as option? (no script etc)
        v = v.replace(/\t/g, '    ')
             .replace(/\r\n|\n|\r/g, '<br/>')
             .replace(/  /g, '&nbsp; ')
             .replace(/  /g, ' &nbsp;') // second pass
                                        // handles odd number of spaces, where we
                                        // end up with "&nbsp;" + " " + " "
        this.node.innerHTML = v
      }

    },
    href: function(val) {
      this.node.href = val.val;
    },
    text: function(val) {

      // console.log('SETTING TEXT'.green.inverse. val.val, val)

      var node = this.node
        , nodes = node.childNodes
        , v = val.val || ''

      if(v instanceof Object) v = ''

      if (/text/.test(node.type)) {
        node.value = v;
        return;
      }

      if (nodes) {
        for (var i = 0, l = nodes.length; i < l; i++) {
          if (nodes[i].nodeType === 3) {
            // console.log('BLABLA'.inverse,v)
            nodes[i].nodeValue = v;
            return;
          }
        }
      }
      node.appendChild(document.createTextNode(v));
    }
  });
});
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../../util/hash":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/hash.js","../../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../../animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","../../css":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/css.js","../../ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/process.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var util = require('../../../util')

exports.extend = util.extend(function(base) {
  var proto = base.Class.prototype
    , add = proto.add

  util.define
  ( proto
  , 'add'
  ,  function(val) {
       if( !val.process )
       {
          add.apply( this, arguments )
       } else
       {
          val.__tempAdd = util.arg( arguments )
          val.__tempAdd.unshift(this)
       }
     }
  )

  base.extend({
    process: function(val) {
      void(0)
      if(this.__tempAdd && !this.parent) {
        add.apply(this.__tempAdd[0], this.__tempAdd.slice(1))
        this.__tempAdd = null
      }
    }
  })

})

//process wordt mischien meer een operator?
//soort field eigenlijk
},{"../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/scrollbar.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var events = require('../../events')
  , cases = require('../../cases')
  , ua = require('../../ua')
  , global = false
  , NONE = 'none'
  , _ios = ua.platform==='ios'
  , _android = ua.platform==='android'
  , VISIBLE = 'visible'
  , extend = require('../../../util').extend
  , doc = events.document
  , timer
  , fn

if(cases.touch){

  function blur (e){
    if(!document.activeElement){
      doc.removeEvent(false,'blur')
    }else if(e.target.tagName!=='INPUT' && e.target.tagName!=='FORM'){
      document.activeElement.blur()
      doc.removeEvent(false,'blur')
    }
  }

  events.preventDown = 
  { val:
    { down:function(e,method) {
        if(document.activeElement) doc.addEvent('up',blur,'blur')
        else if(e.target.tagName!=='INPUT' && e.target.tagName!=='FORM' && !events._maybescroll) e.preventDefault()
      }
    }
  }

  events.scrollbar = 
  { val: 
    { down:function(e,method,val) {

        var scrollStart
          , t = this
          , scrollStr
          , xAxis = (val._val === 'x')
          , axis
          , otheraxis
          , move
          , d
          , bottomPrevent
          
        if(xAxis) {
          axis = 'x'
          otheraxis = 'y'
          scrollStr = 'scrollLeft'
          d = t.node.scrollWidth - t.node.offsetWidth
        }else{
          axis = 'y'
          otheraxis = 'x'
          scrollStr = 'scrollTop'
          d = t.node.scrollHeight - t.node.offsetHeight
        }

        scrollStart = t.node[scrollStr] //<======== less efficient but more predictable for compensation

        if(d > 0){
          events[axis] = true
          events._maybescroll = true
          if(!xAxis){
            if (!scrollStart){
              scrollStart = t.node[scrollStr] =  1
            }else if(scrollStart===d) {
              scrollStart = t.node[scrollStr] = d - 1
            }else if(scrollStart > d){
              bottomPrevent = true
            }
          }

          var y = e.y
            , x = e.x
            , moveid = scrollStr + axis
          
          doc.addEvent('move',function(e){
            var dx = Math.abs(x-e.x)
              , dY = y-e.y
              , dy = Math.abs(dY)

            if(xAxis){
              if(dy > dx){
                events[axis] = false
                if(!events[otheraxis]) e.preventDefault()
              }
            }else{
              if(dx > dy){
                events[axis] = false
                if(!events[otheraxis]) e.preventDefault()
              }
              if(bottomPrevent && dY > 0){
                e.preventDefault()
              }
            }
            void(0)
            move = true
            blur(e)
            doc.removeEvent(false,moveid)
          },moveid)

          doc.addEvent('up',function(e) {
            var ms = events._maybescroll, msl, arr

            if(!move){
              var scrll = t.node[scrollStr]
              move = !(scrll === scrollStart) || scrll < 0 || ( scrll > d && !bottomPrevent )
            }

            if(!move && !events[otheraxis] && !events.click.block && ms && ms.length){
              msl = ms.length
              while(msl--) if(!e.prevent){
                arr = ms[msl]
                arr[0].call(arr[1],e)
              }
            }

            if(!events[otheraxis] || move) events._maybescroll = false

            events[axis] = false
            doc.removeEvent(false,scrollStr)

            window.requestAnimationFrame(function(){
              document.body.scrollTop = 0
            })
          },scrollStr)
        }
      }
    }
  }

  fn = function (val) {
      
    var style = this.node.style

    if (val.val === 'x') {
      style.msTouchAction = 'pan-x'
      style.touchAction = 'pan-x'
      style.overflowY = 'hidden'
      // style.overflowX = 'scroll'
    }else if (val.val === 'y') {
      style.msTouchAction = 'pan-y'
      style.touchAction = 'pan-y'
      style.overflowX = 'hidden'
      // style.overflowY = 'scroll'
    }

    style.overflow = 'scroll'

    style.webkitOverflowScrolling = 'touch'
    style.msTouchAction = 'auto'
    style.touchAction = 'auto'

    this.events = { scrollbar:val.val }
    if(!global) {
      global = true
      doc.events = { preventDown:true }
    }
  }

}else{
  fn = function (val) {
    var style = this.node.style;
    style.overflow = 'auto';
    style.overflowY = val.val !== 'x' ? 'scroll' : 'hidden';
    style.overflowX = val.val !== 'y' ? 'scroll' : 'hidden';
  }
}

exports.extend = extend(function(base) {
  base.extend({ scrollbar:fn })
})  
},{"../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","../../events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js","../../ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/util.js":[function(require,module,exports){
var ua = require('../../ua')
  , _prefix = '-'+ua.prefix.toLowerCase()
  , _transform = _prefix + '-transform'

exports.getMatrix = function(node) {
  if(node.style[_transform]) {
    var arr = window.getComputedStyle(node, null)
      .getPropertyValue(_transform).replace('matrix(', '').split(',')
    return arr
  }
}

// exports.hasCalc = function() {
//   var dummy = document.createElement('div')
//     , props = [ _prefix+'-calc', 'calc' ]
//     , i = props.length
//   while(i-1) {
//     dummy.style.cssText = 'width:' + props[i-1] + '(1px);'
//     if (dummy.style.length) return props[i-1]
//     i--
//   }
// }
},{"../../ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/set.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

var util = require('../../util')
  , element = require('./')
  , object = require('../../object')

/**
 * flags
 * add keywords to set objects which are checked using a function in flags
 * simply add fields to the set module
 */
var flags = exports
  /**
   * _flag
   * function that calls flag functions on element.set.flags
   */
  , _flag = function(name, val, copy, top) {
      var f;
      for (var i in flags) {
        f = flags[i].call(this, name, val, copy, top);
        if (f) {
          return f;
        }
      }
    }

util.define(element,
  /**
   * set
   * adds children for non existing attributes
   * _original are original values changed by cases and events
   * instances - add or remove children from instances;
   */
  '_set', function(val, i, instances) {
    //this
    if (!_flag.call(this, i, val[i], instances, val)) {

      if ( !this.isProperty( i, val ) ) {

        if (val[i] instanceof element) {
          var before
          if (this[i]) {
            for(var c=this.node.childNodes,node$=0,len=c.length;node$<len;node$++) {
              if(c[node$]===this[i].node) {
                before = c[(node$+1)]
                break;
              }
            }
            this[i].remove && this[i].remove();
          }
          //replace element if its already there
          // console.error(add, instances, val[i])
          var add = instances ? new val[i].Class : val[i];
          add.name = i;
          this.add(add, before);
          if (instances) {
            this.eachInstance(function() {
              var a = new add.Class();
              a._name = i;
              this.add(a);
            });
          }
        } else {
          
          if( this[i] instanceof object ) 
          {
            //TODO: torough testing
            this[i].val = val[i]
          } 
          else if( val[i] instanceof object ) 
          {
            void(0)
            this[i] = val[i]
          } 
          else if( this[i] instanceof element ) 
          {
            if( val[i] ) {
              this[i].set(val[i], instances)
            } else if( val[i] === false ){
              if ( instances ) {
                this.eachInstance(function() {
                  if (this[i]) this[i].remove()
                })
              }
              this[i].remove()
              this[i] = null
            }
          } 
          else 
          {
            if(val[i] instanceof Object ) {
              var add = new element().set(val[i], instances)
              add.name = i;
              this.add(add)
              if (instances)
              {
                this.eachInstance( function() {
                  var a = new add.Class()
                  a._name = i
                  this.add(a)
                })
              }
            } else {
              void(0)
              this[i] = val[i]
            }

          }
        }
      } else {
        if(typeof this[i] === 'function') {
          if(val[i] instanceof Array) {
            this[i].apply(this,val[i])
          } else {
            this[i](val[i])
          }
        } else {
          this[i] = val[i]
        }
      }
      //dynamic changes to the _original set object pool
      //if (!copy && this._original) {
      //this._original[i] = val[i]; //check if stuff /w classes is nessecary;
      //}
    }
  },
  /**
   * convert
   * for each fields in val convert back to a setObject;
   */
  'convert', function(val) {
    var setObj = {},
      isObj;
    for (var i in val) {
      isObj = util.isObj(val[i])
      if (this[i] instanceof element) {
        setObj[i] = isObj ? this[i].convert(val[i]) : this[i]
      } else if (this[i] instanceof object) {
        setObj[i] = this[i].convert(isObj && val[i])
      } else if (this[i] === void 0 || (util.lookup.call(this, i) && this[i] === false)) {
        setObj[i] = false
      } else {
        setObj[i] = this[i]
      }
    }
    return setObj
  })
},{"../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/video/html5.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
//duration in a V.Value --> update if nessecary?
var ua = require('../../ua')
  , video = require('./')
  , postpone = require('../../../browser/events/util').postpone
  , _winPhone = ua.platform === 'windows' && ua.device === 'phone'
  , _ios = ua.platform === 'ios'
  , _android = ua.platform === 'android'
  , _canplay = 'canplay' 

function createListener () {
  var a = arguments
    , l = a.length
  return function(val) {
    for (var i = 0, t = this; i < l; this.video.addEventListener(a[i++]
      , function(e) { val._val.call(t,e) }));
  }
}

function _canplayListener () {
  if (!this._canplay && !_winPhone) { //later versions (if fixedin 9)
    this._canplay = true
    var t = this
    
    function canPlay() {
      if (t.time) {
        if (!t.time.val) this._firstT = true
          //fixes for phonegap! windowsmobile
        if (_android && ua.browser !== 'chrome') { 
          //and special browser!; check firefox; //identify more browsers that do not need this crap
          var tries = 0
          clearInterval( t._timeFixInterval )
          t._timeFixInterval = setInterval(function() {
                t.updateTime()
                if (tries === 3) {
                  t._canplay = null
                  clearInterval(t._timeFixInterval)
                }
                if (t.video.duration !== 1) { //android sets duration to 1 as default instead of 0
                  tries++
                  if (t.playing) t.video.play()
                }
              }, 200)
        } else {
          if (t.time.val) {
            if (_ios) {
              setTimeout(function() { t.updateTime() }, 0)
            } else {
              t.updateTime()
            }
          } else {
            t._forceTime = true 
          }
          t._canplay = null
        }
      }
      if(t.video) t.video.removeEventListener(_canplay, canPlay)
    }

    this._canPlay = canPlay
   
    if(this.video) this.video.addEventListener(_canplay, canPlay)
  }
}

function setTime (val) {
  if (this.video.readyState) {
    this.video.currentTime = val
    if (_ios) this._correctTime = val
  } else {
    _canplayListener.call(this)
  }
}


module.exports =  
{ progress: {
    set: function() {
      var t = this;
      if(t.video) t.video.addEventListener('end', (t._prEnd = function() {
        t.clearProgress()
      }))
    },
    remove: function() {
      if(this.video)
      {
        this.video.removeEventListener('canplay',this._canPlay)
        this.video.removeEventListener('end', this._prEnd) //maybe no play and pause!;
      }
    }
  }
, buffer: function(val) {
    if (this.video && this.video.buffered) {
      var l = this.video.buffered.length
        , piv = -1
        , t = this.video.currentTime || 0
        , ls
        , tt
        , i = 0
      
      for (; i < l; i++) {
        ls = this.video.buffered.start(i)
        if (ls > piv && ls < t) {
          piv = i
          tt = ls
        } else {
          break
        }
      }
      if (piv > -1) {
        piv = this.video.buffered.end(piv)
        return piv < t ? 0 : piv / this.duration.val
      } else {
        return 0
      }
    }
    return 0
  }
, play: function(val) {
    if (val) {
      this.video.play()
    } else {
      this.video.pause()
    }
  }
, time: 
  //tests for android , winphone, firefoxphone (seeking on winphone is not possible anyways)
  { set: _ios  || _android //ua.device === 'phone' || ua.device === 'tablet'
      ? postpone(setTime)
      : setTime
  , get: function(val) {
      var time = this.video && this.video.currentTime
      if (this._correctTime) {
        if (this._correctTime > time - 2 && this._correctTime < time + 2) { //|| this.cnt
          time = this._correctTime
          if (!this.cnt) {
            this.cnt = 3
          } else if (this._cnt < 2) {
            this._correctTime = false
            this._cnt = false
          } else {
            this._correctTime+=0.5 //should be interval of progress updates
            this._cnt--
          }
        } else {
          time = this._correctTime
        }
      }
      return time / this.duration.val || val.val
    }
  }
, duration: function(val) {
    if ( this.video && this.video.readyState ) {
      return this.video.duration
    } else {
      return val && val.val
    }
  }
, autoplay: function(val) {
    if( this.video ) this.video.autoplay = val.val
  }
, volume: function(val) {
    var volume = val.val
    if(this.video && !isNaN(volume)) this.video.volume = volume
  }

, "new": function() {
    // this.addEvent('down',function(e){ e.preventDefault() })
    _canplayListener.call(this)
    if (this.volume) this.volume.update(this)
  }
, events: {
    pause:function(val) {
      var t = this
      if(_ios && t.video) { 
       t.video.addEventListener('pause', function(e) {
         if(!t.ignoreevents) t.pause()     
       })
      }
    }
  , progress: video.progress
  , ready: createListener('loadedmetadata')
  , canplay: function(val) {
      var t = this
      if(t.video) t.video.addEventListener(_canplay, function(e) {
        if(t.video && t.video.readyState===4) {
          t._stalled = false
          val._val.call(t,e)
        }
      })
    }
  , stalled: function(val) {
      var t = this
        , listen = function(e) {
          var time = t.getTime()
          if(!(t.getBuffer(time)-time > 0.05)) {
            t._stalled = true
            val._val.call(t,e)
          }
        }
      if(t.video){
        t.video.addEventListener('stalled', listen )
        t.video.addEventListener('waiting', listen )
      }
    }
  , play: 
    { play: function() {
        if (this.events.play) this.events.play._val.call(this)
      }
    , set: false
    }
  , end: createListener('ended')
  }
, src: function(val) {
    if (this.video && ( this.video.src !== val || val || !val && this.video.src)) this.video.src = val.val
  }
}

if (!video.player) video.player = module.exports
},{"../../../browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js","../../ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/video/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/video/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var element = require('../').inject(require('../properties'))
  , events = require('../../events')
  , util = require('../../../util')
  , base = new element({
      node: 'video'
  })
  
module.exports = exports = base.Class
var video = exports
exports.base = base

base.setSetting(
{ name: '_videoSettings'
, new: function() {
    if (this.player.new) this.player.new.call(this)
  }
, remove:function() {
    if (this.player.remove) this.player.remove.call(this)
  }
, render:function() {
     if (this.player.render) this.player.render.call(this)
  }
})
//proxy adden --> should be an extension on src
base.node.setAttribute('webkit-playsinline', '')

//cloud shorten these 3 functions
function _vidEvents (val) {

  this._readyForEvents = true

//   console.log('\n\n\n\n\nn\n\n\nSET VIDEVENTS')

  var t = this
    , e = (this.player || video.player).events
  val.each(function(i) {
    if (e[i] && e[i].set !== false) (e[i].set || e[i]).call(t, this, i)
  })
  return e
}

function _removeVidEvents (val) {
  var t = this
    , e = (this.player || video.player).events

  val.each(function(i) {
    if (e[i] && e[i].remove) e[i].remove.call(t, this, i)
  })
}

function _playHook (param) {
  var val = this.events
  if (val) {
    var t = this
      , e = (this.player || video.player).events
    val.each(function(i) {
      if (e[i] && e[i].play) e[i].play.call(t, this, i, param)
    })
  }
}

function _progress(val) {

  // console.error('SET progress',this._progress)

  if (!this._progress) {

      // console.error('SET progress for REAL',this._progress)

    //maybe do this with requestAnimationFrame -- danger lies in incosistency with timing
    var params = val
      , interval = params.interval && params.interval.val || 500 
      , fn = params._val
      , t = this
      , pr = (this.player || video.player).progress

    if (pr && pr.set) pr.set.call(t)

    t._progress = setInterval(function() {

      // console.log('before progress call!',t.src.val)
      // if(t.playing&&!t.__paused) {
      //   // t.play()
      //   // no src!
      // }

      var p = Number(t.getTime())
        , b = t.getBuffer(p)
        , d = Number(t.duration.val)

      if(d===1) d=0 //android fix -- maybe remove

      if (p >= 1 && d) {
        void(0)
        t.pause()
        t.playing = false //should this be removed an go to end? 
        //call pause and set time in here?
        t.clearProgress()
      } else {

        if(t._stalled && d) { //just to make sure buffering always dissapaers    
          if(b>0.85 || (t.__lp && t.events.canplay && (p > t.__lp+(1/d)))) { //in seconds
            t._stalled = false
            t.events.canplay._val.call(t)
            t.__lp = null
          } else if( (!t.__lp) && p>-1) {
            t.__lp = p
          } 
        }

        if(!t.ignoreevents) fn.call(t, p, b)
      }
    }, interval)
  }
}

this._progress = _progress

exports.progress = 
{ play: function(i, p, pa) {
    if (pa) {
      _progress.call(this, this.events.progress)
    } else {
      this.clearProgress()
    }
  }
, set: function(val) {
    if (this.playing) _progress.call(this, val)
  }
, remove: function() {
    this.clearProgress()
  }
}

util.define(exports
, 'setEvents', function() {
    _vidEvents.call(this, this.events)
  }
, 'play', function(clear, ignore) {
    if (clear) delete this.ignoreevents
    if (!ignore && !this.ignoreevents && this.playing !== true) {
        this.playing = true
        _playHook.call(this, true)
    } else if(this.__paused && this.events.progress) {
      this.playing = true
      _progress.call(this,this.events.progress)
    }
    this.__paused = null
    ;(this.player || video.player).play.call(this, true)
  }
, 'pause', function(ignore) {
    if(ignore) this.ignoreevents = true

    if (!this.ignoreevents && this.playing !== false) {
      this.playing = false
      _playHook.call(this, false)
      if(this.events.pause) {
        this.events.pause._val.call(this)
      }
    } else {
      // alert('lets clear!')
      this.clearProgress()
      // _playHook.call(this, false)
    }

    this.__paused = true
    ;(this.player || video.player).play.call(this, false)
  }
, 'toggle', function(val) {
    if (this.playing) {
      this.pause()
    } else {
      this.play()
    }
  }
, 'updateTime', function() {
    this._firstT = false
    exports.setTime.call(this, this.time)
  }
, 'getTime', function() {
    return (this.rendered && this.player || video.player).time.get.call(this, this.time) || 0
  }
, 'getBuffer', function(val) {
    return (this.rendered && this.player || video.player).buffer.call(this, val || 0)
  }
, 'clearProgress', function() {
    if (this._progress) {
      // console.log('remove that progress')
      clearInterval(this._progress)
      this._progress = null
      var pr = (this.player || video.player).progress
      if (pr && pr.remove) pr.remove.call(this)
    }
  }
)

base.extend(
{ name: 'player'
, type: false
, set: function(val) {
    util.setstore.call(this)
    this.__.player = val
    if (val.element) this.node = val.element
    if (this._class) this._class.prototype._.player = val
  }
, get: function(val) {
    return util.getStore.call(this, 'player') || video.player || {}
  }
}
, 
{ name: 'duration'
, set: function(val) {}
, get: function(val) {
    val._overwrite = (this.player || video.player).duration.call(this, val)
    return val
  }
}
,
{
  name:'$play'
, set:function( val ) {
    //stamp info
    if( this.rendered ) //TODO avoid heavy check
    {
      if( val.val )
      {
        this.play()
      }
      else
      {
        this.pause()
      }
    }
  }
}
, 
{ name: 'time'
, set: (exports.setTime = function(val) {
    if (!this._ignore) {

      val._overwrite = null
    
      var v = val.val
        , i = false

      if (v !== void 0) {
        if (!this._firstT || this._forceTime === true) { 
          v = Math.abs(v)
          i = true;
          this._firstT = true
          this._forceTime = null
        }

        if (v >= 0 && this.duration) {
          if(this.__lp) this.__lp = null
          ;(this.player || video.player).time.set.call(this, v * this.duration.val)
          if(this.events.seeking && !i)  this.events.seeking._val.call(this,v)
        }
      }
    }
  })
}
, 
{ autoplay: function(val) {
    (this.player || video.player).autoplay.call(this, val)
  }
, volume: function(val) {
    (this.player || video.player).volume.call(this, val)
  }
, src: function(val) {
    if(val.val!==this.___Src) {
      this.___Src = val.val
      if(this.events.src)  this.events.src._val.call(this,val)
      ;(this.player || video.player).src.call(this, val)
    }
  }
}
, 
{ name: 'events'
, "new": function() {
    //deze functie kunnen insellen

//   console.log('\n\n\n\n\nn\n\n\nSET xxcccccccxxx', this.player)
    if(  (this.player && this.player.setEvents !== false)) {
//       console.log('XXXXXXXXXXXXXXXXX',this.player.setEvents)
      _vidEvents.call(this, this.events)
    }
  }
, remove: function() {
    if(this.rafId)
    { 
      window.cancelAnimationFrame(this.rafId)
      this.rafId = null
    }
    _removeVidEvents.call(this, this.events)
  }
, set: function(val) {
//   console.log('EVENTS!')
    
    var a = util.arg(arguments)
    
      a[5] = this._readyForEvents 
           ? _vidEvents.call(this, val) 
           : (this.player || video.player).events 

      if(!a[5].seeking) a[5].seeking = {set:false}
      if(!a[5].src) a[5].src = {set:false}
    

    events._set.apply(this, a)
  }
})

},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../events":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js","../properties":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/video/util.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
exports.time = function(time, decimals) {
  var hrs = ~~ (time / 3600),
    mins = ~~ ((time % 3600) / 60),
    secs = decimals ? (time % 60).toFixed(decimals) : ~~(time % 60);
  ret = "";
  if (hrs > 0) ret += "" + hrs + ":" + (mins < 10 ? "0" : "");
  ret += "" + mins + ":" + (secs < 10 ? "0" : "");
  ret += "" + secs;
  return ret || 0;
};
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/advanced.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Youri Daamen, youri@vigour.io
 */
var events = require('./')
  , operators = require('../../value/operators')
  , doc = events.document

module.exports = events

operators._e = function(val, operator) {
  return val + operator
}

operators._esub = function(val, operator) {
  return val - operator
}

operators._e.order = 3
  
function chooseMove (val, method) {
  return val.move && val.move._val 
    || !method.__t && method !== true && method 
    || method._val;
}

function drag (e, method, val) {
  var t = val.bind ? val.bind._val : this
    , move = chooseMove(val, method)
    , id = 'drag'
  e.preventDefault()
  if (move) doc.addEvent('move', function(e) {
    move.call(t, e, val)
  }, id)

  if (val.down) val.down._val.call(t, e, val)
  
  doc.addEvent('up', function(e) {
    if (val.up) val.up._val.call(t, e, val)
    doc.removeEvent(false, id)
  }, id)
}

function active (e, method, val) {
  var self = this
    , id = 'active'
    , timer = setTimeout(function(){
        self.css = {addClass:val._val}
        timer = null
      },50)

  if(exports._deactivate) exports._deactivate()

  exports._deactivate = function(){
    if(timer) clearTimeout(timer)
    doc.removeEvent(false,id)
    exports._deactivate = null
    window.requestAnimationFrame(function(){
      if(!self) return
      if(!self._stayActive) self.css = {removeClass:val._val}
      else self.css = {addClass:val._val}
    })
  }

  doc.addEvent('move',exports._deactivate,id)
  doc.addEvent('up',exports._deactivate,id)
}

function shallowRaw (vobj) {
  var obj = {}
    , keys = vobj.keys
    , key
    , i = keys.length - 1
  for (; i >= 0; i--) {
    key = keys[i]
    obj[key] = vobj[key]
  }
  return obj
}

function initGrab (t, e, val, name) {
  if (!t[name] || !t[name]._e) t[name] = { _e: 0 }
  if (val[name]._val !== true) t[name].set('_e', shallowRaw(val[name]))
  return e[name] - (t[name]._e.val)
}

function grab (e, method, val, nested) {
  var t = val.bind && !nested ? val.bind.val : this
    , id = ( val.y 
      ? 'y' 
      : val.x 
        ? 'x' 
        : 'xy') 
        + 'Grab' 
        + (nested || '')
  if (t) {
    if (t._node) {
      var move = chooseMove(val, method)
        , startX = e.x
        , startY = e.y
        , ready
        , cX
        , cY
        , oldX
        , oldY
        , newX = startX
        , newY = startY
        , pass
        , upFn = function(e) {
            t.x._p = false
            t.y._p = false
            if (val.up && pass) {
              val.up._val.call(t, e, {
                x: newX - startX,
                y: newY - startY
              },
              { x: newX - oldX
              , y: newY - oldY
              })
            }
            events.click.block = false
            doc.removeEvent(false, id)
          }
      if (!val.x && !val.y){ //this needs revision
        val.x = {_val: true}
        val.y = {_val: true}
      }
      if (val.down) val.down._val.call(t, e, val);
      doc.addEvent('move', function(e) {
        oldX = newX
        oldY = newY
        newX = e.x
        newY = e.y

        events.click.block = true

        if (!ready) {
          pass = val.pass ? val.pass._val.call(t, e, {
            x: newX - startX,
            y: newY - startY
          }) : true
          if(!pass) {
            upFn(e)
            move = false
            doc.removeEvent(false, id)
          } else {
            e.preventDefault()
            if (val.x) {
              cX = initGrab(t, e, val, 'x')
              t.x._p = 1
            }
            if (val.y) {
              cY = initGrab(t, e, val, 'y')
              t.y._p = 1
            }
            if (val.start) val.start._val.call(t, e, val)
            ready = true
          }
        }else{
          e.preventDefault() //for android
          if (cX) t.x = { _e: newX - cX }
          if (cY) t.y = { _e: newY - cY }
          if (move) move.call(t, e, {
              x: newX - startX,
              y: newY - startY
            },val) //check for speed
        }
      }, id)
      doc.addEvent('up', upFn, id)
    } else {
      for (var i = t.length - 1; i >= 0; i--) {
        grab.call(t[i], e, method, val, i + 1)
      }
    }
  }
}
//add the events
events.drag = { val: { down: drag } }
events.grab = { val: { down: grab } }
events.active = { val: { down: active } }
},{"../../value/operators":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/operators.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/basic.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var events = module.exports = require('./')
  , cases = require('../cases')
  , util = require('../../util')
  , ua = require('../ua')

cases.touch =
( ( 'ontouchstart' in window )
  || window.DocumentTouch
  && document instanceof DocumentTouch
)
|| navigator.msMaxTouchPoints
|| false

function _basic(e, method, val) {
  e.x = e.pageX
  e.y = e.pageY
  method.call(this, e, val)
}

util.define
( events
, '_out'
, { value: [] }
)
//clickout cannot be used to create complex events! it's too custom 
//tried to fix

function keyBoardEvent( name, domEvent, wrapper ) {

  var _name = '_'+name

  util.define( events, _name, { value:[] } )

  var event = 
  {
    create: function( field, from ) {
      var exec = function( e ) {

        //dit gaat heel snel fout hiero
        // console.log('nu ff ook de wrapper callen!', field, from, events[from])
         if( this.rendered ) {

          if( wrapper ) {
            wrapper.call(this, e, this.events[from]._val )
            //this.events[from]._val.call(this, e)
          }
          else if( events[from] && events[from].val) {
            var method = events[from].val
            for(var i in events[from]) {
              if( cases[i]) {
                method = events[from][i]
              }
            }
            method = method[field]
            if( method ) {
              method.call(this, e, this.events[from]._val )
            } 
          } else if( this.events[from] ) {
            this.events[from]._val.call(this, e)
          }

        }
      }
      events.document.addEvent( domEvent, function(e) {

        for ( var arr = events[ _name ], i = arr.length - 1; i >= 0; i-- ) {
          exec.call( arr[i], e )
          
          if( arr[i] ) {
            // console.log( 'do it now!', _name, arr, arr[i], e)
            arr[i].eachInstance( exec, 'events', e )
          }

        }
      }, name )
    },
    add: function( id, field ) {

      field = _name

      this.setSetting(
      { name: field
      , remove: events[ name ].remove
      })

      if ( !util.checkArray( events[ _name ], this ) ) 
      {
        events[ _name ].push(this)
      }

    },
    remove: function() {
      // console.log('WRONGWRONGWRONG!!!!!', _name, events[_name], events)
      //selected moet mischein alleen vanuit Value $focused -- niet op elk item op key up....
      //doe dit smart -- for now zou auto remove kunnen doen als iets er niet meer is?
      var index = util.checkArray( events[ _name ], this, true ) 
      if( ~index ) {

        var noRemove

        // console.log('this:', this )
        // console.log('from base:', this._from.base)
        // console.log('event name:', name)
        // console.log('events:', this.events )
        if(this.events && this._from.base.events) { 
          noRemove = this.events[name] === this._from.base.events[name]
          // console.log('events equals class:', noRemove )
        } else {
          // console.error('no nice events')
        }
        
        if(!noRemove) {
          events[ _name ].splice( index, 1 )
        }
        else {
          void(0)
        }
        // debugger
        // this.removeSetting( name ) --- redo this later
      }
    }
  }

  events[ name ] = event

}

events.$makeKeyBoardEvent = keyBoardEvent

keyBoardEvent( 'keyboard', 'keyup' )
keyBoardEvent( 'keyboardDown', 'keydown' )
keyBoardEvent( 'keyboardDown$down', 'keydown' )
keyBoardEvent( 'keyboardDown$click', 'keydown' )

//-----dit ff echt goed fixen!

function basicDown(e, method, val) {
  if( e.which!==1 || events.down.block ) return
   _basic.call(this,e, method, val)
}

events.down =
{ touch:
  { touchstart: function(e, method, val) {
      if(events.down.block) return
      var targetTouches = e.targetTouches[0] || {}
      e.x = targetTouches.pageX
      e.y = targetTouches.pageY
      method.call(this, e, val)
    }
  }
, val: { mousedown: basicDown }
// , tv: 
//   {  // mousedown: basicDown //combineren binnen kort moet voor LG
//      keyboardDown$down: function( e, method, val ) {
//       //this._$focused && 
//       if( this._$focused && util.checkArray( [ 13, 29443 ] , e.keyCode ) !== false ) 
//       {
//         method.call(this, e, val)
//       }

//     }
//   }
}

//right-down
events.rdown =
{ touch:
  { touchstart: function () {
      //2 fingers?
    }
  }
, val:
  { mousedown: function (e, method, val) {
      if(e.which===3) {
        document.oncontextmenu = function() { return false }
        e.preventDefault()
        // e.rdown = true
        _basic.call(this,e,method,val)
        setTimeout(function() { document.oncontextmenu = false }, 0)
      }
    }
  }
}

//move
events.move = {
  touch:
  { touchmove: function (e, method, val) {
      var targetTouches = e.targetTouches[0]
      e.x = targetTouches.pageX
      e.y = targetTouches.pageY
      method.call(this, e, val)
      // document.write(e.targetTouches[0].pageX);
    }
  }
  , val: {
    mousemove: _basic
  }
}

//up
events.up = {
  //keyUp
  touch: {
    touchend: function(e, method, val) {
      var ct = e.changedTouches
      e.x = ct[0].pageX
      e.y = ct[0].pageY
      method.call(this, e, val)
    }
  }
, val: {
    mouseup: _basic
  }
}

//click
events.click = {
  // tv: {
  //   keyboardDown$click: function(e, method, val ) {

  //     if( this._$focused && util.checkArray( [ 13, 29443 ] , e.keyCode ) !== false ) {
  //       method.call(this, e, val)
  //     }

  //   }
  // },
  val: {
    down: function(e, method, val) {

      // console.log('CLICK IT!')

      var t = this
        , name = 'click'
      if(!events.click.block){
        t.addEvent('up', function(e) {
          t.removeEvent('up', name)
          var ms = events._maybescroll
          if(ms){
            if(ms.length) events._maybescroll.unshift([method,t])
            else events._maybescroll = [[method,t]]
          }else if(!events.click.block) method.call(t, e, val)
        }, name);
        setTimeout(function() {
          t.removeEvent('up', name)
        }, 300)
      }
    }
  }
}

events.rclick = {
  val: {
    rdown:events.click.val.down
  }
}

var _outRemove = function() {
    var index = util.checkArray(events._out, this, true)
    if (~index) {
      events._out.splice(index, 1)
      this.removeSetting('_out', _outSetting)

      // debugger

    }
  }
, _outSetting = {
  name: '_out',
  render: function() {
    if (!util.checkArray(events._out, this)) {
      events._out.push(this)
    }
  },
  remove: _outRemove
}

events.out = {
  create: function() {
    this.m = true;
    events.document.addEvent('up', function(e) {

      var base = e.target,
        exec = function() {
          var p = base
            , t
          while (p && !t) {
            if (p.base && this === p.base) {
              t = true;
            } else {
              p = p.parentNode;
            }
          }
          if (!t && this.rendered) this.events.out._val.call(this, e)
        }
      for (var arr = events._out, i = arr.length - 1; i >= 0; i--) {
        exec.call(arr[i])
        if (arr[i]) arr[i].eachInstance(exec, 'events')
      }
    },'out')
  },
  add: function() {
    var t = this
     // events._out.push(this)
    this.setSetting(_outSetting)
  },
  remove:_outRemove
};
},{"../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","../ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var element = require('../element')
  , cases = require('../cases')
  , util = require('../../util')
  , FieldStore = function () {}

util.define(FieldStore, '_uid', { value: 0 })

exports._r = {} //list of basic (raw) events e.g. 'mousedown'

//remove events if there are no children that use them anymore

exports.document = new element({ node: document })

exports.document.exec = function( event ) {
  if( this.__e[event] )
  {
    var args = util.arg( arguments, 1 )
    for( var i in this.__e[event] )
    {
      this.__e[event][i].apply( this, args )
    }
  }
}

function _create( i, from ) {
  if( exports[i] )
  {
    // console.log('complex', i, from)
    _createComplex( i, from )
  }
  else
  {
    // console.log('_basic', i)

    exports[i] = { _basic: true }
    _createBasic( i )
  }
}

function _createWhile (i, m) {
  return function(e) {
    var parent = e.target
      , base, events
    while (parent) {
      base = parent.base
      if (base) {
        events = base.events
        if (events[i]) {
          if (m) {
            exports[i]._m.call(base, e, events[i])
          } else if (events[i]._val) {
            events[i]._val.call(base, e)
          }
          if (e.prevent) return
        }
        events = base.__e
        if (events && events[i]) {

          for (var j in events[i]) {
            if(j!=='_uid') {
              if (m) {
                exports[i]._m.call(base, e, events[i][j])
              } else {
                // console.log('?what', i, j, base, base._node)
                events[i][j].call(base, e)
              }
              if (e.prevent) return
            }
          }
        }
      }
      parent = parent.parentNode
    }
  }
}

function _createBasic (i, r) {
  var type = i || r

  // console.log('createBasic', type)

  exports._r[i] = true
  if(type === 'scroll') {
    document.addEventListener(type, function(e){
      var base = e.target.base
        , events
      if(base) {
        events = base.events
        if(events && events[i]) events[i]._val.call(base, e)
        events = base.__e
        if (events && events[i]) {
          for (var j in events[i]) {
            if(j!=='_uid') events[i][j].call(base, e)
          }
        }
      }
    },true)
  }else document.addEventListener(type, (exports[i].m = _createWhile(i)))
}

function _setComplex ( i, m, r, from ) {
  var met = exports[i]._m = function (e, val) {
    if (e.prevent) return
    m.call(this, e, (val._val || val.val || val), val)
  }
  exports[i].m = _createWhile(i, true)
  exports._r[i] = true
  if (exports[r]) {
    if (!exports[r].m) {
      _create(r, from )
    }
    if (!exports[r]._basic) {
      exports[i].__e = exports[r].__e
      exports[i]._m = function (e, m) {
        exports[r]._m.call(this, e, function(e) {
          met.call(this, e, m)
        })
      }
    } else {
      exports[i].__e = r
    }
  }
  document.addEventListener((exports[r] && exports[r].__e) || r, exports[i].m)
}

var addWrapper = function( add, field, orig ) {
  return function() {
    // console.log( 'ADD WRAP!', field, orig , arguments )
    return add.apply(this, arguments)
  }
}

function _createComplex( field, from ) {

  // console.log('_createComplex' ,field, from )

  if( exports[field].create ) exports[field].create( field, from)
  var m
    , i
    , j
  for ( i in exports[field] ) {
    if (cases[i] === true) m = exports[field][i]
  }
  if ( m || ( m = exports[field].val ) ) {
    for (j in m) //only one
    ;exports[field].__e = j

    if (m[j] === true) 
    {
      exports[field]._basic = true
      _createBasic(field, j)
    } 
    else 
    {
      //basic en non basic ijn niet te combineren -- combineren nog kapot
      // console.log('set complex field', field, m, j,  exports[j]) 
      //!!!tripple check dit!!!
       for( j in m ) 
       { 
        if( exports[j] && exports[j].add 
         && exports[field] && !exports[field].add
        ) 
        {
          exports[field].add = addWrapper( exports[j].add, field, j )
        }
        _setComplex(field, m[j], j, from )
      }
      //!!!danger loop!!!
    }

  }
}

exports._set = function (val, stamp, from, remove, cval, blacklist) {
  var t = this
  val.each(function (i) {
    if (!blacklist || !blacklist[i]) {
      if (this._val === false) {
        if (exports[i]) {
          if (exports[i].remove) exports[i].remove.call(t)
          t.eachInstance(exports[i].remove, val._prop.name)
          this.remove()
        }
      } else {
        
        // console.log('_cre', i, exports[i])

        if (!(exports[i] && exports[i].m)) {
          // console.log('---pass', i)
          _create(i, i)
        }
        //add wrapper?


        // console.log('_set',i, exports[i].add, exports[i])

        if (exports[i].add) exports[i].add.call( t, false, i )
      }
    }
  })
}

element.base.extend(
{ name: 'events'
, set: exports._set
})

util.define(element
, 'addEvent', function(field, fn, id) {
          // console.log('XXXX',field)

    if (!(exports[field] && exports[field].m)) _create(field)
    var events = this.__e || (this.__e = {})
      , f = events[field] || (events[field] = new FieldStore())

    if (!id) {
      f._uid++
      id = f._uid
    }
    f[id] = fn

    // console.log('addEvent!!!', field)

    if (exports[field].add) exports[field].add.call(this, id, field)
    return this
  }
, 'removeEvent', function (field, id, fn) {
    var events = this.__e
      , remove
    if (events) {
      if (field && events[field]) {
        remove = (exports[field] && exports[field].remove)
        if (id) {
          if (events[field][id] && (!fn || events[field][id] === fn)) {
            if (remove) exports[field].remove.call(this, id)
            delete events[field][id]
          }
        } 
        else {
          for (id in events[field]) {
            if (!fn || events[field][id] === fn) {
              if (remove) exports[field].remove.call(this, id)
              delete events[field][id]
            }
          }
        }
        if (util.empty(events[field])) delete events[field]
      } 
      else if (!field) {
        for (field in events) {
          this.removeEvent(field, id, fn)
        }
      }
    }
    if (util.empty(events)) delete this.__e
    return this
  })

require('./basic')

},{"../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","../element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js","./basic":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/basic.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/offset.js":[function(require,module,exports){
var matrix = require('../element/properties/util').getMatrix
  , vigour = require('../../')
  , css = require('../css')

exports.left = exports.x = function ( object, arr ) {
  return offset(object,arr,'left','offsetLeft', 4)
}

exports.top = exports.y = function ( object, arr ) {
  return offset(object,arr,'top','offsetTop', 5)
} 

function offset ( object, arr, prop, propL, matrixIndex ) {
  if(!object) return 0
  var start = false
  if(!arr) {
    arr = []
    start = true
  }
  
  if(vigour.Element && object instanceof vigour.Element) object = object.node

  var amount = object[propL]
    , temp = 0
  if(typeof(amount) !== 'number') amount = 0
  if(object.parentNode) exports[prop](object.parentNode, arr)
    if( ( (object.style && object.style.position)
      ||object.__preCss
      ||object.className 
        && (object.__preCss = css(object.className, 'position')||true)) 
      !== 'absolute' ) {
        arr.push(['rel', amount])
    } else {
      var matrixArray = matrix(object)
      arr.push(['abs', matrixArray 
        ? parseInt(matrixArray[matrixIndex],10)+amount //normal amount as well
        : amount ])
    }
  
  if(start) {
    var lastrel
      , abs = 0
      , i
    for(i in arr) {
      if(arr[i][0] == 'abs') {
        abs += arr[i][1]
      } else {
        lastrel = arr[i][1]
      }
    }
    amount = arr[arr.length - 1][0] === 'rel' ? abs+lastrel : abs
  }
  return amount || 0
}

  



},{"../../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../css":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/css.js","../element/properties/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/properties/util.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js":[function(require,module,exports){
var raf = require('../animation/raf')
  , util = require('../../util')

exports.throttle = function(fn, frames, bind) {
  frames || (frames = 20) //~0.4sec
  var timer
    , arg
    , nobind = !bind
  return function() {
    arg = arguments
    if(nobind) bind = this
    if(!timer) {
      timer = frames
      raf(function repeat() {
        timer--
        if(!timer) {
          fn.apply(bind,arg) 
        } else {
          raf(repeat)
        }
      })
    }
  }
}

//TODO: postpone based on frames
exports.postpone = function(fn, time, bind) {
  time || (time = 200) //no raf!
  var timer
    , arg
    , nobind = !bind
  return function() {
    arg = arguments
    if(nobind) bind = this
    if(timer) clearTimeout(timer)
    timer = setTimeout(function() {
      fn.apply(bind,arg)
    },time)
    return timer
  }
}

//TODO: test for leaks...
exports.interval = function(fn, frames, bind) {
  frames || (frames = 30) //~0.5sec
  var timer
    , clear
    , arg = util.arg(arguments,3)
  if(!timer) {
    timer = frames
    raf(function repeat() {
      timer--
      if(!timer) {
        timer = frames
        fn.apply(bind,arg)
      } 
      if(!clear) raf(repeat)
    })
  }
  return function() {
    clear=true
  }
}

},{"../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/ajax.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var _a = 'addEventListener'
  , util = require('../../util')
  , ua = require('../ua')
  , cnt = 0

/**
 * xhr wrapper, adds some nice extras such as multiple requests to a single api call
 * xhr wrapper will include jsonp in a later stage
 * @method extend
 * @param   {String|Array} params.url         Specifiy the url, array fetches multiple url's
 * @param   {String}   [params.api]           Repeat this string for the url that needs to be called
 * @param   {Function} [params.complete]      Specify a callback when an array is passed to url complete is called when all items are complete
 * @param   {Function} [params.error]         On error callback
 * @param   {Function} [params.change]        Function called on xhr.onreadystatechange
 * @param   {Boolean}  [params.async]         If set to false will call an syncronous request (not recommended!)
 * @param   {String}   [params.user]          User parameter
 * @param   {String}   [params.pass]          Password parameter
 * @param   {Boolean}  [params.parse]         If set to false will not try to parse response to JSON
 * @param   {String}   [params.type|.method]  POST or GET, default is get;
 * @param   {String}   [params.contentType]   request content type default id "application/x-www-form-urlencoded"
 * @param   {String}   [params.mime]          defines mime type
 * @param   {Function} [params.progress]      Progress callback
 * @param   {Boolean|String} [params.jsonp]   Use jsonp , if passed as a string determines script+?callback=
 * @param   {Object}   [params.header]        Sets request headers
 * @param   {*}        [params.data]          Pass data to the request, defaults to ? on get;
 */

var iframes
  , ajax = module.exports = function(params, urlset) {
    var _url = params.url;
    if (!urlset && _url instanceof Array) {
      params.m = function() {
        if ((++params.r) === params.n) {
          for (var i = 0, arr = [], l = _url.length; i < l; arr.push(params.d[_url[i++]]));
          params.complete(arr);
        }
      };
      params.r = 0;
      params.d = {};
      for (var i = 0, l = params.n = _url.length; i < l; module.exports(params, _url[i++]));
    } else {
      var data = params.data
        , encode = params.encode
        , url = (params.api || '') + (urlset || _url)
        , headers = params.headers
        , success = params.complete
        , progress = params.progress
        , error = params.error
        , change = params.change
        , mime = params.mime
        , user = params.user
        , pass = params.pass
        , jsonp = params.jsonp
        , parse = params.parse
        , iframe = params.iframe
        , reqdata = null
        , fallback = params.fallback
        , fallbackIndex = params._fallbackIndex
        , method = params.type || params.method || 'GET'
        , contentType = params.contentType || encode === 'json'
          ? 'application/json'
          : 'application/x-www-form-urlencoded'
        , async = (params.async === false) ? false : true
        
      if( jsonp ) 
      {
        ajax.jsonp( url, success, error )  
        //function( url, success, error, context, cbName ) {
      } 
      else 
      {
        // ------------------------------------------------------------ DATA
        var xhr = new XMLHttpRequest()
        if(iframe) {
          cnt++
          var elem
            , msg = {}
            , reqid = cnt

          for(var field in params) {
            if(field!=='error'&&field!=='iframe'&&field!=='complete') {

              msg[field]=params[field]
            }
          }
          var setmsg = function() {
            var elem
            iframes[iframe].onload = null
            var msgcomplete = function(e) {
              // console.error('IFRAME REQ MSG COMPLETE',e.data)
              if(e.data) {
                var d
                try {
                  d = JSON.parse(e.data)
                } catch(e) {
                  if(error) error(e)
                  return
                }
                if(d.id!==reqid) return
                if(d.err) {
                  if(error) {
                    error(d.err)
                  }
                  return
                }
                var resp = d.msg
                if(success) {
                  if (parse !== false) {
                    try {
                      resp = JSON.parse(resp)
                    } catch (e) {}
                  }
                  success(resp,e)
                }
                removeEventListener('message', msgcomplete)
              }
            }
            if(window.addEventListener) {
              addEventListener("message", msgcomplete, false)
              elem = iframes[iframe].contentWindow
              msg = JSON.stringify({
                msg:msg,
                id:reqid
              })
              elem.postMessage(msg, '*')
            }
          }

          if(!iframes) iframes = {}
          if(!iframes[iframe]) {
            elem = iframes[iframe] = document.createElement('iframe')
            elem.src = iframe
            elem.cListeners = [
              setmsg
            ]
            elem.onload = function() {
              for(var h in elem.cListeners) {
                elem.cListeners[h]()
              }
              elem.cListeners = null
            }
            elem.style.visibility='hidden'
            elem.style.width = '0px'
            elem.style.height = '0px'
            elem.style.position = 'absolute'
            document.body.appendChild(elem)
          } else if(iframes[iframe].cListeners) {
            iframes[iframe].cListeners.push(setmsg)
            //elem.cListeners[i]
          } else {
            setmsg()
          }
          return;
        }

        if (data) {

          if (method === 'GET') {
            url += '?' + enCode(data, 'GET', encode)
          } else {
            reqdata = enCode(data, 'POST', encode)
  //           console.log( reqdata )
          }
        }

        // ------------------------------------------------------------ METHOD, URL, ASYNC, USER & PASS
        xhr.open(method, url, async, user, pass)
        // ------------------------------------------------------------ HEADERS
        xhr.setRequestHeader('Content-Type', contentType)
        if (headers) {
          for (var f in headers) {
            xhr.setRequestHeader(f, headers[f]);
          }
        }

        // ------------------------------------------------------------ EVENTS
        if (success) {
          xhr[_a]("load", function(e) {
            var resp = (e.target || e.srcElement).response;
            if (parse !== false) {
              try {
                resp = JSON.parse(resp)
              } catch (e) {}
            }
            if (params.m) {
              params.d[urlset] = resp
              params.m()
            } else {
              success(resp, e)
            }
          }, false)
        }
        if (error) {
          if(!fallbackIndex) params._fallbackIndex = 0
          if(fallback && fallbackIndex!==fallback.length) {
            params._fallbackIndex++
            params = util.merge(params,fallbackIndex)
            ajax(params, urlset)
          } else {
            xhr[_a]("error", error, false)
          }
        }
        if (progress) {
          xhr[_a]("progress", progress, false)
        }
        if (change) {
          xhr.onreadystatechange = change
        }
        // ------------------------------------------------------------ MIME
        if (mime) {
          xhr.overrideMimeType(mime)
        }
        // ------------------------------------------------------------ SEND

        xhr.send(reqdata)
      }
    }
  }

var jsonpStamp = 0

ajax.jsonp = function( url, success, error, context, cbName ) {

  if( !cbName || cbName === true ) cbName = 'callback'

  var name = '_jsonp_' + jsonpStamp++
    , script = document.createElement('script')
  
  if (url.match(/\?/)) 
  { 
    url += '&'+cbName+'='+name
  }
  else 
  {
    url += '?'+cbName+'='+name
  }
  
  script.type = 'text/javascript'
  script.src = url
  
  if(error) {
    script.onerror = function( e ) {
      error( e )
    }
  }

  window[name] = function(data){
    success.call(( context || window ), data)
    document.getElementsByTagName('head')[0].removeChild(script)
    script = null
    delete window[name]
  }
  
  document.getElementsByTagName('head')[0].appendChild(script)

}

var enCode = ajax.encode = function(data, method, encode) {
  var result = ''

  if(encode === 'json'){
    result = JSON.stringify(data)
  } else if(data instanceof Object) {
    if (!util.isNode && (window.FormData && data instanceof FormData) && method !== 'GET') {
      result = data
    } else if (data instanceof Array) {
      result = JSON.stringify(data[f])
      if(encode === 'uri') result = encodeURIComponent(result)
    } else {
      for (var f in data) {
        var val = data[f]
        if(val instanceof Object) val = JSON.stringify(val)
        if(encode === 'uri'){
          f = encodeURIComponent(f)
          val = encodeURIComponent(val)
        }
        result += f + '=' + val + '&'
      }
      result = result.slice(0, -1)

    }
  } else {
    result = (encode === 'uri') ? encodeURIComponent(data) : data
  }
  // console.log('encoded:', result)
  return result
}
},{"../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/authenticate.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Marcus Besjes, marcus@vigour.io
 */
var util = require('../../../util')

exports.extend = util.extend(extend)

function extend(Cloud) {
  util.define( Cloud
  , 'authenticate', function authenticate(req, cb, re){
      window.authrequest = req
      var cloud = this

      if(typeof req === 'function')
        req = req()

      if(!req)
        return cloud.socket.removeListener('connect', reAuth)

      cloud.emit('authenticate', req, function(res){
        if(res.hop)
          cloud.hop(res.hop)
        else if(cb)
          cb(res)
      })
     
      if(!re){
        cloud.on('connect', reAuth)
      }

      function reAuth(){
        void(0)
        if(cloud._status > 2){
          void(0)
          cloud.authenticate(req, cb, true)
        }
      }
      cloud._reAuth = reAuth
    }
  , 'logout', function logout(userid){
      var cloud = this

      cloud.emit('logout', userid)

      if(
        cloud.data.users[userid] && 
         cloud.data.users[userid].activeClient 
         && cloud.data.users[userid].activeClient.from._name === cloud.clientid
       ) 
       {
         cloud.data.users[userid].activeClient.remove()
       }

      
      var stamp = cloud.stamp

      if(userid){
        if(cloud.data.users[userid])

        if( 
          cloud.data.users[userid].activeClient 
          && cloud.data.users[userid].activeClient.from._name === cloud.clientid) 
        {
          cloud.data.users[userid].activeClient.from = cloud.data.users[userid].activeClient
        }

        cloud.data.users[userid].remove(void 0, void 0, void 0, void 0, stamp)
        // else
        //   console.error('that user does not exist')
      } else{
        cloud.data.users.each(function(userid){
          this.remove(void 0, void 0, void 0, void 0, stamp)
        })
      }

      cloud.socket.removeListener('connect', cloud._reAuth)
      cloud._reAuth = null

    }
  )
}
},{"../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/data.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Marcus Besjes, marcus@vigour.io
 */
var util = require( '../../../util' )
  , NetworkData = require( '../data' )
    .inject( require( '../../../object/hashpath' ) )
    //TODO: add localstorage --> , !util.isNode && require('../../../object/localstorage')
  , networkDataElement = require( '../data/element' )
  , Data = require( '../../../data' )
  , preventUpdate
  , vObject = require( '../../../object' )
  , timestamp = require( 'monotonic-timestamp' )
  , CloudData = NetworkData.new
    ( false //put some settings!
    , function CloudData( val, hook, parent, cloud ) {
        var _this = this

        if( cloud )
        {
          _this.cloud = cloud
          _this.addListener(cdListener)

          if(!util.isNode && !!window.cordova) 
          {

            document.addEventListener('pause', function() {
              //TODO: this does not work yet -- make prevent update a usable thing in app logic ( e.g. in device lists or clients )
              _this.preventUpdate = true
            }, false)

            document.addEventListener('resume', function() {
              
              cloud.kickPing()

              if( _this.timeout )
              {
                clearTimeout( _this.timeout )
              }

              _this.timeout = setTimeout( function() {
                if( _this.defered ) 
                {
                  _this.merge( _this.defered.data, false, _this.defered.stamp )
                }
                _this.preventUpdate = null
                _this.defered = null
                _this.timeout = null
              }, 100 )
              // _this.preventUpdate = true //wait for another update and timeout
            }, false)
          }

          cloud.on
          ( 'set'
          , function( data ) {
 
            // console.clear()
            
            // console.group()
            // console.log('\n-----------INCOMING CLOUD-------\n', data )

            // if()

            // console.log(JSON.stringify(data, false, 2).slice(0,200))
            // console.groupCollapsed()
            // console.log(JSON.stringify(data, false, 2))
            // console.groupEnd()
              // console.log('INCOMING!\n', JSON.stringify(data))
              var set = data.s
                , vclock = data.v
                // , stamps = vclock[1]
                , subs = cloud.state.subs.map
                , stamp = vclock[1]

              if( vclock[0] instanceof Array )
              {

                //vclock where is it??????

                for( var i = vclock[0].length; hash = vclock[0][--i]; )
                {
                  updateSub( subs[hash], data.v[1] )
                }

              }
              else
              {
                updateSub( subs[data.v[0]], data.v[1] )
              }

              // stamp = 0

              // for( var s in stamps )
              // {
              //   console.log('burrr', stamps[s])
              //   if( stamps[s] > stamp ) stamp = stamps[s]
              // }

              cloud.stamp = stamp

              // _this._time

              if( !_this.preventUpdate ) 
              {
                _this.merge( data.s, false, stamp )
              } 
              else
              {
                if(!_this.defered)
                {
                  //pause geen timeout alleen maar uitstellen
                  _this.defered = 
                  { data: data.s
                  , stamp: stamp
                  }
                }
                else 
                {
                  _this.defered.stamp = stamp
                  _this.defered.data = util.merge( _this.defered.data, data.s)
                  // _this.defered.data._update( data.s )

                }
              }

            }
          )

        }
        else if( parent )
        {
          _this.cloud = parent.cloud
        }

      }
    )
  , __update

module.exports = CloudData

function updateSub( cached, vclock ) {
  if( !cached ) return

  return // not implemented

  // var sub = cached.subsobj
  // if( !sub._v ) sub.set( '_v', {} )

  // for( var f in vclock )
  // {
  //   sub._v.set( f, vclock[f] )
  // }

}

function createSub( path, sub, partialSub ) {

  if( path.length )
  {
    util.path( sub, path, partialSub, true )
    return sub
  }
  else
  {
    return partialSub
  }

}

function t4walker( val ) {
//TODO: remove $t:4
  for( var i in val )
  {

    if(val[i] instanceof Object)
    {

      if(val[i] instanceof vObject)
      {
        val[i] = { $path: val[i]._path } // $t: 4 
      }
      else
      {
        t4walker( val[i] )
      }

    }

  }

}

function cdListener( val, stamp, from, remove, added, old ){
  var cloud = this.cloud
  // console.log('OOOO cloudata listenerbur', this._path, val)
  if( stamp === 'localStorage' || stamp===false  )
  {
    // console.log('I WILL NOT UPDATE'.red.inverse)
    // console.log('Cloud from localstorage'.inverse.red)
    return
  }


  if( stamp !== cloud.stamp && val !== void 0 )
  {

    // console.log('>>>>>> shiner')

    // console.log('\n\n\n\n\nupdate cloud', val)



    if( remove && from )
    {
      if( from._removed )
      {
          // console.log('!!!!!!UPDATE CLOUD!!!', from && from._path, val, stamp)

        cloud.set(from._hashpath, [from._path, null, cloud.timeStamp()])
      }

    }
    else if ( from && !this._cloudignore )
    {


      // if( stamp === void 0 ) {
      //   alert('X')
      // }

      // console.log( 'cccccccccccc update!', this._path , from._updateOrigin, from._cachedPath)

      // console.error('_update Origin call from cloud.data') 
      if( from._updateOrigin === from ) //hier gaat iets mis
      {
        if( from.__t === 2 && val instanceof Object ) {
//           console.log(from, val)
          t4walker(val)
        }


        //["users", "U_fe7cc800136b7608", "clients", "V_kuco2zs2qf"]
        var p = from&&from._path
        if(p && p[0] === 'users' && p[p.length-2] && p[p.length-2] === 'clients' ) {
          //TODO: very dirty fix!
          // console.error('break it down!', p, p, val )
          return
        }

        if(p && p[0] === 'users' && p[1] === 'media') {
          throw(new Error('THIS IS WRONG ABORT!---> setting users.media '+p.join('.')))
          // console.error('THIS IS WRONG ABORT!---> setting users.media', p)
          return
        }


        cloud.set
        ( from._hashpath
        , [ from._path
          , from.__t === 4 ? {  $path: val._path } : val //$t: 4,
          , cloud.timeStamp()
          ]
        )

      }

    }

  }

}

CloudData.prototype._blacklist.push('cloud', 'datacloud', '_batchUnsub','_cloudignore', '_lstamp', '$t', '$loaded')

__update = CloudData.prototype.__update

CloudData.inject( require('vigour-js/object/flags') )

CloudData.flags.$path = {
  reset:true,
  set: function(val, stamp, reset) {
    
    if( reset ) {
      throw new Error('cloud data $path flag reset???')
    }
  
    var t = this
    if(stamp !== this.cloud.stamp) {
      throw new Error('set with $path only allowed from the hub')
    }

    var path = util.changeType( val )
    if(path.length){
      // console.log('___________ $path set')
       // val, set, notself, stamp 
      this._$setVal( this.cloud.data.get( path, {}, void 0, stamp ) ,stamp,false,true)
    }

    if(this.__t!==4) {
      throw new Error('cloud data $path flag __t !== 4')
    }

  }
}


var _set = CloudData.prototype.set

var _$setVal = CloudData.prototype._$setVal

//CloudData add flags

//( name, val, vobj, stamp, noupdate, from )
util.define
( CloudData
, '_$setVal', function( val, stamp ) {
   //setVal

   // console.log('.............', this._path, stamp, stamp && this.cloud.stamp === stamp)
   if(this.cloud.stamp === stamp && !this.$loaded) {
    //TODO: faster to do ! loaded
    var parent = this
    while(parent && !parent.$loaded) {
      parent.$loaded = true
      parent = parent._parent
    }
   }

   _$setVal.apply( this, arguments )
  }
, 'set', function(name, val, vobj, stamp){
  if (stamp !== this.cloud.stamp &&
      this._name === 'clients' &&
      !this[name] && 
      name !== this.cloud.clientid
     ) {
    void(0)
    void(0)
    // return false
  }
  return _set.apply(this, arguments)
}
, 'updateQueue'
, function() {
    // why this???
  }
, 'stamp'
, function(){
    if( !this.cloud ) {
      void(0)
      return
    }
    return this.cloud.timeStamp()
  }
, '__update'
, function( val, stamp, from, remove, added, oldval ) {


    this._lstamp = stamp


    // if(this._path[0]==='clients') {

    //   console.log('2', this._path, stamp===this.cloud.stamp)

    // }
    // console.log('1 lets __update', this._path, arguments)
    // if( this._ignore  ) {

      // console.log('21 lets __update', this._path, arguments)

      // delete this._ignore
      // return false
    // }
    //most nested update hier addition maken voor process
    // console.log(val, stamp, from)
    //is dit maybe weird???
    return __update.call( this, val, stamp, from, remove, added, oldval )
  }
, '_set'
, function (val, stamp) {
    if( !stamp ) return
    if( this._lstamp > stamp )
    {
      return
    }
    // console.log('lets set it!!!', this._path, arguments)

    return NetworkData.prototype._set.apply( this,arguments )
  }
, 'subscribe'
, function( val, from, parentFixer ) {
              // console.log('start')

    if( from && from.cloud  && from._val === this ) {

        //BUG: dit kan heel veel broken maken!!!!!!!
//         console.log('\n\nHURK!!!!!! DIT IS TEMP MOET NIET EEN EXTRA SUB GEMAAKT WORDEN!' )

        // from = void 0

        //TODO: dit is helemaal wrong GET RID OF IT!!!!
        // return
    }

    // console.log( 'lets do it sub sub'.cyan.inverse, this, val, from, parentFixer )
    // if(from) {
      // console.log('GOT FROM', from , 'SUBSCRIBE')
    // }
     if (!val || typeof val === 'function') { return; }
     // if(val instanceof vObject) {
     //    val = val.from
     // }


     var path = this._path
       , elem = val[1]
       , sub
       , partialSub
       , stringified
       , subsArray
       , exists
       , listeners
       , fromName

      var found = path && util.checkArray( path , 'usage' )
    


    // if( found || found===0) {
            // console.log('lets try to sub', val && val._path, ':', this._path )
      // }
   

    // if(elem) {
    //   console.error(elem, elem._col, elem._dfrom, elem._fmodel)
    // }

    // console.log('SUBSCRIBE', elem._dfrom, elem._fmodel, 'DFROM, FMODEL!')

    // if (elem && !elem._col && (!elem._dfrom || elem._fmodel)) {
    var isElem = (elem && !elem._col && (!elem._dfrom || elem._fmodel))

    if( isElem && !elem.getModel) {
      // console.error('be carefull! cloud data elem does not have getModel')
    } else if( isElem ) {

      // console.error('XXX!')
      //hier dingen vinden voor
      // console.log('!DFROM!')

    //isElem

    //val, from, parentFixer

    // if(val[3] && val[3] instanceof Array) {
    //       console.log( 'YES!!!' )

    // }

          // console.log( '!!!!!!111111', arguments, val[3], from, parentFixer, this, path )

    var fieldignore
    if( val[1]._ignoreFieldInSubscription ) {
      // alert('!'+val[3])
      if(!val[3]) {
        // console.log('FIELDIGNORE'.blue.inverse, val, this, path )
        // debugger

        // if(fi)

        fieldignore = true
      }
    }

    //TODO: has to become val[2]!!!
    //typeof from === 'string' ? from :
      //dit is niet goed!!!!
      fromName = val[3]

    // console.log( '--------22!!!!!!111111', partialSub, val[3], '\n\n?', val[3]._name  )

      //val[3] instanceof Data
      partialSub = elem.getModel( this,  val[3] , fieldignore )
      // console.clear()
    // console.log( '----!!!!!!111111', partialSub )
      // if(partialSub && partialSub.specialFix) {
      //   console.log('LETS DO IT ITI IT', partialSub, partialSub.specialFix, path)
        
      //   // if(partialSub.specialFix instanceof Array ) {

      //   //   console.log( path, partialSub.specialFix, partialSub )
      //   //   if(path[path.length-1] === partialSub.specialFix[0]) {

      //   //     if(partialSub.$ && partialSub.$[partialSub.specialFix[1]]) {
      //   //         console.log('do it!')
      //   //         partialSub = partialSub.$[partialSub.specialFix[1]]
      //   //     }

      //   //   }

      //   // } else 

      //   if(path[path.length-1]===partialSub.specialFix) {
      //     path.pop()
      //   }
        
      //   delete partialSub.specialFix
      // }

      // console.log('LETS DO IT ITI IT'.green.inverse, partialSub)

      // partialSub.DEBUG$log('partial')

    } else if (val instanceof Data && val.__sub) {
    //isData+Subscription
      //dit moet ook gefixed!!!!!!!!!
      partialSub = networkDataElement.parseData(val)

    } else if (val instanceof vObject ) {
    //vObject
      listeners = val._listeners

      // console.log(this._path, 'LISTENER', from )

      if(listeners) {
        for( var listener$=0, len$=listeners.length; listener$<len$; listener$++ ) {
                // console.log('!!!!!!!!!!! listner$333333'.red.inverse, listeners[listener$])
                  // console.log('--------->',this._path, 'LISTENER, ' , listeners[listener$]._path, val)
          this.subscribe( listeners[listener$], val )
        }
      }

      // if(val._parent && !val._parent.cloud) {
        // console.log('parent',val._parent, val._parent._listeners)
      //   listeners = val._parent._listeners

      //   // val._pa
      //   if(listeners) {
      //     for (var listener$=0, len$=listeners.length; listener$<len$; listener$++) {
      //       this.subscribe(listeners[listener$], false, true)
      //     }
      //   }
      // }

      return;
    } else if (val && util.isObj(val) && !(val instanceof Array)) {
      //isNormalSubscription
      // console.log('IS OBJ'.cyan)
      partialSub = val
      val = JSON.stringify(val)
    }

    if (partialSub) {

     //if! empty
     // console.log('2 LETS DO IT ITI IT 2',this , path, 'from:', from, 'sub:', networkDataElement.parseData(from, partialSub, this._subs ) )

     var fromCheck
     if(from) partialSub = networkDataElement.parseData(from, partialSub, this._subs)
      //de check moet nu in from gebeuren
      // console.log('.subscribe cloud.data partialSub are we sure this is from a ref in the cloud'.blue.inverse, partialSub, path) //replace /w from

      if(from && from.cloud && from._val === this) {
        path = from._path //if from is cloud
        // alert('!')
        fromCheck = true
        // console.warn('do nothing prop from cloud', from)
      }

     sub = createSub(path, {}, partialSub)
     stringified = JSON.stringify(sub)

     var substarget =  fromCheck ? from : this

     if(!substarget._subs) substarget._subs = []
     if(elem) elem._subscribed = true
     // console.log('3LETS DO IT ITI IT 3'.red.inverse, networkDataElement.parseData(from, partialSub) )

      subsArray = [ partialSub, elem || val , stringified ]

      if(fromName) {
        subsArray.push(fromName)
      }

      exists = util.checkArray( substarget._subs, stringified, 2)
      //maybe check if val already exists
      // console.log(' TEST TRUE ----- SUBSCRIBE', from, exists, this._subs, stringified, partialSub, sub )
      //TODO: check if not exists subsArray each field
      // console.log('PUSH! SUBS'.green.inverse, subsArray ,stringified, exists )
      var same
      for(var i in substarget._subs ) {

        // console.log(substarget._subs[i], i, substarget._path)
        //compare objects

        if( substarget._subs[i][1] === (elem || val) && substarget._subs[i][2] === stringified ) {
          //distincation!!!!
          // console.log('THE SAME'.cyan.inverse)
          same = true
        }

      }

      if(!same) {
      substarget._subs.push( subsArray )
        //just dont subscribe ---
        if ( exists===false ) {

          // console.log(' TRUE ----- SUBSCRIBE', JSON.stringify(sub,false,2) )
          this.cloud.subscribe(sub, stringified)
        }
        else {
          // console.warn('ALLREADY EXISTS!', sub, stringified)
        }
      }
    }

  }
, 'unsubscribe'
, function( val, from ) {

    //todo: double check if this goes well
    // console.error('1unsubscribe!')

    //doundle remove

    if 
    ( !val
      || val._col
      || (val._filter && val._filter._col)
      || !(!val._dfrom || val._fmodel)
    ) 
    { 
      return 
    }

     var path = this._path
       , stringified
       , subsArray
       , sub
       , exists
       , partialSub
       , index
       , field
       , listeners = val._listeners

    // console.log('unsubscriblex','path:'.blue, path, 'stringified:'.blue,  sub, 'this:'.blue,this, 'val:'.blue, val, 'from:',from )

    if ( util.isObj( val ) && !( val instanceof Array ) ) val = JSON.stringify( val )

    index = this._subs && util.checkArray( this._subs, val, 1 )
    //niet alle 1's weghalen

        // console.log('unsubs??????'.red.inverse, util.clone(this._subs), val, index, this )
        //missing index!


    if ( index!==false && index !== void 0 ) {




      if(val.model && val.model.parsing) {

        // console.log('MODEL unsubs??????'.red.inverse)
        // var removeI

        //block unsubs on model parsing
        if(val.model && val.model.field ) {
          // console.clear()
          // console.log('WARN! unsubs field WARN!'.red.inverse, from, this._subs[index] )

          //reapply if field
          field = this.get(val.model.field.val)
          if(!field._subs) field._subs = []

          // console.log('WARN! unsubs field WARN!'.red.inverse,field===this, field, from, this._subs[index] )


          var __subs = util
            .get( this._subs[index][0], val.model.field.val )

            // console.log( 'subs[0]'.blue,  this._subs[index][0] )

          if( __subs ) {
          this._subs[index][0] = __subs
          // field._subs.push(this._subs[index])
          // console.log('REMOVE SUBS and push'.red.inverse, index,field._subs, __subs, this._subs[index], this._path)
          // debugger
          // this._subs.splice(index, 1)
        } else {
          // console.log('warn'.red)

        }
          // console.log( __subs )


         
          //dit ff beter doen (meerdere _subs)
          //tel counts
          
          //voor deze splice check op index en stringified!

         
        }

        return
      }

      subsArray = this._subs[index]
      stringified = subsArray[2]
      partialSub = subsArray[0]
      // if(from) partialSub = networkDataElement.parseData(from, partialSub)

      // console.log( 'partialSub'.inverse, partialSub )

      sub = createSub(path, {}, partialSub)

      //voor deze splice check op index en stringified!
      //kan dus ook efficienter
      // if( removeI !== void 0 ) {
        // console.log('REMOVE', index)
         // console.log('REMOVE SUBS'.red.inverse, index, this._subs, this._path )
          // debugger
        this._subs.splice(index, 1)

      // }



      exists = util.checkArray(this._subs, stringified, 2)

      if(exists!==false) {
        // console.log('EXISTS????'.cyan.inverse, exists, stringified, this._subs, this._path, this)
      } else {
        // console.log('!EXISTS' , exists, stringified)
      }

      if ( exists === false ) this.cloud.unsubscribe(sub, stringified)
        // this._subsRAF.push([sub, stringified])
        // this._subsRAF = [] search & remove use different identifiers e.g. subs array

    } else if( val._removed ) {

            // console.log('unsubs??22222???? 2222222'.red.inverse)

      // console.error('is this really nessecary? _removed , froce all listeners remove tagets etc')
    } else if(listeners) {

                  // console.log('unsubs??333333333???? 2222222'.red.inverse)

      // console.log('----> this is also pretty different! _listeners')
      for (var listener$=0, len$=listeners.length; listener$<len$; listener$++) {
        if (listeners[listener$] instanceof Array) {
          this.unsubscribe(listeners[listener$][1], val)
        } else if (listeners[listener$].__t) {
          this.unsubscribe(listeners[listener$], val)
        }
      }
      return
    }

  }
)

},{"../../../data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","../../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../../object/hashpath":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/hashpath.js","../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/data/index.js","../data/element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/data/element.js","monotonic-timestamp":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/monotonic-timestamp/index.js","vigour-js/object/flags":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/flags.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/datacloud.js":[function(require,module,exports){
module.exports = DataCloud

var timestamp = require('monotonic-timestamp'),
  util = require('../../../util/object'),
  CloudData = require('./data'),
  VObject = require('../../../object'),
  Batch = VObject.new({
    merge: true
  }),
  CloudState = VObject.new({
    merge: true
  }),
  makeHash = require('../../../util/hash'),
  batchtime = 20,
  SUBS = 'subs',
  SETS = 'sets',
  UNSUBS = 'unsubs'

function DataCloud () {
  // window.datacloud = this
  var cloud = this
  cloud._joins = {}
  cloud._status = 1

  cloud.on('connect', function () {
    // console.error('---- cloud connect >> cloud._status++ call _reconnect')
    cloud._status++
    cloud._reconnect()
  })

  // console.log('start making state')
  cloud.state = new CloudState({
        subs: {
          map: {},
          tree: {}
        },
        sets: {
          map: {} /*, list:[]*/
        }
      }
      // , { localstorage: 'VC$' }
    )
    // console.log('done making state', JSON.stringify(cloud.state.raw,false,2))

  if (!cloud.state.sets.list) cloud.state.sets.set('list', [])
    // ^^ set met lege array merged niet

  cloud.batch = {
    maps: {
      sets: {},
      subs: {},
      unsubs: {}
    }
  }

  // console.log('------SET C DATA')

  cloud.data = new CloudData({}, false //{localstorage:'cloudData'}
    , false, this)

  // console.log('------LOG')


  // console.log(JSON.stringify( cloud.data.raw,false,2))
  // ^^ dit kan door weirde shit in localStorage de constructor laten kappen!

  // cloud.on('incoming::pong', this._clearCache)
  // cloud.on('data', this._clearCache)

  cloud._qTimer = setInterval(function _qTimer () {
    cloud._doBatch()
  }, batchtime)


  // cloud.on('welcome', function onWelcome(){

  // })

  cloud.on('subscribed', function (msg) {
    // console.error('>>> Hey Cloud says im subscribed to', msg)
  })

}

DataCloud.prototype.timeSync = function timeSync () {
  // console.log('timeSync!')
  var cloud = this,
    outstamp = Date.now()
  cloud.emit('time', function (cloudstamp) {

    var traveltime = Date.now() - outstamp,
      arrival = outstamp + traveltime / 2,
      offset = cloudstamp - arrival
      // console.log('timestamp in', traveltime, 'offset', offset)
    if (traveltime < cloud._timeTravel) {
      cloud._timeTravel = traveltime
      cloud._timeOffset = offset
    }
    var tries = cloud._timeTries++
      if (traveltime > 75 && tries < 10 || traveltime > 50 && tries < 5 || traveltime > 20 && tries < 2) {
        cloud.timeSync()
      }
  })
}

DataCloud.prototype.outList = function (label) {
  var batch = this.batch
  if (!batch.lists) {
    batch.lists = {}
    return batch.lists[label] = []
  } else if (!batch.lists[label]) {
    return batch.lists[label] = []
  } else {
    return batch.lists[label]
  }
}

DataCloud.prototype._doBatch = function _doBatch () {
  var cloud = this,
    out = cloud.batch.lists

  if (out) {
    // console.log('emit dat batch out!')
    // console.log('EMITTING!',out)
    // if(typeof window !== 'undefined'){
    //   console.log('writing out', JSON.stringify(out).slice(0,50))
    //   console.groupCollapsed()
    //   console.log(JSON.stringify(out,false,2))
    //   console.groupEnd()
    // }
    cloud.emit('batch', out)
      // cloud.write(out)
      // cache sets untill next heartbeat
      // var setslist = out.sets
      // if(setslist) {
      //   var cache = cloud.state.sets
      //     , setsmap = cloud.batch.maps.sets

    //   for(var hash in setsmap) {
    //     var update = setsmap[hash].update
    //     if(update[1] === null)
    //       update[1] = '$$null'
    //     storeSet(hash, update, cache.list, cache.map)
    //   }
    // }
    cloud.batch.lists = null
    cloud.batch.maps = {
      subs: {},
      sets: {},
      unsubs: {}
    }
  }
}

DataCloud.prototype._clearCache = function _clearCache () {
  // if(this.state.sets.list.length){
  //   this.state.sets.remove()
  //   this.state.set('sets', {map:{},list:[]})
  // }
  // could be nicer if we have a good way of clearing arrays
}

DataCloud.prototype.subscribe = function subscribe (subsobj, str) {
  // console.log('subscribe!', str)
  var cloud = this,
    state = cloud.state,
    hash, cached

  if (subsobj.hash && subsobj.subsobj) {
    // console.log('das cached!')
    hash = subsobj.hash
    cached = subsobj
  } else {
    if (!str)
      str = JSON.stringify(subsobj)
    hash = makeHash(str)
    cached = state.subs.map[hash]
  }
  // console.log('hash', hash)


  if (!cached) { // place in tree

    // console.log('set active!')

    state.subs.map.set(hash, {
      hash: hash,
      subsobj: subsobj,
      active: cloud._status,
      cleared: false
    })
    cached = state.subs.map[hash]
    var tree = state.subs.tree
    insertLeaf(tree, cached.subsobj, cached)
  } else if (!cached.active || cached.active._val) {
    // console.warn('subscription already active!', cached, cached.active)
    return
  } else {
    cached.active.val = cloud._status
  }

  var unsubsmap = cloud.batch.maps.unsubs,
    unsubindex = unsubsmap[hash]

  if (unsubindex !== void 0) {
    cloud.cancel(hash, unsubindex, UNSUBS)
    return
  }

  var subslist = cloud.outList(SUBS),
    subsmap = cloud.batch.maps.subs,
    out

  if (!cached.cleared._val) {
    cached.cleared.val = cloud._status
    var depends = cloud.getDeps(state.subs.tree, cached.subsobj, cached, {})
    if (!util.empty(depends)) {
      out = {
        $subsobj: cached.subsobj.raw,
        $depends: depends
      }
    } else {
      out = cached.subsobj.raw
    }
  } else {
    out = cached.subsobj.raw
    cached.cleared.val = cloud._status
  }

  subsmap[hash] = subslist.length
  subslist.push(out)
}

DataCloud.prototype.getDeps = function getDeps (tree, walker, cached, list) {
  walker.each(function (f) {
    var branch = tree[f]
    if (branch) {
      if (branch._subs) {
        branch._subs.each(function (i) {
          var found = this._val
          if (found.subsobj._v && found.hash._val !== cached.hash._val && !found.cleared._val && !list[found.hash._val]) {
            found.cleared.val = cached.cleared._val
            list[found.hash._val] = found.subsobj.raw
          }
        })
      }
      getDeps(branch, walker[f], cached, list)
    }
  })
  return list
}

DataCloud.prototype.unsubscribe = function unsubscribe (subsobj, str) {
  // still do
  var cloud = this
  // console.error('unsubscribe!', subsobj)
  if (subsobj instanceof Array) {
    // console.log('unsub with array', subsobj)
    var tree = cloud.state.subs.tree,
      spot = tree.get(subsobj)

    if (spot) {
      // console.log('OK UNSUBSCRIBE TO THIS CRAP', spot)
      recurUnsub(cloud, spot, str)
    }
  } else {

    var batchmap = cloud.batch.maps.subs,
      hash,
      cached

    if (subsobj.hash) {
      hash = subsobj.hash.val
      cached = subsobj
    } else {
      if (!str) {
        str = JSON.stringify(subsobj)
      }
      hash = makeHash(str)

      var statemap = cloud.state.subs.map

      cached = statemap[hash]
    }

    var index = batchmap[hash]

    if (index !== void 0) {
      cloud.cancel(hash, index, SUBS)

    } else {
      var list = cloud.outList('unsubs')
      cloud.batch.maps.unsubs[hash] = list.length
      list.push(hash)
    }

    cached.active.val = false
  }

}

function recurUnsub (cloud, spot, clear) {
  // console.log('recurUnsub!', spot._path)
  spot.each(function (f) {
    if (this._subs) {
      this._subs.each(function () {
        // console.log('unsub on this!', this.raw, 'clear?', clear)
        if (clear && this.from.subsobj._v) {
          this.from.subsobj._v.remove()
        }
        cloud.unsubscribe(this.from)
      })
    }
    if (f !== '_subs') {
      recurUnsub(cloud, this, clear)
    }
  })
}

DataCloud.prototype.cancel = function cancel (hash, index, label) {
  var batch = this.batch,
    list = batch.lists[label]
  removeIndex(list, index)
  if (!list.length) {
    delete batch.lists[label]
    if (util.empty(batch.lists)) {
      delete batch.lists
    }
  }
  var map = batch.maps[label]
  delete map[hash]
  for (hash in map)
    if (map[hash] > index) {
      map[hash] --
    }
}

DataCloud.prototype.set = function set (hash, update) {

  // console.log('SET CLOUD!')

  if (!update[0].length) {
    // console.error('EMPTY PATH', update)
  }

  var cloud = this,
    list = cloud.outList(SETS),
    map = cloud.batch.maps.sets

  storeSet(hash, update, list, map)
}

function storeSet (hash, update, list, map) {
  // console.log('storeset?!')
  var V = list.__t,
    stored = map[hash]

  if (stored) {
    var val = update[1],
      ts = update[2],
      oldval = stored.update[1]

    if (V) oldval = oldval.raw

    if (val instanceof Object && oldval instanceof Object && !(val.$path) && !(oldval.$path)) {
      if (!V) oldval = util.clone(oldval)
      val = util.merge(oldval, val)
    }

    if (V) {
      stored.update.set(1, val)
      stored.update.set(2, ts)
    } else {
      stored.update[1] = val
      stored.update[2] = ts
    }

    if (!V) {
      var i = stored.i,
        end = list.length - 1
      if (i !== end) {
        moveToEnd(list, i)
        for (var maphash in map) {
          if (map[maphash].i >= i) map[maphash].i--
        }
        stored.i = end
      }
    }
  } else {
    var setobj = {
      update: update,
      i: list.length
    }
    if (V) {
      map.set(hash, setobj)
    } else {
      map[hash] = setobj
    }

    stored = map[hash]
    list.push(stored.update)
  }
}

DataCloud.prototype._reconnect = function _reconnect () {

  // alert('(RE)CONNECT!')
  // console.error('------------- (RE)CONNECT!')

  var cloud = this,
    state = cloud.state,
    subs = state.subs.map

  cloud._timeTries = 0
  cloud._timeTravel = Infinity
  cloud.timeSync()

  // clean data
  cloud.stamp = 'cleanup'
  if (cloud.data.clients) {
    var myclient = cloud.data.clients[cloud.clientid]

    if(myclient) {
      myclient = myclient.raw
      delete myclient.key
      delete myclient.type
      delete myclient.ip
      delete myclient.token
    }

    cloud.data.set('clients', {
      clear: true
    }, void 0, cloud.stamp)

    // TODO: put all cloud.client logic in one place
    if(cloud.clientid && cloud.client) {
      cloud.client.val = cloud.data.clients.get(cloud.clientid, {})
      if(myclient) {
        cloud.client.from.val = myclient
      }
    }
  }

  if (cloud.data.users) {
    cloud.data.users.each(function () {
      // console.log('CLEAN CLOUD: clean usrt!!', this._name)

      this.set('clients', {
        clear: true
      }, void 0, cloud.stamp)

      // CLEAN MAINSCREEN AND ACTIVE CLIENT?!

      // this.mainscreen.set('clientRef', false, void 0, cloud.stamp)
      // this.mainscreen.clientRef.remove(void 0, void 0, void 0, void 0, cloud.stamp)

      // this.activeClient.remove(void 0, void 0, void 0, void 0, cloud.stamp)

    })
  }

  // if(sets.length){
  //   sets.sort(byTs)
  //   for(var i = 0, set ; set = sets[i++];){
  //     if(set[1] === '$$null')
  //       set[1] = null
  //   }
  //   cloud.write({sets:sets})
  //   // would be nicer to insert them into current batch
  // }

  var resubs = []
  subs.each(function (f) {
    // console.log('resub?', f)
    var cached = this,
      active = cached.active,
      cleared = cached.cleared

    if (active._val === 1) {
      active.val = true
      cleared.val = true
    } else if (active._val) {
      // active._val = false

      active.val = false
      // dit wordt niet in ls opgelsagen

      if (cleared._val === 1) {
        cleared.val = true
      } else if (cleared._val) {
        cleared.val = false
      }
      resubs.push(cached)
    } else if (cleared._val) {
      if (cleared._val === 1) {
        cleared.val = true
      } else {
        cleared.val = false
      }
    }

  })
  for (var i = 0, resub; resub = resubs[i]; i++) {
    // console.error('resubscribe!!', resub.subsobj.raw)
    cloud.subscribe(resub)
  }
  // console.error('done resubscribin')

  for (var j in cloud._joins) {
    cloud.join(cloud._joins[j], true)
  }

}

DataCloud.prototype.timeStamp = function () {
  var ts = timestamp()
  if (this._timeOffset) {
    ts += this._timeOffset
  }
  return ts
}

function insertLeaf (tree, subsobj, cached) {
  subsobj.each(function (f) {
    if (f === '*') {
      if (!tree.$) {
        tree.set('$', {})
      }
      subsobj['*'].each(function (s) {
        subsobj['*'][s][1].each(function (ss) {
          insertLeaf(tree.$, subsobj['*'][s][1][ss], cached)
        })
      })
      return
    }
    if (!tree[f]) {
      tree.set(f, {})
    }
    if (subsobj[f].val === true) {
      if (!tree[f]._subs) {
        tree[f].set('_subs', [cached])
      } else {
        tree[f]._subs.push(cached)
      }
    } else {
      insertLeaf(tree[f], subsobj[f], cached)
    }
  })
}

function moveToEnd (arr, i) {
  var tmp = arr[i]
  while (arr[i + 1]) {
    arr[i] = arr[++i]
  }
  arr[i] = tmp
}

function removeIndex (arr, i) {
  while (arr[i + 1]) {
    arr[i] = arr[++i]
  }
  arr.pop()
}

// function byTs (a, b) {
//   return a[2] - b[2]
// }

},{"../../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../../util/hash":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/hash.js","../../../util/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/object.js","./data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/data.js","monotonic-timestamp":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/monotonic-timestamp/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/emitter.js":[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Marcus Besjes, marcus@vigour.io
 */

var util = require('../../../util'),
  io = util.isNode
    ? require('socket.io-client')
    : require('./socket.io.js'),
  G = require('../../../util/global'),
  id = require('../../../util/id'),
  urlEncode = require('../ajax').encode,
  VObject = require('../../../object'),
  Value = require('../../../value'),
  Emitter = require('./emitter')

var Cloud = module.exports = function Cloud (url, params) {

  if (!params) {
    params = {}
  }

  var cloud = this
  cloud.params = params
  cloud.url = url
  cloud.VID = params.VID = fixVID(params.VID)
    // var HID = params.HID || G.env('HID')
    // if(HID)
    //   cloud.HID = params.HID = HID
  cloud.connected = new Value(false)

  // cloud.connected.addListener(function(){
  //   console.log('connected: state change >', this.val)
  // })

  cloud.api = new Value({
    defer: function (update, args) {
      var type = this.from.__t
      if (type !== 2) {
        throw new Error('cloud.api needs to be an Object')
      }
      update()
    }
  })

  // cloud.api.on(function(){
  //  console.error('lolk cloud.api is set!! on', this.val)
  // })

  if (params.api) {
    cloud.api.val = params.api
  }

  cloud.addDocumentListeners()

  if (url instanceof VObject) {
    var current = url.val
      // console.log('current', current)

    if (current) {
      cloud.init(url, params)
    } else {
      var placeholder = new Emitter()
      placeholder.emit = function () {
        var buffer = cloud.emitbuffer || (cloud.emitbuffer = [])
        buffer.push(arguments)
      }
      placeholder.placeholder = true
      cloud.socket = placeholder
      url.addListener(function (val, p1, p2, p3) {
        // console.log('URL VAL CHANGE', this.val)
        if (this.val) {
          cloud.init(url, params)
        }
      })
    }
  } else {
    // console.log('normal burk just init', url)
    cloud.init(url, params)
  }

}

Cloud.inject = require('../../../util/inject')

Cloud.prototype.addDocumentListeners = function () {
  var cloud = this
  if (!util.isNode && window.cordova) {
    document.addEventListener('resume', function () {
      // console.log('connected: RESUME')
      cloud.connected.val = false
    }, false)
    document.addEventListener('pause', function () {
      // console.log('connected: PAUSE')
      cloud.connected.val = false
    }, false)
  }
}

Cloud.prototype.init = function (url, params) {
  //   console.log('INIT!')
  var cloud = this,
    socket = cloud.connect(url, params,
      { disconnect: function () {
          log('disconnect')
          cloud.connected.val = false
        },
        connect: function () {
          log('connect')
          cloud.connected.val = true
          socket.io.engine.on('heartbeat', function () {
            cloud.connected.val = true
          })
        },
        welcome: function (address) {
          log('welcome')
          address = address.split('@')

          var clientid = cloud.clientid = address[0],
            hubid = address[1],
            state = cloud.state

          cloud.hub = params.h = hubid

          cloud.socket.io.uri = fixUrl(cloud.socket.io.uri, params)
        },
        hop: function (newhub) {
          log('hop')
          cloud.hop(newhub)
        },
        err: function (err) {
          log.error(err)
          if (err.type === 'tokenCheck') {
            if (typeof localStorage !== 'undefined') {
              localStorage.removeItem('productionuserToken')
              localStorage.removeItem('userId')
            }
          }
        },
        reconnecting: logger('reconnecting'),
        reconnect_attempt: logger('reconnect_attempt'),
        reconnect: logger('reconnect'),
        reconnect_failed: logger('reconnect_failed')
      }
    )

  var emitbuffer = cloud.emitbuffer
  if (emitbuffer) {
    for (var e in emitbuffer) {
      socket.emit.apply(socket, emitbuffer[e])
    }
    cloud.emitbuffer = null
  }

}

Cloud.prototype.connect = function (url, params, listeners) {

  var cloud = this

  if (!url)
    url = cloud.url
  if (!params)
    params = cloud.params

  if (url instanceof VObject) {
    url = url.val
  }

  url = fixUrl(url, params)

  var oldsocket = cloud.socket

  if (oldsocket && !oldsocket.placeholder) {
    oldsocket.disconnect()
    oldsocket.io.disconnect()
  }

  // console.log('CONNECTING!', url)

  var socket = cloud.socket = new io(url, {
    forceNew: true,
    timeout: 5e3
  })

  if (listeners) {
    for (var l in listeners) {
      socket.on(l, listeners[l])
    }
  }

  if (oldsocket) {
    // console.error('------------- transferring old listeners', socket._callbacks)
    passOn(oldsocket, socket)
  }

  // ------- these extentions are only for logging:
  window.cloudmessages = []
  var _onevent = cloud.socket.onevent
  cloud.socket.onevent = function (packet) {
    window.cloudmessages.push(JSON.stringify(packet.data, false, 2))
    // console.log('incoming cloud message!', JSON.stringify(packet.data, false, 2))
    _onevent.apply(this, arguments)
  }
  var _emit = cloud.socket.emit
  cloud.socket.emit = function (event, data) {
    if (typeof data !== 'function') {
      // console.log('\ncloud.socket.emit:', event, data)
      if (event === 'batch') {
        if (data.subs) {
          for (var s in data.subs) {
            if (data.subs[s].mtvData) {
              // console.log('\nsubscribin to mtvData!', data.subs[s].mtvData)
            }
          }
        }
        if (data.sets) {
          for (var s in data.sets) {
            // console.error('set:', JSON.stringify(data.sets[s]))
          }
        }
      }
    }
    _emit.apply(this, arguments)
  }
  // ------- these extentions are only for logging:

  return socket

}

Cloud.prototype.hop = function hop (newhub) {

  // console.log('GOT ORDER TO HOP TO', newhub)

  var cloud = this,
    params = cloud.params
    // --------------- dev
  if (newhub.indexOf('@') !== -1)
    cloud.url = 'ws://' + newhub.split('@')[1]
    // --------------- /dev
  cloud.hub = params.h = newhub
  cloud.connect()
}

Cloud.prototype.whenReady = function whenReady (fn) {
  if (this.clientid)
    fn()
  else
    this.once('welcome', fn)
}

Cloud.prototype.kickPing = function kickPing (time) {
  var e = this.socket.io.engine
  e.ping()
  e.onHeartbeat(time || e.pingTimeout)
  e.setPing()
}

Cloud.prototype.disconnect = function disconnect () {
  var socket = this.socket
  if (socket) {
    socket.disconnect()
    socket.io.disconnect()
  }
}

delegateList(Cloud.prototype, 'socket', ['on', 'once', 'emit'])

function delegateList (obj, target, list) {
  for (var i = list.length - 1; i >= 0; i--) {
    delegate(obj, target, list[i])
  }
}

function delegate (obj, target, field) {
  obj[field] = function delegated () {
    var thing = this[target]
    thing[field].apply(thing, arguments)
  }
}

function logit (flag) {
  return function logger () {
    void(0)
  }
}

var vflag = ':: vigour-cloud ::'
function log () {
  var args = util.arg(arguments)
  args.unshift(vflag)
  console.log.apply(console, args)
}
log.error = function (flag, err){
  void(0)
}
function logger (flag){
  return function logger () {
    var args = util.arg(arguments)
    args.unshift(vflag, flag)
    console.log.apply(console, args)
  }
}

function fixVID (VID) {
  VID = VID || G.session('VID') || id('V_')
  return G.session('VID', VID)
}

function passOn (from, to) {
  for (var e in from._callbacks) {
    var fromlist = from._callbacks[e]
    for (var i = 0, fn; fn = fromlist[i]; i++) {
      // console.log('hand over dat listner', fn.name === 'on' && fn.fn ? 'once' : 'on',e, fn.fn || fn)
      if (fn.name === 'on' && fn.fn) {
        to.once(e, fn.fn)
      } else {
        to.on(e, fn)
      }
    }
  }
  from.off()
}

function fixUrl (url, params) {
  var cutoff = url.indexOf('?')
  if (cutoff > -1) {
    url = url.slice(0, cutoff)
  }
  return url + '?' + urlEncode(params, 'GET', 'uri')
}
},{"../../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../../util/global":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/global.js","../../../util/id":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/id.js","../../../util/inject":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/inject.js","../../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../ajax":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/ajax.js","./emitter":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/emitter.js","./socket.io.js":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/socket.io.js","socket.io-client":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/socket.io.js":[function(require,module,exports){
(function (global){
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.io=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){

module.exports = _dereq_('./lib/');

},{"./lib/":2}],2:[function(_dereq_,module,exports){

/**
 * Module dependencies.
 */

var url = _dereq_('./url');
var parser = _dereq_('socket.io-parser');
var Manager = _dereq_('./manager');
var debug = _dereq_('debug')('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup(uri, opts) {
  if (typeof uri == 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var io;

  if (opts.forceNew || opts['force new connection'] || false === opts.multiplex) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }

  return io.socket(parsed.path);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = _dereq_('./manager');
exports.Socket = _dereq_('./socket');

},{"./manager":3,"./socket":5,"./url":6,"debug":9,"socket.io-parser":40}],3:[function(_dereq_,module,exports){

/**
 * Module dependencies.
 */

var url = _dereq_('./url');
var eio = _dereq_('engine.io-client');
var Socket = _dereq_('./socket');
var Emitter = _dereq_('component-emitter');
var parser = _dereq_('socket.io-parser');
var on = _dereq_('./on');
var bind = _dereq_('component-bind');
var object = _dereq_('object-component');
var debug = _dereq_('debug')('socket.io-client:manager');

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager(uri, opts){
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' == typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connected = 0;
  this.attempts = 0;
  this.encoding = false;
  this.packetBuffer = [];
  this.encoder = new parser.Encoder();
  this.decoder = new parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function() {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
  }
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function(v){
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function(v){
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function(v){
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function(v){
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function(v){
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function() {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.openReconnect && !this.reconnecting && this._reconnection && this.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.openReconnect = true;
    this.reconnect();
  }
};


/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function(fn){
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';

  // emit `open`
  var openSub = on(socket, 'open', function() {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function(data){
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    }

    self.maybeReconnectOnOpen();
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function(){
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function(){
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function(){
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function(data){
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function(packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function(err){
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function(nsp){
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connect', function(){
      self.connected++;
    });
  }
  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function(socket){
  --this.connected || this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function(packet){
  debug('writing packet %j', packet);
  var self = this;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function(encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i]);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function() {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function(){
  var sub;
  while (sub = this.subs.shift()) sub.destroy();

  this.packetBuffer = [];
  this.encoding = false;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function(){
  this.skipReconnect = true;
  this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function(reason){
  debug('close');
  this.cleanup();
  this.readyState = 'closed';
  this.emit('close', reason);
  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function(){
  if (this.reconnecting) return this;

  var self = this;
  this.attempts++;

  if (this.attempts > this._reconnectionAttempts) {
    debug('reconnect failed');
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.attempts * this.reconnectionDelay();
    delay = Math.min(delay, this.reconnectionDelayMax());
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function(){
      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.attempts);
      self.emitAll('reconnecting', self.attempts);
      self.open(function(err){
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function(){
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function(){
  var attempt = this.attempts;
  this.attempts = 0;
  this.reconnecting = false;
  this.emitAll('reconnect', attempt);
};

},{"./on":4,"./socket":5,"./url":6,"component-bind":7,"component-emitter":8,"debug":9,"engine.io-client":10,"object-component":37,"socket.io-parser":40}],4:[function(_dereq_,module,exports){

/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on(obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function(){
      obj.removeListener(ev, fn);
    }
  };
}

},{}],5:[function(_dereq_,module,exports){

/**
 * Module dependencies.
 */

var parser = _dereq_('socket.io-parser');
var Emitter = _dereq_('component-emitter');
var toArray = _dereq_('to-array');
var on = _dereq_('./on');
var bind = _dereq_('component-bind');
var debug = _dereq_('debug')('socket.io-client:socket');
var hasBin = _dereq_('has-binary');
var indexOf = _dereq_('indexof');

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket(io, nsp){
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  if (this.io.autoConnect) this.open();
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
  this.subEvents();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function() {
  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.open =
Socket.prototype.connect = function(){
  if (this.connected) return this;

  this.io.open(); // ensure open
  if ('open' == this.io.readyState) this.onopen();
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function(){
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function(ev){
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var parserType = parser.EVENT; // default
  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
  var packet = { type: parserType, data: args };

  // event ack callback
  if ('function' == typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function(packet){
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * "Opens" the socket.
 *
 * @api private
 */

Socket.prototype.onopen = function(){
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' != this.nsp) {
    this.packet({ type: parser.CONNECT });
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function(reason){
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function(packet){
  if (packet.nsp != this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function(packet){
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function(id){
  var self = this;
  var sent = false;
  return function(){
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
    self.packet({
      type: type,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function(packet){
  debug('calling ack %s with %j', packet.id, packet.data);
  var fn = this.acks[packet.id];
  fn.apply(this, packet.data);
  delete this.acks[packet.id];
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function(){
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function(){
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function(){
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function(){
  // clean subscriptions to avoid reconnections
  for (var i = 0; i < this.subs.length; i++) {
    this.subs[i].destroy();
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function(){
  if (!this.connected) return this;

  debug('performing disconnect (%s)', this.nsp);
  this.packet({ type: parser.DISCONNECT });

  // remove socket from pool
  this.destroy();

  // fire events
  this.onclose('io client disconnect');
  return this;
};

},{"./on":4,"component-bind":7,"component-emitter":8,"debug":9,"has-binary":32,"indexof":36,"socket.io-parser":40,"to-array":44}],6:[function(_dereq_,module,exports){
(function (global){

/**
 * Module dependencies.
 */

var parseuri = _dereq_('parseuri');
var debug = _dereq_('debug')('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url(uri, loc){
  var obj = uri;

  // default to window.location
  var loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.hostname;

  // relative path support
  if ('string' == typeof uri) {
    if ('/' == uri.charAt(0)) {
      if ('undefined' != typeof loc) {
        uri = loc.hostname + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' != typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    }
    else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  // define unique id
  obj.id = obj.protocol + '://' + obj.host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + obj.host + (loc && loc.port == obj.port ? '' : (':' + obj.port));

  return obj;
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"debug":9,"parseuri":38}],7:[function(_dereq_,module,exports){
/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};

},{}],8:[function(_dereq_,module,exports){

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],9:[function(_dereq_,module,exports){

/**
 * Expose `debug()` as the module.
 */

module.exports = debug;

/**
 * Create a debugger with the given `name`.
 *
 * @param {String} name
 * @return {Type}
 * @api public
 */

function debug(name) {
  if (!debug.enabled(name)) return function(){};

  return function(fmt){
    fmt = coerce(fmt);

    var curr = new Date;
    var ms = curr - (debug[name] || curr);
    debug[name] = curr;

    fmt = name
      + ' '
      + fmt
      + ' +' + debug.humanize(ms);

    // This hackery is required for IE8
    // where `console.log` doesn't have 'apply'
    window.console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }
}

/**
 * The currently active debug mode names.
 */

debug.names = [];
debug.skips = [];

/**
 * Enables a debug mode by name. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} name
 * @api public
 */

debug.enable = function(name) {
  try {
    localStorage.debug = name;
  } catch(e){}

  var split = (name || '').split(/[\s,]+/)
    , len = split.length;

  for (var i = 0; i < len; i++) {
    name = split[i].replace('*', '.*?');
    if (name[0] === '-') {
      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
    }
    else {
      debug.names.push(new RegExp('^' + name + '$'));
    }
  }
};

/**
 * Disable debug output.
 *
 * @api public
 */

debug.disable = function(){
  debug.enable('');
};

/**
 * Humanize the given `ms`.
 *
 * @param {Number} m
 * @return {String}
 * @api private
 */

debug.humanize = function(ms) {
  var sec = 1000
    , min = 60 * 1000
    , hour = 60 * min;

  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
  if (ms >= min) return (ms / min).toFixed(1) + 'm';
  if (ms >= sec) return (ms / sec | 0) + 's';
  return ms + 'ms';
};

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

debug.enabled = function(name) {
  for (var i = 0, len = debug.skips.length; i < len; i++) {
    if (debug.skips[i].test(name)) {
      return false;
    }
  }
  for (var i = 0, len = debug.names.length; i < len; i++) {
    if (debug.names[i].test(name)) {
      return true;
    }
  }
  return false;
};

/**
 * Coerce `val`.
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

// persist

try {
  if (window.localStorage) debug.enable(localStorage.debug);
} catch(e){}

},{}],10:[function(_dereq_,module,exports){

module.exports =  _dereq_('./lib/');

},{"./lib/":11}],11:[function(_dereq_,module,exports){

module.exports = _dereq_('./socket');

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = _dereq_('engine.io-parser');

},{"./socket":12,"engine.io-parser":21}],12:[function(_dereq_,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var transports = _dereq_('./transports');
var Emitter = _dereq_('component-emitter');
var debug = _dereq_('debug')('engine.io-client:socket');
var index = _dereq_('indexof');
var parser = _dereq_('engine.io-parser');
var parseuri = _dereq_('parseuri');
var parsejson = _dereq_('parsejson');
var parseqs = _dereq_('parseqs');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Noop function.
 *
 * @api private
 */

function noop(){}

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket(uri, opts){
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' == typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.host = uri.host;
    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  }

  this.secure = null != opts.secure ? opts.secure :
    (global.location && 'https:' == location.protocol);

  if (opts.host) {
    var pieces = opts.host.split(':');
    opts.hostname = pieces.shift();
    if (pieces.length) opts.port = pieces.pop();
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port ?
       location.port :
       (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.readyState = '';
  this.writeBuffer = [];
  this.callbackBuffer = [];
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.open();
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = _dereq_('./transport');
Socket.transports = _dereq_('./transports');
Socket.parser = _dereq_('engine.io-parser');

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    agent: this.agent,
    hostname: this.hostname,
    port: this.port,
    secure: this.secure,
    path: this.path,
    query: query,
    forceJSONP: this.forceJSONP,
    jsonp: this.jsonp,
    forceBase64: this.forceBase64,
    enablesXDR: this.enablesXDR,
    timestampRequests: this.timestampRequests,
    timestampParam: this.timestampParam,
    policyPort: this.policyPort,
    socket: this
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
    transport = 'websocket';
  } else if (0 == this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function() {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  var transport;
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function(transport){
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function(){
    self.onDrain();
  })
  .on('packet', function(packet){
    self.onPacket(packet);
  })
  .on('error', function(e){
    self.onError(e);
  })
  .on('close', function(){
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 })
    , failed = false
    , self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen(){
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' == msg.type && 'probe' == msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        Socket.priorWebsocketSuccess = 'websocket' == transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' == self.readyState || 'closing' == self.readyState) {
            return;
          }
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport() {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  //Handle any error that happens while probing
  function onerror(err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose(){
    onerror("transport closed");
  }

  //When the socket is closed while we're probing
  function onclose(){
    onerror("socket closed");
  }

  //When the socket is upgraded while we're probing
  function onupgrade(to){
    if (transport && to.name != transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  //Remove all listeners on the transport and on self
  function cleanup(){
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();

};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' == this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.emit('error', err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if  ('closed' == this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' == self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api public
*/

Socket.prototype.ping = function () {
  this.sendPacket('ping');
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function() {
  for (var i = 0; i < this.prevBufferLen; i++) {
    if (this.callbackBuffer[i]) {
      this.callbackBuffer[i]();
    }
  }

  this.writeBuffer.splice(0, this.prevBufferLen);
  this.callbackBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (this.writeBuffer.length == 0) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' != this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, fn) {
  this.sendPacket('message', msg, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, fn) {
  var packet = { type: type, data: data };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  this.callbackBuffer.push(fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    this.onClose('forced close');
    debug('socket closing - telling transport to close');
    this.transport.close();
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // clean buffers in next tick, so developers can still
    // grab the buffers on `close` event
    setTimeout(function() {
      self.writeBuffer = [];
      self.callbackBuffer = [];
      self.prevBufferLen = 0;
    }, 0);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i<j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./transport":13,"./transports":14,"component-emitter":8,"debug":9,"engine.io-parser":21,"indexof":36,"parsejson":28,"parseqs":29,"parseuri":30}],13:[function(_dereq_,module,exports){
/**
 * Module dependencies.
 */

var parser = _dereq_('engine.io-parser');
var Emitter = _dereq_('component-emitter');

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * A counter used to prevent collisions in the timestamps used
 * for cache busting.
 */

Transport.timestamps = 0;

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' == this.readyState || '' == this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function(packets){
  if ('open' == this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function(data){
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

},{"component-emitter":8,"engine.io-parser":21}],14:[function(_dereq_,module,exports){
(function (global){
/**
 * Module dependencies
 */

var XMLHttpRequest = _dereq_('xmlhttprequest');
var XHR = _dereq_('./polling-xhr');
var JSONP = _dereq_('./polling-jsonp');
var websocket = _dereq_('./websocket');

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling(opts){
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' == location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname != location.hostname || port != opts.port;
    xs = opts.secure != isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling-jsonp":15,"./polling-xhr":16,"./websocket":18,"xmlhttprequest":19}],15:[function(_dereq_,module,exports){
(function (global){

/**
 * Module requirements.
 */

var Polling = _dereq_('./polling');
var inherit = _dereq_('component-inherit');

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Callbacks count.
 */

var index = 0;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    });
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function(e){
    self.onError('jsonp poll error',e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  insertAt.parentNode.insertBefore(script, insertAt);
  this.script = script;

  var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);
  
  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="'+ self.iframeId +'">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch(e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function(){
      if (self.iframe.readyState == 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling":17,"component-inherit":20}],16:[function(_dereq_,module,exports){
(function (global){
/**
 * Module requirements.
 */

var XMLHttpRequest = _dereq_('xmlhttprequest');
var Polling = _dereq_('./polling');
var Emitter = _dereq_('component-emitter');
var inherit = _dereq_('component-inherit');
var debug = _dereq_('debug')('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty(){}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR(opts){
  Polling.call(this, opts);

  if (global.location) {
    var isSSL = 'https:' == location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname != global.location.hostname ||
      port != opts.port;
    this.xs = opts.secure != isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function(opts){
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;
  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function(data, fn){
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function(err){
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function(){
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function(data){
    self.onData(data);
  });
  req.on('error', function(err){
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request(opts){
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined != opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;
  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function(){
  var xhr = this.xhr = new XMLHttpRequest({ agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR });
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    if (this.supportsBinary) {
      // This has to be done after open because Firefox is stupid
      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
      xhr.responseType = 'arraybuffer';
    }

    if ('POST' == this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.hasXDR()) {
      xhr.onload = function(){
        self.onLoad();
      };
      xhr.onerror = function(){
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function(){
        if (4 != xhr.readyState) return;
        if (200 == xhr.status || 1223 == xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function(){
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function() {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function(){
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function(data){
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function(err){
  this.emit('error', err);
  this.cleanup();
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function(){
  if ('undefined' == typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  try {
    this.xhr.abort();
  } catch(e) {}

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function(){
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type');
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response;
    } else {
      if (!this.supportsBinary) {
        data = this.xhr.responseText;
      } else {
        data = 'ok';
      }
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function(){
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function(){
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

if (global.document) {
  Request.requestsCount = 0;
  Request.requests = {};
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler);
  }
}

function unloadHandler() {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./polling":17,"component-emitter":8,"component-inherit":20,"debug":9,"xmlhttprequest":19}],17:[function(_dereq_,module,exports){
/**
 * Module dependencies.
 */

var Transport = _dereq_('../transport');
var parseqs = _dereq_('parseqs');
var parser = _dereq_('engine.io-parser');
var inherit = _dereq_('component-inherit');
var debug = _dereq_('debug')('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function() {
  var XMLHttpRequest = _dereq_('xmlhttprequest');
  var xhr = new XMLHttpRequest({ agent: this.agent, xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling(opts){
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function(){
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function(onPause){
  var pending = 0;
  var self = this;

  this.readyState = 'pausing';

  function pause(){
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function(){
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function(){
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function(){
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function(data){
  var self = this;
  debug('polling got data %s', data);
  var callback = function(packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' == self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' == packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' != this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' == this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function(){
  var self = this;

  function close(){
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' == this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function(packets){
  var self = this;
  this.writable = false;
  var callbackfn = function() {
    self.writable = true;
    self.emit('drain');
  };

  var self = this;
  parser.encodePayload(packets, this.supportsBinary, function(data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function(){
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = +new Date + '-' + Transport.timestamps++;
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' == schema && this.port != 443) ||
     ('http' == schema && this.port != 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  return schema + '://' + this.hostname + port + this.path + query;
};

},{"../transport":13,"component-inherit":20,"debug":9,"engine.io-parser":21,"parseqs":29,"xmlhttprequest":19}],18:[function(_dereq_,module,exports){
/**
 * Module dependencies.
 */

var Transport = _dereq_('../transport');
var parser = _dereq_('engine.io-parser');
var parseqs = _dereq_('parseqs');
var inherit = _dereq_('component-inherit');
var debug = _dereq_('debug')('engine.io-client:websocket');

/**
 * `ws` exposes a WebSocket-compatible interface in
 * Node, or the `WebSocket` or `MozWebSocket` globals
 * in the browser.
 */

var WebSocket = _dereq_('ws');

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS(opts){
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function(){
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var self = this;
  var uri = this.uri();
  var protocols = void(0);
  var opts = { agent: this.agent };

  this.ws = new WebSocket(uri, protocols, opts);

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  this.ws.binaryType = 'arraybuffer';
  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function(){
  var self = this;

  this.ws.onopen = function(){
    self.onOpen();
  };
  this.ws.onclose = function(){
    self.onClose();
  };
  this.ws.onmessage = function(ev){
    self.onData(ev.data);
  };
  this.ws.onerror = function(e){
    self.onError('websocket error', e);
  };
};

/**
 * Override `onData` to use a timer on iOS.
 * See: https://gist.github.com/mloughran/2052006
 *
 * @api private
 */

if ('undefined' != typeof navigator
  && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
  WS.prototype.onData = function(data){
    var self = this;
    setTimeout(function(){
      Transport.prototype.onData.call(self, data);
    }, 0);
  };
}

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function(packets){
  var self = this;
  this.writable = false;
  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  for (var i = 0, l = packets.length; i < l; i++) {
    parser.encodePacket(packets[i], this.supportsBinary, function(data) {
      //Sometimes the websocket has already been closed but the browser didn't
      //have a chance of informing us about it yet, in that case send will
      //throw an error
      try {
        self.ws.send(data);
      } catch (e){
        debug('websocket closed before onclose event');
      }
    });
  }

  function ondrain() {
    self.writable = true;
    self.emit('drain');
  }
  // fake drain
  // defer to next tick to allow Socket to clear writeBuffer
  setTimeout(ondrain, 0);
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function(){
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function(){
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function(){
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' == schema && this.port != 443)
    || ('ws' == schema && this.port != 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = +new Date;
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  return schema + '://' + this.hostname + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function(){
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

},{"../transport":13,"component-inherit":20,"debug":9,"engine.io-parser":21,"parseqs":29,"ws":31}],19:[function(_dereq_,module,exports){
// browser shim for xmlhttprequest module
var hasCORS = _dereq_('has-cors');

module.exports = function(opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new ActiveXObject('Microsoft.XMLHTTP');
    } catch(e) { }
  }
}

},{"has-cors":34}],20:[function(_dereq_,module,exports){

module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};
},{}],21:[function(_dereq_,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var keys = _dereq_('./keys');
var sliceBuffer = _dereq_('arraybuffer.slice');
var base64encoder = _dereq_('base64-arraybuffer');
var after = _dereq_('after');
var utf8 = _dereq_('utf8');

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = navigator.userAgent.match(/Android/i);

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = _dereq_('blob');

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if ('function' == typeof supportsBinary) {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if ('function' == typeof utf8encode) {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
  }

  return callback('' + encoded);

};

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (isAndroid) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  // String data
  if (typeof data == 'string' || data === undefined) {
    if (data.charAt(0) == 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      try {
        data = utf8.decode(data);
      } catch (e) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!global.ArrayBuffer) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary == 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  if (supportsBinary) {
    if (Blob && !isAndroid) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, supportsBinary, true, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data != 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data == '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = ''
    , n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (':' != chr) {
      length += chr;
    } else {
      if ('' == length || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, true);

        if (err.type == packet.type && err.data == packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var ret = callback(packet, i + n, l);
        if (false === ret) return;
      }

      // advance cursor
      i += n;
      length = '';
    }
  }

  if (length != '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  var numberTooLong = false;
  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] == 255) break;

      if (msgLength.length > 310) {
        numberTooLong = true;
        break;
      }

      msgLength += tailArray[i];
    }

    if(numberTooLong) return callback(err, 0, 1);

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./keys":22,"after":23,"arraybuffer.slice":24,"base64-arraybuffer":25,"blob":26,"utf8":27}],22:[function(_dereq_,module,exports){

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

},{}],23:[function(_dereq_,module,exports){
module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}

},{}],24:[function(_dereq_,module,exports){
/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

},{}],25:[function(_dereq_,module,exports){
/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(chars){
  "use strict";

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = chars.indexOf(base64[i]);
      encoded2 = chars.indexOf(base64[i+1]);
      encoded3 = chars.indexOf(base64[i+2]);
      encoded4 = chars.indexOf(base64[i+3]);

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");

},{}],26:[function(_dereq_,module,exports){
(function (global){
/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var b = new Blob(['hi']);
    return b.size == 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }
  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

module.exports = (function() {
  if (blobSupported) {
    return global.Blob;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],27:[function(_dereq_,module,exports){
(function (global){
/*! http://mths.be/utf8js v2.0.0 by @mathias */
;(function(root) {

  // Detect free variables `exports`
  var freeExports = typeof exports == 'object' && exports;

  // Detect free variable `module`
  var freeModule = typeof module == 'object' && module &&
    module.exports == freeExports && module;

  // Detect free variable `global`, from Node.js or Browserified code,
  // and use it as `root`
  var freeGlobal = typeof global == 'object' && global;
  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  var stringFromCharCode = String.fromCharCode;

  // Taken from http://mths.be/punycode
  function ucs2decode(string) {
    var output = [];
    var counter = 0;
    var length = string.length;
    var value;
    var extra;
    while (counter < length) {
      value = string.charCodeAt(counter++);
      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);
        if ((extra & 0xFC00) == 0xDC00) { // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }
    return output;
  }

  // Taken from http://mths.be/punycode
  function ucs2encode(array) {
    var length = array.length;
    var index = -1;
    var value;
    var output = '';
    while (++index < length) {
      value = array[index];
      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }
      output += stringFromCharCode(value);
    }
    return output;
  }

  /*--------------------------------------------------------------------------*/

  function createByte(codePoint, shift) {
    return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
  }

  function encodeCodePoint(codePoint) {
    if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
      return stringFromCharCode(codePoint);
    }
    var symbol = '';
    if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
      symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
    }
    else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
      symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
      symbol += createByte(codePoint, 6);
    }
    else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
      symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
      symbol += createByte(codePoint, 12);
      symbol += createByte(codePoint, 6);
    }
    symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
    return symbol;
  }

  function utf8encode(string) {
    var codePoints = ucs2decode(string);

    // console.log(JSON.stringify(codePoints.map(function(x) {
    //  return 'U+' + x.toString(16).toUpperCase();
    // })));

    var length = codePoints.length;
    var index = -1;
    var codePoint;
    var byteString = '';
    while (++index < length) {
      codePoint = codePoints[index];
      byteString += encodeCodePoint(codePoint);
    }
    return byteString;
  }

  /*--------------------------------------------------------------------------*/

  function readContinuationByte() {
    if (byteIndex >= byteCount) {
      throw Error('Invalid byte index');
    }

    var continuationByte = byteArray[byteIndex] & 0xFF;
    byteIndex++;

    if ((continuationByte & 0xC0) == 0x80) {
      return continuationByte & 0x3F;
    }

    // If we end up here, itâ€™s not a continuation byte
    throw Error('Invalid continuation byte');
  }

  function decodeSymbol() {
    var byte1;
    var byte2;
    var byte3;
    var byte4;
    var codePoint;

    if (byteIndex > byteCount) {
      throw Error('Invalid byte index');
    }

    if (byteIndex == byteCount) {
      return false;
    }

    // Read first byte
    byte1 = byteArray[byteIndex] & 0xFF;
    byteIndex++;

    // 1-byte sequence (no continuation bytes)
    if ((byte1 & 0x80) == 0) {
      return byte1;
    }

    // 2-byte sequence
    if ((byte1 & 0xE0) == 0xC0) {
      var byte2 = readContinuationByte();
      codePoint = ((byte1 & 0x1F) << 6) | byte2;
      if (codePoint >= 0x80) {
        return codePoint;
      } else {
        throw Error('Invalid continuation byte');
      }
    }

    // 3-byte sequence (may include unpaired surrogates)
    if ((byte1 & 0xF0) == 0xE0) {
      byte2 = readContinuationByte();
      byte3 = readContinuationByte();
      codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
      if (codePoint >= 0x0800) {
        return codePoint;
      } else {
        throw Error('Invalid continuation byte');
      }
    }

    // 4-byte sequence
    if ((byte1 & 0xF8) == 0xF0) {
      byte2 = readContinuationByte();
      byte3 = readContinuationByte();
      byte4 = readContinuationByte();
      codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
        (byte3 << 0x06) | byte4;
      if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
        return codePoint;
      }
    }

    throw Error('Invalid UTF-8 detected');
  }

  var byteArray;
  var byteCount;
  var byteIndex;
  function utf8decode(byteString) {
    byteArray = ucs2decode(byteString);
    byteCount = byteArray.length;
    byteIndex = 0;
    var codePoints = [];
    var tmp;
    while ((tmp = decodeSymbol()) !== false) {
      codePoints.push(tmp);
    }
    return ucs2encode(codePoints);
  }

  /*--------------------------------------------------------------------------*/

  var utf8 = {
    'version': '2.0.0',
    'encode': utf8encode,
    'decode': utf8decode
  };

  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:
  if (
    typeof define == 'function' &&
    typeof define.amd == 'object' &&
    define.amd
  ) {
    define(function() {
      return utf8;
    });
  } else if (freeExports && !freeExports.nodeType) {
    if (freeModule) { // in Node.js or RingoJS v0.8.0+
      freeModule.exports = utf8;
    } else { // in Narwhal or RingoJS v0.7.0-
      var object = {};
      var hasOwnProperty = object.hasOwnProperty;
      for (var key in utf8) {
        hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
      }
    }
  } else { // in Rhino or a web browser
    root.utf8 = utf8;
  }

}(this));

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],28:[function(_dereq_,module,exports){
(function (global){
/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@')
      .replace(rvalidtokens, ']')
      .replace(rvalidbraces, ''))) {
    return (new Function('return ' + data))();
  }
};
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],29:[function(_dereq_,module,exports){
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

},{}],30:[function(_dereq_,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

},{}],31:[function(_dereq_,module,exports){

/**
 * Module dependencies.
 */

var global = (function() { return this; })();

/**
 * WebSocket constructor.
 */

var WebSocket = global.WebSocket || global.MozWebSocket;

/**
 * Module exports.
 */

module.exports = WebSocket ? ws : null;

/**
 * WebSocket constructor.
 *
 * The third `opts` options object gets ignored in web browsers, since it's
 * non-standard, and throws a TypeError if passed to the constructor.
 * See: https://github.com/einaros/ws/issues/227
 *
 * @param {String} uri
 * @param {Array} protocols (optional)
 * @param {Object) opts (optional)
 * @api public
 */

function ws(uri, protocols, opts) {
  var instance;
  if (protocols) {
    instance = new WebSocket(uri, protocols);
  } else {
    instance = new WebSocket(uri);
  }
  return instance;
}

if (WebSocket) ws.prototype = WebSocket.prototype;

},{}],32:[function(_dereq_,module,exports){
(function (global){

/*
 * Module requirements.
 */

var isArray = _dereq_('isarray');

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      if (obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (obj.hasOwnProperty(key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"isarray":33}],33:[function(_dereq_,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],34:[function(_dereq_,module,exports){

/**
 * Module dependencies.
 */

var global = _dereq_('global');

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = 'XMLHttpRequest' in global &&
    'withCredentials' in new global.XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

},{"global":35}],35:[function(_dereq_,module,exports){

/**
 * Returns `this`. Execute this without a "context" (i.e. without it being
 * attached to an object of the left-hand side), and `this` points to the
 * "global" scope of the current JS execution.
 */

module.exports = (function () { return this; })();

},{}],36:[function(_dereq_,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],37:[function(_dereq_,module,exports){

/**
 * HOP ref.
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Return own keys in `obj`.
 *
 * @param {Object} obj
 * @return {Array}
 * @api public
 */

exports.keys = Object.keys || function(obj){
  var keys = [];
  for (var key in obj) {
    if (has.call(obj, key)) {
      keys.push(key);
    }
  }
  return keys;
};

/**
 * Return own values in `obj`.
 *
 * @param {Object} obj
 * @return {Array}
 * @api public
 */

exports.values = function(obj){
  var vals = [];
  for (var key in obj) {
    if (has.call(obj, key)) {
      vals.push(obj[key]);
    }
  }
  return vals;
};

/**
 * Merge `b` into `a`.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api public
 */

exports.merge = function(a, b){
  for (var key in b) {
    if (has.call(b, key)) {
      a[key] = b[key];
    }
  }
  return a;
};

/**
 * Return length of `obj`.
 *
 * @param {Object} obj
 * @return {Number}
 * @api public
 */

exports.length = function(obj){
  return exports.keys(obj).length;
};

/**
 * Check if `obj` is empty.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api public
 */

exports.isEmpty = function(obj){
  return 0 == exports.length(obj);
};
},{}],38:[function(_dereq_,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host'
  , 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
  var m = re.exec(str || '')
    , uri = {}
    , i = 14;

  while (i--) {
    uri[parts[i]] = m[i] || '';
  }

  return uri;
};

},{}],39:[function(_dereq_,module,exports){
(function (global){
/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = _dereq_('isarray');
var isBuf = _dereq_('./is-buffer');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet){
  var buffers = [];
  var packetData = packet.data;

  function _deconstructPacket(data) {
    if (!data) return data;

    if (isBuf(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isArray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i]);
      }
      return newData;
    } else if ('object' == typeof data && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key]);
      }
      return newData;
    }
    return data;
  }

  var pack = packet;
  pack.data = _deconstructPacket(packetData);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  var curPlaceHolder = 0;

  function _reconstructPacket(data) {
    if (data && data._placeholder) {
      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
      return buf;
    } else if (isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i]);
      }
      return data;
    } else if (data && 'object' == typeof data) {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key]);
      }
      return data;
    }
    return data;
  }

  packet.data = _reconstructPacket(packet.data);
  packet.attachments = undefined; // no longer useful
  return packet;
};

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((global.Blob && obj instanceof Blob) ||
        (global.File && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./is-buffer":41,"isarray":42}],40:[function(_dereq_,module,exports){

/**
 * Module dependencies.
 */

var debug = _dereq_('debug')('socket.io-parser');
var json = _dereq_('json3');
var isArray = _dereq_('isarray');
var Emitter = _dereq_('component-emitter');
var binary = _dereq_('./binary');
var isBuf = _dereq_('./is-buffer');

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'BINARY_EVENT',
  'ACK',
  'BINARY_ACK',
  'ERROR'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    encodeAsBinary(obj, callback);
  }
  else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {
  var str = '';
  var nsp = false;

  // first is type
  str += obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    str += obj.attachments;
    str += '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' != obj.nsp) {
    nsp = true;
    str += obj.nsp;
  }

  // immediately followed by the id
  if (null != obj.id) {
    if (nsp) {
      str += ',';
      nsp = false;
    }
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    if (nsp) str += ',';
    str += json.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if ('string' == typeof obj) {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments == 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var p = {};
  var i = 0;

  // look up type
  p.type = Number(str.charAt(0));
  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
    p.attachments = '';
    while (str.charAt(++i) != '-') {
      p.attachments += str.charAt(i);
    }
    p.attachments = Number(p.attachments);
  }

  // look up namespace (if any)
  if ('/' == str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' == c) break;
      p.nsp += c;
      if (i + 1 == str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' != next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i + 1 == str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    try {
      p.data = json.parse(str.substr(i));
    } catch(e){
      return error();
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(data){
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}

},{"./binary":39,"./is-buffer":41,"component-emitter":8,"debug":9,"isarray":42,"json3":43}],41:[function(_dereq_,module,exports){
(function (global){

module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer);
}

}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],42:[function(_dereq_,module,exports){
module.exports=_dereq_(33)
},{}],43:[function(_dereq_,module,exports){
/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */
;(function (window) {
  // Convenience aliases.
  var getClass = {}.toString, isProperty, forEach, undef;

  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // Detect native implementations.
  var nativeJSON = typeof JSON == "object" && JSON;

  // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if
  // available.
  var JSON3 = typeof exports == "object" && exports && !exports.nodeType && exports;

  if (JSON3 && nativeJSON) {
    // Explicitly delegate to the native `stringify` and `parse`
    // implementations in CommonJS environments.
    JSON3.stringify = nativeJSON.stringify;
    JSON3.parse = nativeJSON.parse;
  } else {
    // Export for web browsers, JavaScript engines, and asynchronous module
    // loaders, using the global `JSON` object if available.
    JSON3 = window.JSON = nativeJSON || {};
  }

  // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
  var isExtended = new Date(-3509827334573292);
  try {
    // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
    // results for certain dates in Opera >= 10.53.
    isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
      // Safari < 2.0.2 stores the internal millisecond time value correctly,
      // but clips the values returned by the date methods to the range of
      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
  } catch (exception) {}

  // Internal: Determines whether the native `JSON.stringify` and `parse`
  // implementations are spec-compliant. Based on work by Ken Snyder.
  function has(name) {
    if (has[name] !== undef) {
      // Return cached feature test result.
      return has[name];
    }

    var isSupported;
    if (name == "bug-string-char-index") {
      // IE <= 7 doesn't support accessing string characters using square
      // bracket notation. IE 8 only supports this for primitives.
      isSupported = "a"[0] != "a";
    } else if (name == "json") {
      // Indicates whether both `JSON.stringify` and `JSON.parse` are
      // supported.
      isSupported = has("json-stringify") && has("json-parse");
    } else {
      var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
      // Test `JSON.stringify`.
      if (name == "json-stringify") {
        var stringify = JSON3.stringify, stringifySupported = typeof stringify == "function" && isExtended;
        if (stringifySupported) {
          // A test function object with a custom `toJSON` method.
          (value = function () {
            return 1;
          }).toJSON = value;
          try {
            stringifySupported =
              // Firefox 3.1b1 and b2 serialize string, number, and boolean
              // primitives as object literals.
              stringify(0) === "0" &&
              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
              // literals.
              stringify(new Number()) === "0" &&
              stringify(new String()) == '""' &&
              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
              // does not define a canonical JSON representation (this applies to
              // objects with `toJSON` properties as well, *unless* they are nested
              // within an object or array).
              stringify(getClass) === undef &&
              // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
              // FF 3.1b3 pass this test.
              stringify(undef) === undef &&
              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
              // respectively, if the value is omitted entirely.
              stringify() === undef &&
              // FF 3.1b1, 2 throw an error if the given value is not a number,
              // string, array, object, Boolean, or `null` literal. This applies to
              // objects with custom `toJSON` methods as well, unless they are nested
              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
              // methods entirely.
              stringify(value) === "1" &&
              stringify([value]) == "[1]" &&
              // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
              // `"[null]"`.
              stringify([undef]) == "[null]" &&
              // YUI 3.0.0b1 fails to serialize `null` literals.
              stringify(null) == "null" &&
              // FF 3.1b1, 2 halts serialization if an array contains a function:
              // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
              // elides non-JSON values from objects and arrays, unless they
              // define custom `toJSON` methods.
              stringify([undef, getClass, null]) == "[null,null,null]" &&
              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
              // where character escape codes are expected (e.g., `\b` => `\u0008`).
              stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
              stringify(null, value) === "1" &&
              stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
              // serialize extended years.
              stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
              // The milliseconds are optional in ES 5, but required in 5.1.
              stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
              // four-digit years instead of six-digit years. Credits: @Yaffle.
              stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
              // values less than 1000. Credits: @Yaffle.
              stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
          } catch (exception) {
            stringifySupported = false;
          }
        }
        isSupported = stringifySupported;
      }
      // Test `JSON.parse`.
      if (name == "json-parse") {
        var parse = JSON3.parse;
        if (typeof parse == "function") {
          try {
            // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
            // Conforming implementations should also coerce the initial argument to
            // a string prior to parsing.
            if (parse("0") === 0 && !parse(false)) {
              // Simple parsing test.
              value = parse(serialized);
              var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
              if (parseSupported) {
                try {
                  // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                  parseSupported = !parse('"\t"');
                } catch (exception) {}
                if (parseSupported) {
                  try {
                    // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                    // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                    // certain octal literals.
                    parseSupported = parse("01") !== 1;
                  } catch (exception) {}
                }
                if (parseSupported) {
                  try {
                    // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                    // points. These environments, along with FF 3.1b1 and 2,
                    // also allow trailing commas in JSON objects and arrays.
                    parseSupported = parse("1.") !== 1;
                  } catch (exception) {}
                }
              }
            }
          } catch (exception) {
            parseSupported = false;
          }
        }
        isSupported = parseSupported;
      }
    }
    return has[name] = !!isSupported;
  }

  if (!has("json")) {
    // Common `[[Class]]` name aliases.
    var functionClass = "[object Function]";
    var dateClass = "[object Date]";
    var numberClass = "[object Number]";
    var stringClass = "[object String]";
    var arrayClass = "[object Array]";
    var booleanClass = "[object Boolean]";

    // Detect incomplete support for accessing string characters by index.
    var charIndexBuggy = has("bug-string-char-index");

    // Define additional utility methods if the `Date` methods are buggy.
    if (!isExtended) {
      var floor = Math.floor;
      // A mapping between the months of the year and the number of days between
      // January 1st and the first of the respective month.
      var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
      // Internal: Calculates the number of days between the Unix epoch and the
      // first day of the given month.
      var getDay = function (year, month) {
        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
      };
    }

    // Internal: Determines if a property is a direct property of the given
    // object. Delegates to the native `Object#hasOwnProperty` method.
    if (!(isProperty = {}.hasOwnProperty)) {
      isProperty = function (property) {
        var members = {}, constructor;
        if ((members.__proto__ = null, members.__proto__ = {
          // The *proto* property cannot be set multiple times in recent
          // versions of Firefox and SeaMonkey.
          "toString": 1
        }, members).toString != getClass) {
          // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
          // supports the mutable *proto* property.
          isProperty = function (property) {
            // Capture and break the object's prototype chain (see section 8.6.2
            // of the ES 5.1 spec). The parenthesized expression prevents an
            // unsafe transformation by the Closure Compiler.
            var original = this.__proto__, result = property in (this.__proto__ = null, this);
            // Restore the original prototype chain.
            this.__proto__ = original;
            return result;
          };
        } else {
          // Capture a reference to the top-level `Object` constructor.
          constructor = members.constructor;
          // Use the `constructor` property to simulate `Object#hasOwnProperty` in
          // other environments.
          isProperty = function (property) {
            var parent = (this.constructor || constructor).prototype;
            return property in this && !(property in parent && this[property] === parent[property]);
          };
        }
        members = null;
        return isProperty.call(this, property);
      };
    }

    // Internal: A set of primitive types used by `isHostType`.
    var PrimitiveTypes = {
      'boolean': 1,
      'number': 1,
      'string': 1,
      'undefined': 1
    };

    // Internal: Determines if the given object `property` value is a
    // non-primitive.
    var isHostType = function (object, property) {
      var type = typeof object[property];
      return type == 'object' ? !!object[property] : !PrimitiveTypes[type];
    };

    // Internal: Normalizes the `for...in` iteration algorithm across
    // environments. Each enumerated key is yielded to a `callback` function.
    forEach = function (object, callback) {
      var size = 0, Properties, members, property;

      // Tests for bugs in the current environment's `for...in` algorithm. The
      // `valueOf` property inherits the non-enumerable flag from
      // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
      (Properties = function () {
        this.valueOf = 0;
      }).prototype.valueOf = 0;

      // Iterate over a new instance of the `Properties` class.
      members = new Properties();
      for (property in members) {
        // Ignore all properties inherited from `Object.prototype`.
        if (isProperty.call(members, property)) {
          size++;
        }
      }
      Properties = members = null;

      // Normalize the iteration algorithm.
      if (!size) {
        // A list of non-enumerable properties inherited from `Object.prototype`.
        members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
        // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
        // properties.
        forEach = function (object, callback) {
          var isFunction = getClass.call(object) == functionClass, property, length;
          var hasProperty = !isFunction && typeof object.constructor != 'function' && isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;
          for (property in object) {
            // Gecko <= 1.0 enumerates the `prototype` property of functions under
            // certain conditions; IE does not.
            if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
              callback(property);
            }
          }
          // Manually invoke the callback for each non-enumerable property.
          for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
        };
      } else if (size == 2) {
        // Safari <= 2.0.4 enumerates shadowed properties twice.
        forEach = function (object, callback) {
          // Create a set of iterated properties.
          var members = {}, isFunction = getClass.call(object) == functionClass, property;
          for (property in object) {
            // Store each property name to prevent double enumeration. The
            // `prototype` property of functions is not enumerated due to cross-
            // environment inconsistencies.
            if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
              callback(property);
            }
          }
        };
      } else {
        // No bugs detected; use the standard `for...in` algorithm.
        forEach = function (object, callback) {
          var isFunction = getClass.call(object) == functionClass, property, isConstructor;
          for (property in object) {
            if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
              callback(property);
            }
          }
          // Manually invoke the callback for the `constructor` property due to
          // cross-environment inconsistencies.
          if (isConstructor || isProperty.call(object, (property = "constructor"))) {
            callback(property);
          }
        };
      }
      return forEach(object, callback);
    };

    // Public: Serializes a JavaScript `value` as a JSON string. The optional
    // `filter` argument may specify either a function that alters how object and
    // array members are serialized, or an array of strings and numbers that
    // indicates which properties should be serialized. The optional `width`
    // argument may be either a string or number that specifies the indentation
    // level of the output.
    if (!has("json-stringify")) {
      // Internal: A map of control characters and their escaped equivalents.
      var Escapes = {
        92: "\\\\",
        34: '\\"',
        8: "\\b",
        12: "\\f",
        10: "\\n",
        13: "\\r",
        9: "\\t"
      };

      // Internal: Converts `value` into a zero-padded string such that its
      // length is at least equal to `width`. The `width` must be <= 6.
      var leadingZeroes = "000000";
      var toPaddedString = function (width, value) {
        // The `|| 0` expression is necessary to work around a bug in
        // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
        return (leadingZeroes + (value || 0)).slice(-width);
      };

      // Internal: Double-quotes a string `value`, replacing all ASCII control
      // characters (characters with code unit values between 0 and 31) with
      // their escaped equivalents. This is an implementation of the
      // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
      var unicodePrefix = "\\u00";
      var quote = function (value) {
        var result = '"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;
        if (isLarge) {
          symbols = value.split("");
        }
        for (; index < length; index++) {
          var charCode = value.charCodeAt(index);
          // If the character is a control character, append its Unicode or
          // shorthand escape sequence; otherwise, append the character as-is.
          switch (charCode) {
            case 8: case 9: case 10: case 12: case 13: case 34: case 92:
              result += Escapes[charCode];
              break;
            default:
              if (charCode < 32) {
                result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                break;
              }
              result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];
          }
        }
        return result + '"';
      };

      // Internal: Recursively serializes an object. Implements the
      // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
      var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
        try {
          // Necessary for host object support.
          value = object[property];
        } catch (exception) {}
        if (typeof value == "object" && value) {
          className = getClass.call(value);
          if (className == dateClass && !isProperty.call(value, "toJSON")) {
            if (value > -1 / 0 && value < 1 / 0) {
              // Dates are serialized according to the `Date#toJSON` method
              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
              // for the ISO 8601 date time string format.
              if (getDay) {
                // Manually compute the year, month, date, hours, minutes,
                // seconds, and milliseconds if the `getUTC*` methods are
                // buggy. Adapted from @Yaffle's `date-shim` project.
                date = floor(value / 864e5);
                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                date = 1 + date - getDay(year, month);
                // The `time` value specifies the time within the day (see ES
                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                // to compute `A modulo B`, as the `%` operator does not
                // correspond to the `modulo` operation for negative numbers.
                time = (value % 864e5 + 864e5) % 864e5;
                // The hours, minutes, seconds, and milliseconds are obtained by
                // decomposing the time within the day. See section 15.9.1.10.
                hours = floor(time / 36e5) % 24;
                minutes = floor(time / 6e4) % 60;
                seconds = floor(time / 1e3) % 60;
                milliseconds = time % 1e3;
              } else {
                year = value.getUTCFullYear();
                month = value.getUTCMonth();
                date = value.getUTCDate();
                hours = value.getUTCHours();
                minutes = value.getUTCMinutes();
                seconds = value.getUTCSeconds();
                milliseconds = value.getUTCMilliseconds();
              }
              // Serialize extended years correctly.
              value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                // Months, dates, hours, minutes, and seconds should have two
                // digits; milliseconds should have three.
                "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                // Milliseconds are optional in ES 5.0, but required in 5.1.
                "." + toPaddedString(3, milliseconds) + "Z";
            } else {
              value = null;
            }
          } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
            // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
            // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
            // ignores all `toJSON` methods on these objects unless they are
            // defined directly on an instance.
            value = value.toJSON(property);
          }
        }
        if (callback) {
          // If a replacement function was provided, call it to obtain the value
          // for serialization.
          value = callback.call(object, property, value);
        }
        if (value === null) {
          return "null";
        }
        className = getClass.call(value);
        if (className == booleanClass) {
          // Booleans are represented literally.
          return "" + value;
        } else if (className == numberClass) {
          // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
          // `"null"`.
          return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
        } else if (className == stringClass) {
          // Strings are double-quoted and escaped.
          return quote("" + value);
        }
        // Recursively serialize objects and arrays.
        if (typeof value == "object") {
          // Check for cyclic structures. This is a linear search; performance
          // is inversely proportional to the number of unique nested objects.
          for (length = stack.length; length--;) {
            if (stack[length] === value) {
              // Cyclic structures cannot be serialized by `JSON.stringify`.
              throw TypeError();
            }
          }
          // Add the object to the stack of traversed objects.
          stack.push(value);
          results = [];
          // Save the current indentation level and indent one additional level.
          prefix = indentation;
          indentation += whitespace;
          if (className == arrayClass) {
            // Recursively serialize array elements.
            for (index = 0, length = value.length; index < length; index++) {
              element = serialize(index, value, callback, properties, whitespace, indentation, stack);
              results.push(element === undef ? "null" : element);
            }
            result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
          } else {
            // Recursively serialize object members. Members are selected from
            // either a user-specified list of property names, or the object
            // itself.
            forEach(properties || value, function (property) {
              var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
              if (element !== undef) {
                // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                // is not the empty string, let `member` {quote(property) + ":"}
                // be the concatenation of `member` and the `space` character."
                // The "`space` character" refers to the literal space
                // character, not the `space` {width} argument provided to
                // `JSON.stringify`.
                results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
              }
            });
            result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
          }
          // Remove the object from the traversed object stack.
          stack.pop();
          return result;
        }
      };

      // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
      JSON3.stringify = function (source, filter, width) {
        var whitespace, callback, properties, className;
        if (typeof filter == "function" || typeof filter == "object" && filter) {
          if ((className = getClass.call(filter)) == functionClass) {
            callback = filter;
          } else if (className == arrayClass) {
            // Convert the property names array into a makeshift set.
            properties = {};
            for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
          }
        }
        if (width) {
          if ((className = getClass.call(width)) == numberClass) {
            // Convert the `width` to an integer and create a string containing
            // `width` number of space characters.
            if ((width -= width % 1) > 0) {
              for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
            }
          } else if (className == stringClass) {
            whitespace = width.length <= 10 ? width : width.slice(0, 10);
          }
        }
        // Opera <= 7.54u2 discards the values associated with empty string keys
        // (`""`) only if they are used directly within an object member list
        // (e.g., `!("" in { "": 1})`).
        return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
      };
    }

    // Public: Parses a JSON source string.
    if (!has("json-parse")) {
      var fromCharCode = String.fromCharCode;

      // Internal: A map of escaped control characters and their unescaped
      // equivalents.
      var Unescapes = {
        92: "\\",
        34: '"',
        47: "/",
        98: "\b",
        116: "\t",
        110: "\n",
        102: "\f",
        114: "\r"
      };

      // Internal: Stores the parser state.
      var Index, Source;

      // Internal: Resets the parser state and throws a `SyntaxError`.
      var abort = function() {
        Index = Source = null;
        throw SyntaxError();
      };

      // Internal: Returns the next token, or `"$"` if the parser has reached
      // the end of the source string. A token may be a string, number, `null`
      // literal, or Boolean literal.
      var lex = function () {
        var source = Source, length = source.length, value, begin, position, isSigned, charCode;
        while (Index < length) {
          charCode = source.charCodeAt(Index);
          switch (charCode) {
            case 9: case 10: case 13: case 32:
              // Skip whitespace tokens, including tabs, carriage returns, line
              // feeds, and space characters.
              Index++;
              break;
            case 123: case 125: case 91: case 93: case 58: case 44:
              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
              // the current position.
              value = charIndexBuggy ? source.charAt(Index) : source[Index];
              Index++;
              return value;
            case 34:
              // `"` delimits a JSON string; advance to the next character and
              // begin parsing the string. String tokens are prefixed with the
              // sentinel `@` character to distinguish them from punctuators and
              // end-of-string tokens.
              for (value = "@", Index++; Index < length;) {
                charCode = source.charCodeAt(Index);
                if (charCode < 32) {
                  // Unescaped ASCII control characters (those with a code unit
                  // less than the space character) are not permitted.
                  abort();
                } else if (charCode == 92) {
                  // A reverse solidus (`\`) marks the beginning of an escaped
                  // control character (including `"`, `\`, and `/`) or Unicode
                  // escape sequence.
                  charCode = source.charCodeAt(++Index);
                  switch (charCode) {
                    case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                      // Revive escaped control characters.
                      value += Unescapes[charCode];
                      Index++;
                      break;
                    case 117:
                      // `\u` marks the beginning of a Unicode escape sequence.
                      // Advance to the first character and validate the
                      // four-digit code point.
                      begin = ++Index;
                      for (position = Index + 4; Index < position; Index++) {
                        charCode = source.charCodeAt(Index);
                        // A valid sequence comprises four hexdigits (case-
                        // insensitive) that form a single hexadecimal value.
                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                          // Invalid Unicode escape sequence.
                          abort();
                        }
                      }
                      // Revive the escaped character.
                      value += fromCharCode("0x" + source.slice(begin, Index));
                      break;
                    default:
                      // Invalid escape sequence.
                      abort();
                  }
                } else {
                  if (charCode == 34) {
                    // An unescaped double-quote character marks the end of the
                    // string.
                    break;
                  }
                  charCode = source.charCodeAt(Index);
                  begin = Index;
                  // Optimize for the common case where a string is valid.
                  while (charCode >= 32 && charCode != 92 && charCode != 34) {
                    charCode = source.charCodeAt(++Index);
                  }
                  // Append the string as-is.
                  value += source.slice(begin, Index);
                }
              }
              if (source.charCodeAt(Index) == 34) {
                // Advance to the next character and return the revived string.
                Index++;
                return value;
              }
              // Unterminated string.
              abort();
            default:
              // Parse numbers and literals.
              begin = Index;
              // Advance past the negative sign, if one is specified.
              if (charCode == 45) {
                isSigned = true;
                charCode = source.charCodeAt(++Index);
              }
              // Parse an integer or floating-point value.
              if (charCode >= 48 && charCode <= 57) {
                // Leading zeroes are interpreted as octal literals.
                if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                  // Illegal octal literal.
                  abort();
                }
                isSigned = false;
                // Parse the integer component.
                for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                // Floats cannot contain a leading decimal point; however, this
                // case is already accounted for by the parser.
                if (source.charCodeAt(Index) == 46) {
                  position = ++Index;
                  // Parse the decimal component.
                  for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                  if (position == Index) {
                    // Illegal trailing decimal.
                    abort();
                  }
                  Index = position;
                }
                // Parse exponents. The `e` denoting the exponent is
                // case-insensitive.
                charCode = source.charCodeAt(Index);
                if (charCode == 101 || charCode == 69) {
                  charCode = source.charCodeAt(++Index);
                  // Skip past the sign following the exponent, if one is
                  // specified.
                  if (charCode == 43 || charCode == 45) {
                    Index++;
                  }
                  // Parse the exponential component.
                  for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                  if (position == Index) {
                    // Illegal empty exponent.
                    abort();
                  }
                  Index = position;
                }
                // Coerce the parsed value to a JavaScript number.
                return +source.slice(begin, Index);
              }
              // A negative sign may only precede numbers.
              if (isSigned) {
                abort();
              }
              // `true`, `false`, and `null` literals.
              if (source.slice(Index, Index + 4) == "true") {
                Index += 4;
                return true;
              } else if (source.slice(Index, Index + 5) == "false") {
                Index += 5;
                return false;
              } else if (source.slice(Index, Index + 4) == "null") {
                Index += 4;
                return null;
              }
              // Unrecognized token.
              abort();
          }
        }
        // Return the sentinel `$` character if the parser has reached the end
        // of the source string.
        return "$";
      };

      // Internal: Parses a JSON `value` token.
      var get = function (value) {
        var results, hasMembers;
        if (value == "$") {
          // Unexpected end of input.
          abort();
        }
        if (typeof value == "string") {
          if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
            // Remove the sentinel `@` character.
            return value.slice(1);
          }
          // Parse object and array literals.
          if (value == "[") {
            // Parses a JSON array, returning a new JavaScript array.
            results = [];
            for (;; hasMembers || (hasMembers = true)) {
              value = lex();
              // A closing square bracket marks the end of the array literal.
              if (value == "]") {
                break;
              }
              // If the array literal contains elements, the current token
              // should be a comma separating the previous element from the
              // next.
              if (hasMembers) {
                if (value == ",") {
                  value = lex();
                  if (value == "]") {
                    // Unexpected trailing `,` in array literal.
                    abort();
                  }
                } else {
                  // A `,` must separate each array element.
                  abort();
                }
              }
              // Elisions and leading commas are not permitted.
              if (value == ",") {
                abort();
              }
              results.push(get(value));
            }
            return results;
          } else if (value == "{") {
            // Parses a JSON object, returning a new JavaScript object.
            results = {};
            for (;; hasMembers || (hasMembers = true)) {
              value = lex();
              // A closing curly brace marks the end of the object literal.
              if (value == "}") {
                break;
              }
              // If the object literal contains members, the current token
              // should be a comma separator.
              if (hasMembers) {
                if (value == ",") {
                  value = lex();
                  if (value == "}") {
                    // Unexpected trailing `,` in object literal.
                    abort();
                  }
                } else {
                  // A `,` must separate each object member.
                  abort();
                }
              }
              // Leading commas are not permitted, object property names must be
              // double-quoted strings, and a `:` must separate each property
              // name and value.
              if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                abort();
              }
              results[value.slice(1)] = get(lex());
            }
            return results;
          }
          // Unexpected token encountered.
          abort();
        }
        return value;
      };

      // Internal: Updates a traversed object member.
      var update = function(source, property, callback) {
        var element = walk(source, property, callback);
        if (element === undef) {
          delete source[property];
        } else {
          source[property] = element;
        }
      };

      // Internal: Recursively traverses a parsed JSON object, invoking the
      // `callback` function for each value. This is an implementation of the
      // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
      var walk = function (source, property, callback) {
        var value = source[property], length;
        if (typeof value == "object" && value) {
          // `forEach` can't be used to traverse an array in Opera <= 8.54
          // because its `Object#hasOwnProperty` implementation returns `false`
          // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
          if (getClass.call(value) == arrayClass) {
            for (length = value.length; length--;) {
              update(value, length, callback);
            }
          } else {
            forEach(value, function (property) {
              update(value, property, callback);
            });
          }
        }
        return callback.call(source, property, value);
      };

      // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
      JSON3.parse = function (source, callback) {
        var result, value;
        Index = 0;
        Source = "" + source;
        result = get(lex());
        // If a JSON string contains multiple tokens, it is invalid.
        if (lex() != "$") {
          abort();
        }
        // Reset the parser state.
        Index = Source = null;
        return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
      };
    }
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}(this));

},{}],44:[function(_dereq_,module,exports){
module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}

},{}]},{},[1])
(1)
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/data/element.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var util = require('../../../util')
  , element = require('../../element')
  , utilHash = require('../../../util/hash')
  , vObject = require('../../../object')

/*this file has nothing to do with the networkdata Class
  it only reads out models for elements so you can make a subscription
*/

function sortField( filter, obj ) {
  if( filter.sort && filter.sort.field ) 
  {
    var sort = { $:{} }
    sort.$[filter.sort.field] = true
    util.merge( obj, sort )
  }

  return obj
}

exports.parseData = function( val, fromtargets, logger ) {


  //important for unSubscribe ???
    // console.log('LETS PARSE DATA!'.cyan.inverse , val, JSON.stringify(fromtargets))
  

  // console.log('LETS PARSE DATA!'.cyan.inverse , val, JSON.stringify(fromtargets))

  if(!val) return
    // console.log('LETS PARSE DATA!2'.cyan.inverse , val, JSON.stringify(fromtargets))

  var subsobj = {}
    , f = val._filter
    , targets = fromtargets || val.__sub

  if (targets) {
    // console.log('targets', targets)

    if (f) {
      if(!subsobj['*']) subsobj['*']=[]
      subsobj['*'].push([
        util.clone(f, {subsObj:true, fn:true, type:true})
        , sortField(f, fromtargets || { $: targets })
      ])

    // console.log( 'IM DOING SELECTS parseDatelex', subsobj )
    //TEMPFIX!!!!
    for(var i in subsobj['*'][1] ) {
      //wel ff de fields ook doen prob

      subsobj[i] = subsobj['*'][1][i]
    }
    delete subsobj['*']

    } else {
          // console.log( 'targets IM DOING SELECTS parseDatelex', targets )

      subsobj = targets
    }
  } else {
        // console.log('LETS PARSE DATA!4'.cyan.inverse , val, JSON.stringify(fromtargets))

    // console.warn( 'cant\'t find target -- lets do stuff!', val  )
    //TODO:guard voor als het het niet wil -- mischiend door _subs zoeken

    // if(val._path) {
    //   console.log(val._path)
    // }

    //no tragets dont do anything?
  }

  // console.log('RESULT!', JSON.stringify(subsobj))

  return subsobj
}

function setFlag( obj, string, flag, field, val, from, elem ) {



  var nonCloudDataBindings
    , fromKey

    , beTripppin


  if( from ) {
    fromKey = from._name !== void 0 ? from._name : from

    if( from instanceof vObject) {

      //tegenover gestelde bij
      // if(from.__t === 4) {
        // if(from._val && from._val.cloud) {
          //haal juist field weg
        // }
      // } 
      // console.log('FROM!', from._name, from._path )
      fromKey = from._name
    }

    if(from instanceof Array && from[1]) {
      // console.log('be tripping!', from)
      //   fromKey = from[1] && from[1]._name

      // beTripppin = from[0]._name

    }

  }

  var dd = elem && from && ( elem._d || elem.checkParent('data', true) )

  // if(beTripppin) {
  //   console.log(dd, fromKey, beTripppin)
  // }


  if (field === 'collection') {
    var obj2

    if (flag.filter && flag.filter.val!==true) 
    {
      //dit nog handelen op refs
      obj2 = {}


      //ENABLE FOR SELECTION
      // if (string === true) {

      //   string = '*'
      // } else {

      //   string = string + '.*'
      // }
      var f = flag.filter.raw

        // console.log( 'SET FLAG', arguments )


  // console.log( 'FIELD!:', field , 'FROM:', from,  string.split('.'), string )

      var arr = util.path(obj, string.split('.'), [])

      arr.push( 
        [f, {
          $: sortField(f,obj2)
        }]
      )

      //obj, path, val, overwrite

      //TEMPFIX!!!!
      var temp = util.path( obj, string.split('.'), {}, true )
      for(var i in arr[arr.length-1][1] ) {
        //wel ff de fields ook doen prob

        temp[i] = arr[arr.length-1][1][i]
      }
      arr = temp

          // console.log( 'IM DOING SELECPS COL COL!', arr )


    } else {

      var f = string === true ? '$' : string + '.$'
        , p =  f.split('.')

        , specialFix

      if( dd && dd[ fromKey ] ) 
      {
        nonCloudDataBindings = true
        if( p[0] === fromKey ) 
        {
          p.shift()
          nonCloudDataBindings = false
        }
      }

      if( nonCloudDataBindings ) 
      {
        if(specialFix) {
          obj.specialFix = fromKey
          if(beTripppin) {
            obj.specialFix = [ fromKey, beTripppin ]
          }
          obj2 = util.path(obj, p , {})
          readModel(flag.element._val instanceof element ? flag.element._val : flag.element._val.base, obj2 )
        }
      } 
      else 
      {
        obj2 = util.path(obj, p , {})
        readModel(flag.element._val instanceof element ? flag.element._val : flag.element._val.base, obj2 )
      }

    }

                  // console.log(  'xxxXX1112222XXxx', string, obj ) //, fromKey, elem._d, elem.data, elem.checkParent('data', true) )


  } else {

    if( dd && dd[ fromKey ] ) 
    {
      nonCloudDataBindings = true
    }

    if ( string instanceof Array ) 
    {
      for (var i in string) 
      {
        if( nonCloudDataBindings )
        {
          //TODO: this is a tempfix
          // console.log('NON cloud bindings', string, string[i])
          if( string[i] instanceof Array ) {
            // console.log('!@!@!@')
            string[i] = string[i][0]
          }
          string[i] = string[i].split('.')
          if( string[i][0] === fromKey ) 
          {
            string[i].shift()
            util.path( obj, string[i], true )
          }
        }
        else
        {
          //TODO: this is a tempfix
          // console.log('OBJ:' , obj, 'STRING[i]:', string[i], 'STRING:', string, fromKey)
           if( string[i] instanceof Array ) {
            // console.log('2!@!@!@')
            string[i] = string[i][0]
          }
          util.path(obj, string[i].split('.'), true)
        }
      }
    } 
    else if ( string !== true && typeof string === 'string' ) 
    {
              // console.log(  'xxxXXXXxx', string, obj ) //, fromKey, elem._d, elem.data, elem.checkParent('data', true) )

      if( nonCloudDataBindings )
      {
        // console.log( nonCloudDataBindings , 'NONCLOUD')
          string = string.split('.')
          if( string[0] === fromKey ) 
          {
            string.shift()
              // console.log( 'FIELD!:222222', string )

            if(string.length > 0) util.path( obj, string, true )
          }
          // console.log( nonCloudDataBindings , 'NONCLOUD', string, obj )
      }
      else
      {
        // console.log(  'xxxxx', string, obj ) //, fromKey, elem._d, elem.data, elem.checkParent('data', true) )
        util.path( obj, string.split('.'), true )
      }
    } 
    else 
    {
      // console.log('----> 2'.inverse, string, obj, flag, field)
      // console.error('xxxxxx')
      // obj['__#__'] = true
      // obj = true;
      // console.log('!!!',obj, parent);
      // obj['#'] = true;
    }
    

  }
}

function store( obj, flag, field, val, from, elem ) {

  // console.log('STORE', arguments )

  if (flag instanceof Array) {
    for (var i = 0, l = flag.length; i < l; i++) {
      setFlag(obj, flag[i]._flag.data[2], flag, field, val, from, elem )

    }
  } else {
        // console.log('------>'.red,flag)

    setFlag(obj, flag._flag.data[2], flag, field, val, from, elem )
  }
}

function readModel( elem, obj, val, from , ignorefield) {

  // console.log( 'lets read model'.yellow.inverse, val && val._path || 'no valPath', from && from._path || 'no fromPath' , val, elem, obj, val, from )
    //hier moet het gecombineerd worden met een value waar het aan gebind is!

  if (elem.model && (elem.model.flags||elem.model.subscription||elem.model.field)) {
    
    // if(obj) console.log('XXX121212XXX COLLECTION',  elem.model.field && elem.model.field.val )
    // console.log('SET SORTFIELD! 2.12', JSON.stringify(obj,false,2))

    var a = obj
      , field

      //["users", "U_ba3215a1b1038a70", "navigation", "episode"] 
    // console.log( '\n\n\n\n\n-------->', elem.model.field && elem.model.field.val, elem.model.parsing && !elem.model.parsed  )

    if(ignorefield) {
      // console.log('STOP!'.inverse, obj, elem.model.field && elem.model.field.val, from, from && from._path)
      // debugger
    }
    //TODO: compare arrays 
    else if(elem.model.field && elem.model.field.val && !elem.model.parsing && !elem.model.parsed && ( typeof from !== 'string' || elem.model.field.val === from  )  ) {
      field = elem.model.field.val.split('.')
      

      if( elem.model.field.val === from ) {

        // console.log('HERE ITS INTERESTING DO'.cyan.inverse, elem.model.field.val , from )

      } else {

        // console.log('DO IT FIELD'.red.inverse, 1, elem.model.field, elem.model.field.val)

        a = util.path(obj,field,{},true)
      }

    } else {
      if(from && elem.model.field && elem.model.field.val !== from) {
        // console.log('!!!!!!!0000 filed !== filed'.red.inverse, elem.model.field.val, from )

        return void 0

      }
    }

    // console.log('SET SORTFIELD! 2.13', JSON.stringify(obj,false,2), from)

    if(elem.model && elem.model.subscription ) {

      //ook hier ofcourse!!!!

      var subs = elem.model.subscription.raw
      if(subs === true) {
        if(field) {
          // console.log('SET SORTFIELD! 2.13.1',field, JSON.stringify(obj,false,2))
                // console.log('---->', field, obj,field.slice(0,-1))
          if(field.length>1) {
          a = util.path(obj,field,true,true)
          } else {
            obj[field[0]] = true
            a = true
          }
        }
        // console.log('???'.green.bold.inverse,elem.model.subscription.raw, a, obj)
      } else {
        // console.log('SET SORTFIELD! 2.13.2',a, elem.model.subscription, elem.model.subscription.raw, JSON.stringify(obj,false,2))
        var sub = elem.model.subscription.raw
        if( typeof sub === 'string' ) {
          var old = sub
          sub = {}
          sub[old] = true
        }
        util.merge(a,sub)
      }

      // console.log('SET SORTFIELD! 2.14', JSON.stringify(obj,false,2))
    }

    for (var i in elem.model.flags) {
        // console.log('STORE --- go', elem.model.flags[i], elem.model.flags )

        //store

      store(a, elem.model.flags[i], i, val, from, elem )

      // if(obj.specialFix) {
      //   console.log('SP{EC')
      // }

      // console.log('SET SORTFIELD! 2.15', i, JSON.stringify(obj,false,2))
    }

  }

  if( !elem.model || !elem.model.block || !elem.model.block.val ) {

    for (
      var children = elem.children
      , child
      , child$ = 0
      , children$len = children && children.length
      ; child$ < children$len
      ; child = child$++
    ) {
      child = children[child$]
      if ((!child.model || (!child.model.inherit || child.model.inherit.val!==false))
        && !child._col && !child.data || child._dfrom) { //dit kan beter!
        readModel(child, obj, val, from )
      //elem, obj, val, from , ignorefield, field
      }
    }
  }

  if(obj['__#__']) {
    // obj.$ = true
    // util.merge(obj, obj['__#__'])
    delete obj['__#__']
  }


  // if(obj.specialFix) {
  //   console.log('HEREHEREHERE', JSON.stringify(obj,false,2) )
  // }

  // for(var i in obj) {
  //   if(obj[i]&&obj[i].specialFix) {
      
  //     console.log('HERE!!!', obj.specialFix, JSON.stringify(obj,false,2))

  //   }
  // }

  //elem, obj, val, from , ignorefield, field

  return elem.model && elem.model.block && elem.model.block.val==='all' ? void 0 : obj
}

util.define(element, 'getModel', function( val, from, ignorefield ) {

  // if(ignorefield) console.log( 'lets get that model!'.green.inverse , val, 'FROM!', from && from._path, this )
  var subscription = readModel( this, {}, val, from, ignorefield )
  // console.log( 'subscribs!!!!'.blue, subscription )
  // if(ignorefield) {
  //   console.log('IGNOREFIELD', subscription)
  //   // debugger
  // }
  // if(subscription.specialFix) {
  //   console.log('HJEEE', subscription.specialFix, JSON.stringify(subscription,false,2))
  //   if(subscription.specialFix instanceof Array) {



  //   }
  // }

  // for(var i in subscription) {
  //   if(subscription[i]&&subscription[i].specialFix) {
      
  //     console.log('HERE!!!',i, subscription.specialFix, JSON.stringify(subscription,false,2))

  //   }
  // }

  return !util.empty( subscription ) ? subscription : null
})
},{"../../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../../util/hash":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/hash.js","../../element":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/element/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/data/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var object = require('../../../object')
  , data = require('../../../data')
  , Value = require('../../../value')
  , util = require('../../../util')
  , vigour = require('../../../')
  , _networkdata = module.exports = exports = vigour.Networkdata = data.new({
      mixed: 4, //mischien niet mixed
      merge: true
    })
  , _sub = 'subscribe'
  , _unsub = 'un' + _sub
  , _listener = 'Listener'
  , _al = 'add' + _listener
  , _rl = 'remove' + _listener
  , _proto = object.prototype
  , _protoAddListener = _proto[_al]
  , _protoRemoveListener = _proto[_rl]
  , _checkSubscription = function( field, val ) {
      var a = this
      while (a && a.__t === 4) {
        if(a.__block) return
        a = a._val
      }
      // console.log(field, a)
      if((a instanceof _networkdata) && a[field]) a[field](val, this)
    }
  , V = require('../../../')

_networkdata.prototype._blacklist.push('_subs','_complete')
//'_' + _sub, '_' + _unsub, we dont use there now
// _subscribe(_sub);
// _subscribe(_unsub);


//TODO: fix mark!!!!!!!!!!! mark:true
util.define(_networkdata,
  'get', function( val, set, notself, stamp ) {
    
    // IM GETTING! ["users", "u_ba3215a1b1038a70", "mtvData", "NL", "nl", "shows"] undefined
    //obj, path, val, overwrite, writeHandler, vobj, stamp, noupdate, self, uid, i
    // var bla = (val instanceof Array) ? val : String(val).split('.')
    // console.log('IM GETTING!', bla, val, set, this, this.path)

    //TODO: Always give me the non-from is possible
    // console.warn('Get -- self is now on on defualt should become something different!')
    //obj, path, val, overwrite, writeHandler, vobj, stamp, noupdate, self,
    //conditional self

    return this.path
      ( (val instanceof Array) ? val : String(val).split('.')
      , set !== void 0 ? set : {}
      , false
      , false
      , false
      , stamp || false //stampy
      , true
      , !notself
      )

  },
  // '_changevobj', function(val,stamp) {
  //   console.error(val,stamp)
  //   return _changevobj.apply(this,arguments)
  // },
  // '_hook', function(val, param) {
  //   for (var i in param) {
  //     this['_' + i] = param[i];
  //   }
  // }, //dont use this now so lets add when used
  _al, function( val ) {
    // console.log('LETS GO!', _sub, val, !!this[_sub])
    if(this[_sub]) this[_sub](val)
    _protoAddListener.apply( this, arguments )
  },
  _rl, function( val, mark ) {
    if (this._listeners && this[_unsub]) {
      // console.log('REMOVE _L'.red.inverse, mark)
      this[_unsub]( mark )
    }
    _protoRemoveListener.apply( this, arguments )
  }
);

//-------DATA---------
util.define(data, 
  _al, function(val) {
    // console.log('0--------->',val)
    if(!this.__block) _checkSubscription.call(this, _sub, val);
    _protoAddListener.apply(this, arguments);
  },
  _rl, function(val, mark) {
     // console.error('2.1 REMOVE _L', mark, val, _unsub)
    if(!this.__block) _checkSubscription.call(this, _unsub, mark);
    _protoRemoveListener.apply(this, arguments);
  }
);

//-------Value---------

// util.define(Value, //test is this impacts performance to much
//   _al, function(val) {
//     // console.log('0--------->',val)
//     if(!this.__block) _checkSubscription.call(this, _sub, val);
//     _protoAddListener.apply(this, arguments);
//   },
//   _rl, function(val, mark) {
//      // console.error('2.1 REMOVE _L', mark, val, _unsub)
//     if(!this.__block) _checkSubscription.call(this, _unsub, mark);
//     _protoRemoveListener.apply(this, arguments);
//   }
// );





},{"../../../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../../../data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","../../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/url.js":[function(require,module,exports){
var util = require('../../util')
  , Value = require('../../value')
  , config = require('../../util/config')
  , process = require('../../value/flags/process')
  , raf = require('../../browser/animation/raf')
  , postpone = require('../../browser/events/util').postpone
  , ua = require('../../browser/ua')

module.exports = exports = new Value()
//TODO: .params /w listeners!

config.hashUrl = ua.device === 'tv' && ua.platform === 'lg' ? false :  config.hashUrl

// history.pushState({}, '','' )
// history.go(0)
// history.back()




var pstate = !config.hashUrl //= !window.DEBUG$ && window.history && window.history.pushState
  , cnt = 0
  , timedState
  , state = postpone ( pstate ? function(val) {
      //load current params as well
      //same goes for the other
      //we could add a delay here!
      href = window.location.href

      void(0)

      window.history.pushState( {}, val, val.replace(/ /g, '+').replace(/^#\//, '').toLowerCase() )
    } : function(val) {
      exports.block = true
      window.location.href = '#/' + val.replace(/ /g, '+').toLowerCase()
      exports.block = false
    } )
  , _set = Value.prototype._set
  , parse = function() {
      if (!pstate) 
      {
        var url = window.location.href.split('#')
        var params = ''
        if( url && url.length === 1 ) {
          params = query( url[0] )
          url[0] = url[0].replace(params, '')
          // window.location = '#/'+params
          // return = 'x'
        }
        // console.log( url, ( url.length > 1 ? url[1].replace(/\+/g, ' ') : ' ' ).slice(1), params )
        // +params
        return ( url.length > 1 ? url[1].replace(/\+/g, ' ') : ' ' ).slice(1)+params
      } else 
      {
        
        var url = window.location.href
        if( url ) {
          params = query( url )
          url = url.replace(params, '')
          // window.location = '#/'+params
          // return = 'x'
        }

        return String(window.location.href)
               .replace(String(window.location.origin) + '/', '')
               .replace(/^#\//, '')
               .replace(/\+/g, ' ')
               || ''
      }
    }
  , query = function( str ) {
      if(!str) str = parse() || ''
      var arr = str.split('?')
        , len = arr.length
      str = len > 1 && arr[ arr.length - 1 ] ? '?'+arr[ arr.length - 1 ] : ''
      return str
    }

exports.parse = parse

//TODO: back btn hijack (event hijack add random param)
//TODO: use raf for updates
exports.val = { 
  string: function() {
    var str = parse()
    return str.replace( query( str ), '' )
  },
  params: {
    val: function() { return query() },
    defer:function( update, args ) {

      this.clearCache() //maybe not?

      var val = this.val
        , params
        , nestedparams
        , c

      if( val && val!==this._last ) {
        this._last = val
        params = val.slice(1).split('&')
        nestedparams = {}
        for( var i in params ) {
          c = params[i].split('=')
          if( c.length>1 ) 
          {
            nestedparams[c[0]] = c[1]
          }
          else
          {
            void(0)
          }
        }
        this.val = nestedparams
      }
      raf(function() { update() })
    }
  },
  transform: function( v, cv ) {
    return cv
  },
  defer: function( update, args ) {
    if( args[1] && args[1][0] === 'u' ) 
    {
      this.clearCache()
      raf( function() {
        update()
      })
    } else 
    {
      this.clearCache()
      var a = ( typeof args[0] === 'string'  ? args[0] : args[0] && args[0].val || this.val )
      if(a) 
      {
        exports.blocks = cnt

        state( a + this.params.val )
      }
      return  true
      //TODO: update( true ) blocks all consecutive updates
    }
  }
}

function urlEvent(e) {
  var stamp

  if( !config.hashUrl || exports.blocks!==cnt ) 
  {
    cnt++
    stamp = 'u'+cnt
    exports.clearCache()
    exports.string.clearCache() //maybe not clear on string?
    // exports._update( parse(), 'url' )
    exports.string._update( exports.string.val , stamp )
    exports.params._update( exports.string.val, stamp )
    exports._update( exports.string.val, stamp )
    exports._lstamp = null

  } else {
    cnt++
  }
}

util.define( exports, 'update', function() {
  urlEvent()
})

util.define( exports.string, 'raw', {
  get:function() {
    return this.val.replace( / /g, '+' )
  }
})

if( config.hashUrl )
{
  window.onhashchange = urlEvent
}
else
{
  window.onpopstate = urlEvent
}
//TODO: add popstate


},{"../../browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js","../../browser/events/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/events/util.js","../../browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../util/config":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js","../../value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../../value/flags/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js":[function(require,module,exports){
/*
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
/*
/*
  useragent sniffing is never used for feature detection, for a multi-screen app you do need information about the device also when running in the browser
  has fields V.ua.platform, device, browser and version. This implementation when compiled, is only 700 bytes
*/
var util = require('../util')
/**
 * test
 * search for regexps in the userAgent
 * fn is a on succes callback
 * check http://www.useragentstring.com/ to test for userAgents
 * @method
 */
, test = exports.test = function( _ua, fn ) {

  for
  ( var tests = util.arg( arguments, 1 )
      , i = tests.length - 1
      , query = tests[i][0]
    ; query !== true && !new RegExp( query ).test( _ua )
    ; query = tests[--i][0]
  )

  ;if( fn.slice || fn.call( this, query, tests[i] ) )
  {
    this[fn] = tests[i][1]
  }

}
, parse = exports.parse = function(_ua, obj) {

  if( !_ua )
  {
    obj = exports
    _ua = typeof navigator !== 'undefined'
        ? navigator.userAgent.toLowerCase()
        : 'no navigator'
  }

  _ua = _ua.toLowerCase()

  if( !obj ) obj = {}

  // _ua = 'webos; linux - large screen'

  var _ff = 'firefox'
    , _android = 'android'
    , _mobile = '.+mobile'
    , _webkit = 'webkit'
    , _ps = 'playstation'
    , _xbox = 'xbox'
    , _linux = 'linux'
    , _castDetect = 'crkey'
    , _chromecast = 'chromecast'
    , _tablet = 'tablet'
    , _windows = 'windows'
    , _phone = 'phone'
    , _iphoneVersion

  test.call
  ( obj
  , _ua
  , function( query, arr ) {

      obj.browser = arr[2] || query

      var _v = _ua.match
      ( new RegExp
        ( '((([\\/ ]version|'
        + arr[0]
        + '(?!.+version))[\/ ])| rv:)([0-9]{1,4}\\.[0-9]{0,2})'
        )
      )

      obj.version = _v ? Number( _v[4] ) : 0
      obj.prefix = arr[1]
      //TODO: add prefix for opera v>12.15;
      //TODO: windows check for ie 11 may be too general;
    }
  , [ true, _webkit ]
  , [ '\\(windows', 'ms', 'ie' ]
  , [ 'safari', _webkit ]
  , [ _ff, 'Moz' ]
  , [ 'opera', 'O' ]
  , [ 'msie', 'ms', 'ie' ]
  , [ 'chrome|crios\/', _webkit, 'chrome' ]
  )

  /**
  * platform detection
  */
  test.call
  ( obj
  , _ua
  , 'platform'
  , [ true, _windows ]
  , [ _linux, _linux ]
  , [ 'lg.{0,3}netcast', 'lg' ] //TODO:propably need to add more!
  , [ _ff + _mobile, _ff ]
  , [ 'mac os x', 'mac' ]
  , [ 'iphone|ipod|ipad', 'ios' ]
  , [ _xbox, _xbox ]
  , [ _ps, _ps ]
  , [ _android, _android ]
  , [ _windows, _windows ]
  , [ _castDetect, _chromecast ]
  , [ 'smart-tv;|;samsung;smarttv', 'samsung' ] //SmartTV2013
  )

  /**
  * device detection
  */
  test.call
  ( obj
  , _ua
  , 'device'
  , [ true, 'desktop' ]
  , [ _windows + '.+touch|ipad|' + _android,  _tablet ]
  , [ 'iphone|(' + _android + _mobile + ')|(' + _ff + _mobile + ')|' + _windows + ' phone|iemobile'
    , _phone
    ]
  , [ _xbox + '|' + _ps, 'console' ]
  , [ 'tv|smarttv|googletv|appletv|hbbtv|pov_tv|netcast.tv|webos.+large', 'tv' ]
  , [ _castDetect, _chromecast ]
  , [ 'amazon-fireos', _tablet ]
  )

  //TODO: amazon firetv and phone
    // alert(window.innerWidth*window.innerHeight +  '  '+ 414 * 736)
  
  //414 × 736
  var iphone6plus = 414 * 736
  if
  ( obj.platform === _android
    && !util.isNode
    && obj.device === _phone
    && window.innerWidth*window.innerHeight > iphone6plus
    // && ~_ua.indexOf('crosswalk')
  )
  {
    obj.device = 'tablet'
  }

  return obj
}

if( !util.isNode ) 
{ 
  parse()
  //TODO: this is very ugly, try to find a better solution
  if( window.__ua__ ) 
  {
    for( var field in window.__ua__ )
    {
      exports[field] = window.__ua__[field]
    }
  }
}

/**
 * prop
 * re-writes js properties to their css counterpart
 * e.g. webkitTransform --> -webkit-transform
 * now its commented since its not nessecary yet
 * @method
 */
// this.prop = function(str) {
//  return str.replace(this.prefix,'-'+this.prefix+'-').toLowerCase();
// }

},{"../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/base.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var  data = require('./')
  , base = require('../base')
  , util = require('../util')
  , flags = require('../value/flags/data')
  , vObject = require('../object')

exports.extend = util.extend( function(base, extensions, modelblacklist) {

  // var _blacklist = util.add(['flags', 'ref', 'parse', 'parsing'], modelblacklist),
    var _compare = util.compareArrays,
    methods = {
      _dUpdate: function(obj, val, stamp, from, remove, added, oldval, instances, argx1, argx2 ) {
        // if(window.here) console.log('X',stamp)
        if (this.model) {

          //$ndata

          //TODO: very dirty fix get rid of this!
          if( obj === '$ndata' ){
            val = from
            stamp = remove
            from = added
            remove = oldval
            added = instances
            oldval = argx1
            instances = argx2
            // console.log('!@#!@#!@#!@#@!#!@#!@#!@#'.red.inverse)
          }

          // var non = 0
          //   , cnt = 0
          // for( var i in arguments ) 
          // {
          //   cnt++
          //   if(!arguments[i]) {
          //     non++
          //   }
          //   console.log( arguments[i] )
          // }
          // if(non === cnt) {
          //   alert('no args')
          //   return true
          // }

          if (!this._d && this.parent) {
            var p = this.parent;
            while (!this._d && p) {
              if (p._d) {
                // console.error('SET DATA')
                this._dSet(p._d, true);
              } else {
                p = p.parent;
              }
            }
          }
          var t = this,
            model = t.model,
            f = model.flags,

            // f = model ? model.flags : false be carefull with updates in values that have data

            path = t._d && t._d._path || [],
            name = (from || (from = (t._d && t._d._updateOrigin)) && !(from === t._d && (from = false))) && from.updatePath,
            fromPath = from && from._path,
            method = function(i, field) {

              var select, pass, fr, lfield;
              // if( field._flag[2].__t) {
              //multiple flags!
                // console.log('FLAG'.inverse, name, field._flag)
              // }

              if(!field._flag.data) {
                void(0)
                return
              }
              field = field._flag.data[2];

               // console.log('DATA UPDATE'.magenta.inverse,
               //      'obj:', obj
               //    , 'val:', val
               //    , 'stamp:', stamp
               //    , 'from:', from
               //    , 'remove:', remove
               //    , 'added:', added
               //    , 'field:', field
               //  )
              // var test = (i==='text' && field === 'real.duration')
              // if(test) console.log(field,i)
              // if(test) pass = true

              if (i === 'collection' && t._colFilter) return
              //if not own colfilter --> handle yourself!;
              // if data has changed change colfilter adn send update
              //be carefull /w changes!; too crude

              if (field === true) {
                // console.log('PASS'.inverse,name)
                pass = true;
              } else if (field.pop) {
                // console.log(name,'???')

                // console.log('--->',field, field.pop)

                field = field.concat();

                for (var j = field.length - 1; j >= 0; j--) {
                  if (!lfield !== void 0) {
                    select = util.get(t._d, field[j]);
                    if (select !== void 0) {
                      lfield = true;
                      // break;
                    }
                  }
                  field[j] = field[j].split('.');
                }
              } else {

                // console.log('DO DO!'.inverse,name, t._d && t._d._updateOrigin)

                // console.log(name, path, select, obj, val, stamp, from, remove, added, oldval, instances)

                field = field.split('.')

                select = util.get(t._d, field)

                if(!select && t._d && t._d.from && field ) {
                  // console.log('NO SELECT'.red.inverse, t._d )
                  select = util.get(t._d.from, field)
                  // if(select) {
                  //   // console.log('FOUND SELECT'.green.inverse, select)
                  // }
                } 

                if(select && from && from.__t === 4) lfield = true //test dit of het alles slow maakt

                // if(test&&select) console.log(select._val)
              }

              if (!pass && from) {

                // console.log('testing....?', name, from, select, lfield)
                // if(test) console.log(name, select, lfield, from);

                fr = true;
                var fromFrom

                if ( from === select || ( fromFrom = from.from ) === select ) {
                  pass = true;
                } else {
                  if (t._d._filter && select && select._ancestor(from)) {
                    pass = true;
                    //field ook voor arrays!;
                  } else if (lfield) {

                    // console.log('got lfield!!!!')

                    for (var n = 0; n < field.length; n++) {
                      if (name && _compare(name, field[n]) || field[n][0] === name[0] && util.get(val, field[n].concat().shift())) 
                      {
                        fr = false;
                        break;
                      } 
                      else if ((_compare(path.concat(field[n]), fromPath) || _compare(field[n], fromPath))) 
                      {
                        fr = false;
                        break;
                      } 
                      else {

                        // console.log('HERE?'.cyan.inverse, '\n\n\n', select.from.raw, 'val:'
                        //   , val, 'field:', field, 'fn', field[n], 'n:', n, 'check field:', val && val[field[n]], 'ref:', val.from)
                        // console.log('coming trugh', select && from._val !== null && val, field[n]
                        //   , select && from._val !== null && val && ( val[field[n]] || val.__t === 4 && val.from[field[n]] ) )
                        //TODO: need to add more gaurding for val.$path check if this is cloud and ref

                        if(select && from._val !== null && val && (val[field[n]] || val.$path || val.__t === 4) && (select._ancestor(from) || select.from._ancestor( fromFrom )  ))  //
                        {
                          // console.log(val, field);
                          pass = true;
                          break;
                        }
                      }
                    }
                  } else {

                    // console.log( '---', select, val, field, from, 'fromPath:' , fromPath )

                    if(val===null) {
                      // if(DEBUG$) t._d.DEBUG$log('data/base ---> ERROR val is null  --->'+t._d._removed )
                    } else if(val === void 0) {
                      // TODO: handle this
                      // console.log('\n\n\n undefined what to do now?', arguments,this)
                      // debugger
                      // pass = true
                      // pass = true
                    } else if (name && _compare(name, field) || field[0] === name && name[0] && util.get(val, field.concat().shift())) {
                      fr = false;
                    } else if (path && (_compare(path.concat(field), fromPath) || _compare(field, fromPath))) {
                      fr = false;
                    } else if (select && (val[field[0]]) && select._ancestor(from)) {
                      // console.log(val, field);
                      pass = true
                    } else if( t.__checkKeys__ ) {
                      // console.log('lets checkj the keys!')
                      // console.log( field, name, val, path, select, val[field[0]], from, this )
                      for( var key$ in t.__checkKeys__ ) {
                        if( field === t.__checkKeys__[key$] || field[0] === t.__checkKeys__[key$] ) {
                          // console.log('maybe??!!@#!@', i, t.__checkKeys__[key$])
                          pass = true
                        }
                      }

                    }
                    // console.log(val, field[0], from);
                  }
                }
              }
              // pass = true;
              // console.log('PASS>>>>>>>>>?'.magenta.inverse, pass ? 'OK!'.green.inverse : 'NO!'.red.inverse  
              //   , 'val:'.blue, val
              //   , 'obj._path:'.blue, obj && obj._path
              //   , 'field:'.blue, field
              //   , 'fromPath:'.blue, fromPath
              //   , 'from:'.blue, from
              //   , 'select'.blue, select
              //   )

              // if(! pass && )

              // pass = true

              //|| remove 

              if (pass || remove || (instances || remove || select !== void 0) && ( !fr || remove === 1)) {

                // console.log('updating!'.cyan.inverse, i, val, instances, remove, select, fr, from)
                // debugger
                //stamp meegeven????
                // console.log( 'FROM!!!!!'.green.inverse, from )
                // console.l
                t[i]._update(val, false, from, remove, added, oldval, !instances, t);
                return true;
              }
            };
          //----------------------------------------------------
            //add advanced models (like on website)
            //not tested and still pretty broken
           var parser = function() {
            if (this._d) {
              var t = this, a
              //if added or first run
              t.model.val //set _caller
              // if (model.field) console.log('????', this.field, model.field)

              if (model.field) a = util.get(t._d, model.field.val)
              if (model._val) a = model._val.call(t, a || t._d) || a
              if (a && t._d !== a) {
                model.parsing = true
                if(model.field) model.parsed = model.field.val
                this._dSet(a)
                model.parsing = false
              }
            }
          }
          parser.call(t)
          if (instances) t.eachInstance(parser, 'model')
          //----------------------------------------------------

          //----------------------------------------------------
          if (f && (instances || t._d)) {
            for (var i in f) {
              if (!f[i].__t) {
                for (var j = 0, l = f[i].length; j < l; j++) {
                  if (method(i, f[i][j])) {
                    break;
                  }
                }
              } else {
                method(i, f[i]);
              }
            }
          }
          //----------------------------------------------------

         if(this.model.complete) this.model.complete._val.call(this,data)

        }
      },
      _dSet: function(val, dfrom) {


        // if(val) {
        //   console.log('_Dset'.cyan.inverse, val._path, dfrom)
        // }
        // if(this.model._flag && this.model._flag.process && !this.__processing) {
        //   console.log('oo2')
        //   this.model._update()
        //   return
        // }

        if(this.model._flag && this.model._flag.defer  && !this.__processing) {
          this.__pFlag = [ val, dfrom ]
          return
        }

        //dfrom moet niet nog een subscribe doen! -- als het goed is is zn parent al subscribed

        if (this._d && this._d.__t) this._d.removeListener(true, this)
        this._d = val
        if (dfrom) this._dfrom = true
        this._dListen()



        return val;
      },
      _dListen: function() {

          // console.log('HEEEEEE', this.model)

        // if(this.model._flag && this.model._flag.process && !this.__processing) {
        //   console.log('oo2')
        //   this.model._update()
        //   return
        // }

        //hier gaan we s fftjes werken met each

        // this._dfrom = true;
        var _this

        if (this.model && this._d && this._d instanceof vObject) 
        { //this model maybe not nessecary?

          // console.log('----->'.cyan.inverse, this._d )

          this._d.addListener([this._dUpdate, this])

          _this = this
          
          //hier filteren op cloudData --- ook werken vanuit remove!!!
            //never do for cloud data
         
          if( !this._d.cloud )
          {
            this._d.each(
              function() { 
                _this.__checkKeys__ = true

                if(this.__t === 4 ) this.addListener([ _this._dUpdate, _this, '$ndata', this ]) 
              }
            )
          }
          //eventueel .val gebruiken voor Values *awesjume!
          //eventueel hier dingen adden aan model

        } 
        else if( this.model && this._d ) 
        {
          for( var key in this._d ) 
          {
            if(!this.__checkKeys__ || this.__checkKeys__ === true) this.__checkKeys__ = []
            if( this._d[key] instanceof vObject )
            {
              if(!this.__checkKeys__.push) {
                void(0)
                void(0)
              }
              this.__checkKeys__.push( key )
              this._d[key].addListener([ this._dUpdate, this, '$ndata', key ])
            }
          }

        }
      },
      updateData: function(instances) {

        if(this.model._flag && this.model._flag.defer && !this.__processing) {
          // console.log('oo2')
          this.__pFlagU = [ instances ]
          this.model._update()
          return
        }
        // console.log('!DOIT updateData'.cyan.inverse)

        this._dUpdate(this._d, void 0, false, false, false, false, false, instances)
      }
    },
    extend = function(i) {
      base.extend({
        name: i,
        type: false,
        value: (extensions && extensions[i]) ? function() {
          methods[i].apply(this, arguments);
          extensions[i].apply(this, arguments);
        } : methods[i]
      });
    };
  for (var i in methods) {
    extend(i)
  }
  base.extend({
    name: 'model',
    cache: false,
    set: function(val) {

      if(this.__pFlag || this.__pFlagU) {
        /*
        TODO: test defer better!!!
        this.__pFlag = [ val ]
        this.__pFlagU = [ true ]
        */
        this.__processing = true
        this.model.parsing = false
        if(this.__pFlag) {
          this._dSet.apply(this,this.__pFlag)
        }
        //subscribe helemaal fucked met field erbij
        if(this.__pFlagU) {
          this.updateData.apply(this,this.__pFlagU)
        }
        this.__pFlagU = null
        this.__pFlag = null
        this.__processing = null
      }

      if(val.field && val.field.val !== val.parsed) {
        var a = val.parsed && val.parsed.split('.')
          , parent
        val.parsed = null
        if(this._d) {
          parent = this._d
          if(a) {
            for(var i = a.length-1; i >=0 ; i--) {
              parent = parent._parent
            }
            if(parent) {
              this._dSet(parent)
              this.updateData(true)
            }
          } else {
            this.updateData(true)
          }
        }
        val.parsed = null
      }
    },
    remove: function() {
      if( this._d )
      {
        if ( this._d.__t )  
        {
          this._d.removeListener( void 0, this )

          if( !this._d.cloud )
          {
            var _this = this
            this._d.each(
              function() { 
                // _this.__checkKeys__ = true
                if(this.__t === 4 ) this.removeListener( void 0, _this ) 
              }
            )
          }

        }
        else if( this.__checkKeys__) 
        {
          for( var key$ in this.__checkKeys__ ) 
          {
            if( this._d[this.__checkKeys__[key$]] instanceof vObject )
            {
              this._d[this.__checkKeys__[key$]].removeListener( void 0, this )
            }
          }
        }
      }
    }
    // parent: function(parent) {
    //   if( parent.data && (!parent.parent || parent.parent.data!==parent.data) ) {

    //     console.error('WTF?')

    //     this.data = parent.data
    //   }
    // }
  }, {
    name: 'data',
    type: false,
    set: function(val) {
        // console.log('?',val)
      if( this._d === val ) return

      // if(!this.model) this.model = {} //dit met het nooit setten van fmodel scheel op show al 3/9 subscriptions
      //nu nog shared subs maken -- 'shows' (ook meteen process) en dan word thet als het goed is nog een stuk minder
    
      // this.model = {} //pas op met deze
      // console.log('?2')

      if( this.model._flag && this.model._flag.defer ) {
        this.__pFlag = [ val ]
        this.__pFlagU = [ true ]
        // console.log('!@#!@#!@# OOOO'.red)
        return
      }

      // console.error('!!!!!MODEL -- dit moet zoveel mogelijk gereduced', this.model)

      this.model.parsing = false
      this._dSet(val)

      //subscribe helemaal fucked met field erbij
      this.updateData(true)

    },
    get: function() {
      return this._d
    }
  })
})
},{"../base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js","../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../value/flags/data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/data.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/conditions.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Marcus Besjes, marcus@vigour.io
 */
var data = require('./'),
  cnt = 0,
  handleTest = module.exports = function(test, subsObj) {
    // console.error('handleTest!', test)
    if (test instanceof Object) {
      var keys = Object.keys(test);
      if (keys.length === 1) {
        var key = keys[0]
          , valcheck = handleField(key, test[key], subsObj)
          
        return subsObj._check = function(doc){
          // console.log('TESTING', test, doc && doc.raw)
          // console.log('checking for key', key)
          var val = getValue(doc)
          return valcheck(val)
        }
      } else {
        var list = [],
          key;
        for (var k = 0, l = keys.length; k < l; k++) {
          key = keys[k];
          list.push(handleField(key, test[key], subsObj));
        }
        return subsObj._check = makeAND(list);
      }
    } else {
      return subsObj._check = function(doc) {
        return getValue(doc) === test;
      }
    }
  }

function handleField(key, value, subsObj) {
  // console.warn('handleField [', key, '] value', value)
  var check;
  switch (key) {
    case '$not':
      if (value instanceof Object) {
        var follow = handleTest(value, subsObj);
        check = function(doc) {
          return follow(doc) === false;
        };
      } else {
        check = function(doc) {
          return doc !== value;
        };
      }
      break;
    case '$ne':
      check = function(doc) {
        return doc !== value;
      };
      break;
    case '$and':
      var list = makeList(value, subsObj);
      check = makeAND(list);
      break;
    case '$nand':
      var list = makeList(value, subsObj);
      check = function(doc) {
        for (var i = 0, l = list.length; i < l; i++) {
          if (list[i](doc) === false) return true;
        }
        return false;
      };
      break;
    case '$or':
      var list = makeList(value, subsObj);
      check = function(doc) {
        for (var i = 0, l = list.length; i < l; i++) {
          if (list[i](doc)) return true;
        }
        return false;
      };
      break;
    case '$nor':
      var list = makeList(value, subsObj);
      check = function(doc) {
        for (var i = 0, l = list.length; i < l; i++) {
          if (list[i](doc)) return false;
        }
        return true;
      };
      break;
    case '$every':
      subsObj.set('$', {});
      // subsObj.$ = {
      //   _up: subsObj
      // };
      var follow = handleTest(value, subsObj.$);
      check = function(doc) {
        if (doc && doc.__t < 3) {
          var result = true;
          doc.each(function() {
            if (!follow(this)) return !(result = false);
          });
          return result;
        } else {
          return false;
        }
      };
      break;
    case '$nevery':
      subsObj.set('$', {});
      // subsObj.$ = {
      //   _up: subsObj
      // };
      var follow = handleTest(value, subsObj.$);
      check = function(doc) {
        if (doc && doc.__t < 3) {
          var result = false;
          doc.each(function() {
            if (!follow(this)) return result = true;
          });
          return result;
        } else {
          return true;
        }
      };
      break;
    case '$':
    case '$some':
      subsObj.set('$', {});
      // subsObj.$ = {
      //   _up: subsObj
      // };
      if (value instanceof Object) {
        var follow = handleTest(value, subsObj.$);
        check = function(doc) {
          if (doc && doc.__t < 3) {
            var found;
            doc.each(function() {
              if (follow(this)) return found = true;
            });
            return found || false;
          }
          return false;
        };
      } else {
        check = function(doc) {
          if (doc && doc.__t < 3) {
            var found;
            doc.each(function() {
              if (this === value) return found = true;
            });
            return found || false;
          }
          return false;
        };
        subsObj.$._check = function(doc) {
          return doc === value;
        };
      }
      break;
    case '$nsome':
      subsObj.set('$', {});
      // subsObj.$ = {
      //   _up: subsObj
      // };
      var follow = handleTest(value, subsObj.$);
      check = function(doc) {
        if (doc && doc.__t < 3) {
          var result = true;
          doc.each(function() {
            if (follow(this)) return !(result = false);
          });
          return result;
        } else {
          return true;
        }
      };
      break;
    case '$lt':
      check = function(doc) {
        // console.log('burk lt', doc, value)
        return doc < value;
      };
      break;
    case '$lte':
      check = function(doc) {
        return doc <= value;
      };
      break;
    case '$gt':
      check = function(doc) {
        return doc > value;
      };
      break;
    case '$gte':
      check = function(doc) {
        return doc >= value;
      };
      break;
    case '$contains':
      var regex = new RegExp(value, 'i');
      check = function(doc) {
        return regex.test(doc);
      };
      break;
    case '$ncontains':
      var regex = new RegExp(value, 'i');
      check = function(doc) {
        return !regex.test(doc);
      };
      break;
    case '$containsall':
      break;
    case '$ncontainsall':
      break;
    case '$has':
      check = function(doc) {
        return doc && doc[value] !== void 0;
      };
      break;
    case '$nhas':
      check = function(doc) {
        return !doc || doc[value] === void 0;
      };
      break;
    case '$exists':
      check = function(doc) {
        return (doc !== void 0 && doc !== null) === value;
      };
      break;
    case '$in':
      check = function(doc) {
        for (var i = 0, l = value.length; i < l; i++) {
          if (doc === value[i]) return true;
        }
        return false;
      };
      break;
    case '$nin':
      check = function(doc) {
        for (var i = 0, l = value.length; i < l; i++) {
          if (doc === value[i]) return false;
        }
        return true;
      };
      break;
    case '$regex':
      check = function(doc) {
        return value.test(doc);
      }
      break;
    default:
      if (value instanceof Object) {
        var dsubsObj = subsObj[key];

        if (dsubsObj) {
          // console.log('already made that dsubsObj with key', key);
          // dsubsObj._up = subsObj
        } else {
          subsObj.set(key, {});
          dsubsObj = subsObj[key];
        }
        var follow = handleTest(value, dsubsObj);

        check = function(doc) {
          // console.log('TESTING: check OBJECT', doc && doc.raw || doc, 'for field', key)
          doc = getField(doc, key)

          // console.log('wups', doc && doc.raw || doc)
          return follow(doc);
        };
      } else {
        check = function(doc) {
          doc = getField(doc, key)
          
          // doc = getValue(doc)
          // console.log('TESTING: check VALUE', doc && doc.raw || doc, value, doc === value)
          return doc === value;
        };
        subsObj.set(key, {});
        subsObj[key]._check = check
        // subsObj[key] = {
        //   _up: subsObj,
        //   _check: function(doc) {
        //     return doc === value;
        //   }
        // };
      }

  }
  return subsObj ? subsObj._check = check : check;
}

function makeList(arr, subsObj) {
  var list = [];
  for (var i = 0, l = arr.length; i < l; i++) {
    list.push(handleTest(arr[i], subsObj));
  }
  return list;
}

function makeAND(list, subsObj) {
  return function(doc) {
    var val = getValue(doc);
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i](val) === false) return false;
    }
    return true;
  };
}

function getValue(thing){
  var val = thing && thing.from && thing.from.val
  return val !== void 0 ? val : thing
  
}
function getField(thing, field){
  // console.error('getField field', field, 'from', thing && thing.raw || thing)
  thing = getValue(thing)
  return thing ? getValue(thing[field]) : void 0
}
},{"./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var V = require('vigour-js'),
  object = require('vigour-js/object'),
  util = require('vigour-js/util');

module.exports = exports = V.Data = object.new();
exports.prototype._blacklist.push('__sub','__block');
util.define(exports, '_hook', function(val, obj) {
  if (obj.subscription) {
    this.__sub = obj.subscription;
    delete obj.subscription;
  }
  if(obj.block) {
    this.__block = true
    delete obj.block
  }
});


},{"vigour-js":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/selection.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Marcus Besjes, marcus@vigour.io
 */

var conditions = require('./conditions')
  , utilHash = require('../util/hash')
  , VObject = require('../object')
  , util = require('../util')

/**
 * Selection
 * Class extention for selection / filtering functionality
 * @Class
 */

exports.SubsObj = VObject.new()
exports.SubsObj.prototype._blacklist.push( '_root'
                                         , '_check'
                                         , '_sort'
                                         , '_uid'
                                         )

exports.extend = util.extend(function(base){

  base.prototype._blacklist.push( '_filter'
                                , '_uid'
                                , '_hash'
                                , '_indexCache'
                                , '_subscnt'
                                )

  var _update = base.prototype._update
    , _hook = base.prototype._hook
    , _remove = base.prototype.remove

  util.define( base
    , 'remove', function() {
        var l
        if(this._filter && (l = this.length)){
          for(var i = 0; i < l; i++)
            delete this[i]
        }
        return _remove.apply(this, arguments)
      }
    , 'filter', {
        get: function() {
          return this._filter
        },
        set: function(val) {
          // console.log('new filter \n from --->', this._filter, '\n to ---->'
          //            , val
          //            )
          this._filter = val //moet ook werken als data nog geen selection is
          this._build(undefined, true)
          _update.call( this, void 0, this.stamp(), void 0, false
                      , false, void 0
                      )
        }
      }
    , '_hook', function(val, filter) {
        if (_hook) {
          _hook.call(this, val, filter)
        }
        if (!util.empty(filter) && val) {
          var selection = this
          selection._subscnt = 0
          selection._filter = filter

          selection._hash = utilHash(val._path + JSON.stringify(
            [ filter.condition
            , filter.range
            , filter.sort
            ])
          )
          //!only nessecary serverside!
          if (!selection._uid) selection._uid = selection._hash
        };
      }
    , '_build', function(val, noupdate) {
        var selection = this
        
        if (!val) val = selection._val
        if(!val) return
        if (selection.length) selection._clear() 

        var list = []
          , itemsHandler = this._itemsHandler
          , filter = selection._filter
          , subsObj = filter.subsObj || new exports.SubsObj({}, selection)
          , stamp = this.stamp()
          , sort, item

        if (val.__t === 4 && !val._filter) {
          val = val.from;
        }

        if (filter.sort) {
          if (typeof filter.sort === 'string') {
            filter.sort = {
              field: filter.sort
            }
          }
          sort = filter.sort
          if (!sort.fn) {
            if (!sort.type) sort.type = 'string'
            sort.fn = sortMakers[sort.type](sort)
          }
          subsObj.path(sort.field.split('.'), {}).set('_sort', true)
        }
        // console.log('building?!')
        if (filter.condition) {
          // console.log('found condition', filter.condition)
          var pcnt = 0
            , rcnt = 0
          var check = filter.check 
                 || ( filter.check = conditions( filter.condition
                                               , subsObj
                                               )
                    )
          filter.subsObj = subsObj
          val.each(function(f) {
            item = this
            if (itemsHandler) itemsHandler(item, subsObj, selection)
            if (check(item)) {
              pcnt++
              list.push(item)
            } else if (selection._has(item) !== void 0) {
              // console.log('-------- > removed from selection by condition:'
              //             , item.raw
              //             )
              unstoreIndex(item, selection)
              if(!noupdate){
                _update.call(selection, item, stamp, selection, item, false, null)
              }
              rcnt++
            } else { 
              rcnt++
            }
          })
          // console.log('ran condition: passed:', pcnt, 'rejects:', rcnt)
        } else {
          val.each(function() {
            if (itemsHandler) itemsHandler(this, subsObj, selection)
            list.push(this)
          })
        }

        filter.subsObj = subsObj

        if (sort && list.length > 1) {
          list.sort(filter.sort.fn)
        }

        var i, item

        var range = filter.range
        if (range) {
          if (!(range instanceof Array)) {
            range = filter.range = [0, filter.range]
          }
          if (list.length) {
            var newlist = list.splice(range[0], range[1])
            for (i = list.length; item = list[--i];) {
              if(selection._has(item) !== void 0){
                unstoreIndex(item, selection)
                // if(!noupdate){
                //   _update.call(selection, item, stamp, selection, item, false
                //               , null
                //               )
                // }
                
              }
            }
            list = newlist
          }
        }

        for (var i = list.length, item; item = list[--i];) {
          selection[i] = item
          var isnew = selection._has(item) === void 0
          storeIndex(item, selection, i)
          // if (isnew) {
          //   if(!noupdate){
          //     console.log('doing update wickeds')
          //     _update.call(selection, item, stamp, selection, false, item, null)  
          //   }
          // }
        }
        selection.length = list.length
      }
    , '_update', function(val, stamp, from, remove, added, oldval) {

        if (this._filter) {
           // if(window.here) console.log('hups _update on selection!')

          var selection = this
            , upath = selection.updatePath

          if (upath[0] !== void 0) {
            var shortpath = upath.length === 1
              , itemremove = shortpath && remove
              , item = itemremove ? selection._lfrom : selection.val[upath[0]]
              , relevant

            if (selection._val._filter) {
              if (selection._val._has(item) === void 0) {
                if (selection._has(item) !== void 0) {
                  selection._checkItem(item, false, val, stamp)
                }
                return
              }
            }
            var hint = itemremove ? false : (shortpath && added) ? void 0 : upath

            if (selection._checkItem(item, hint, val, stamp) === true) {
              _update.apply(selection, arguments)
            }
          } else {
            // console.log('hit on selection itself?!')
            if (!from) {
              // console.log('\n>>>>>> hit on selection itself (V.Data)')
              if (remove) {
                if (selection.length) selection._clear()              
              }else{
                selection._build()
              }
            }
            _update.apply(this, arguments)
          }
        } else {
           // if(window.here) console.log('hups _update on selection!',this)
           // console.log('SELECT', this, arguments, this._path)
          _update.apply(this, arguments)
        }
      }
    , '_has', function(item) {
        var indexCache = item._indexCache
          , uid = this._uid
          , ic

        if (indexCache && uid && (ic = indexCache[uid])) {
          return ic[0]
        }
      }
    , '_clear', function() {
        var self = this
        self.each(function(f) {
          self[f] = void 0
          delete self[f]
        })
        self.length = 0
      }
    , '_checkItem', function(item, hint, val, stamp) {
        if(!item) { return }
        // console.log('_checkItem!', item.raw, hint)
        var selection = this
          , from = item
          , filter = selection._filter
          , sort = filter.sort
          , range = filter.range
          , ranged = range && !(  range[0] === 0 
                               && range[1] >= selection._val.length 
                               || selection.length < range[1] - range[0]
                               )
          , removed = hint === false || item._removed
          , added, index, isin
          , result = isin = (index = selection._has(item)) !== void 0

        var check = filter.check
          , pass = removed 
                   ? false 
                   : (!ranged && hint === 1) 
                     ? isin 
                     : !check || check(item)

        // console.log('================ checkitem in', selection._path)             
        // console.log('isin', isin, 'pass', pass, 'result', result)
        // console.log('---------- checked item', pass)
        // console.log('removed?', removed)
        // console.log('ranged? (pass == already in)', (!ranged && hint === 1), isin)
        // console.log('ok time for checking', check)
        // console.log('conditions', filter.condition)
        // console.log('check?', check && check(item))
        // console.log('----------')
        
        if (isin !== pass) {
          if (isin) {
            result = 1
            unstoreIndex(item, selection)
            removed = item
            var mark
            while (mark = selection[++index]) {
              selection[index - 1] = mark
              storeIndex(mark, selection, index - 1)
            }

            var end = index - 1
            selection[end] = null
            delete selection[end]

            var replacement
            if (ranged) {
              if (sort) {
                selection._val.each(function() {
                  if (  selection._has(this) === void 0 
                     && (!selection[end] || sort.fn(this, selection[end]) < 0) 
                     && (!check || check(this))
                     ) {
                    replacement = selection[end] = this
                  }
                })
              } else {
                selection._val.each(function() {
                  if ( selection._has(this) === void 0 
                     && (!check || check(this))
                     ) {
                    return replacement = selection[end] = this
                  }
                })
              }
            }
            if (!replacement) {
              selection.length--
            } else {
              storeIndex(replacement, selection, index - 1)
              added = replacement
            }
          } else {
            var newindex
            if (sort) {
              var sortfn = sort.fn
              if (selection.length) {
                selection.each(function(f) {
                  if (sortfn(item, this) < 0) {
                    return newindex = f
                  }
                })
              }
              if (newindex !== void 0) {
                result = 1
                newindex = Number(newindex)
                storeIndex(item, selection, newindex)
                added = item
                if (ranged) {
                  removed = selection[selection.length - 1]
                  unstoreIndex(removed, selection)
                } else {
                  this.length++
                }
                var index = selection.length - 2
                while (index >= newindex) {
                  storeIndex(selection[index], selection, index + 1)
                  selection[index + 1] = selection[index--]
                }
                selection[newindex] = item
              } else if (!ranged) {
                result = 1
                newindex = selection.length++
                selection[newindex] = item
                storeIndex(item, selection, newindex)
                added = item
              }
            } else if (!ranged) {
              result = 1
              newindex = selection.length++
              selection[newindex] = item
              storeIndex(item, selection, newindex)
              added = item
            }
          }
        } else if (isin && sort) {
          // console.log('isin + sort! resort?')
          if (hint.length && sort.field) {
            if (~sort.field.indexOf('.')) {
              var sortpath = sort.field.split('.')
              if (!util.compareArrays(hint.slice(1), sortpath)) {
                return result
              }
            } else {
              if (hint[1] !== sort.field) return result
            }
          }

          var newindex
          selection.each(function(f) {
            if (f != index) {
              var s = sort.fn(item, this)
              if (s === -1) {
                if (f == index + 1) return true
                newindex = f < index ? f : f - 1
                return true
              } else if (f >= index + 1 && s === 0) {
                return true
              } else if (f > index) {
                newindex = f
              }
            }
          });
          // console.log('newindex', newindex)
          if (newindex !== void 0) {
            result = 1
            var tmp
            if (index > newindex) {
              while (index > newindex) {
                tmp = selection[index] = selection[--index]
                if (tmp) storeIndex(tmp, selection, index + 1)
              }
            } else {
              while (index < newindex) {
                tmp = selection[index] = selection[++index]
                if (tmp) storeIndex(tmp, selection, index - 1)
              }
            }
            selection[newindex] = item
          }

          var end = selection.length - 1

          if (  ranged 
             && (newindex == end || newindex === void 0 
             && index == end)
             ) {
            var replaced
            selection._val.each(function() {
              if (  selection._has(this) === void 0 
                 && sort.fn(this, item) === -1 
                 && (!check || check(this))
                 ) {
                if (!replaced) replaced = item
                selection[end] = item = this
              }
            })
            storeIndex(item, selection, end)
            if (replaced) {
              unstoreIndex(replaced, selection)
              removed = replaced
              added = item
              result = 1
            }
          } else if (newindex !== void 0) {
            storeIndex(item, selection, Number(newindex))
          }

        }
        if (result === 1) {
          // console.log('update from _checkItem!')
          selection.__update(val, stamp, from, removed, added)
        }
        return result
      }
    )

})

var storeIndex = exports.storeIndex = function(item, selection, index) {
  // console.log('storeIndex! item', item._name, '@', index)
  var indexCache = item._indexCache
    , ic
  if (indexCache) {
    ic = indexCache[selection._uid]
    if (ic) {
      ic[1] = ic[0]
      ic[0] = index
    } else {
      indexCache[selection._uid] = [index]
    }
  } else {
    item._indexCache = {}
    item._indexCache[selection._uid] = [index]
  }
}

var unstoreIndex = exports.unstoreIndex = function(item, selection) {
  var indexCache = item._indexCache
  if (indexCache) {
    var ic = indexCache[selection._uid]
    ic[1] = ic[0]
    ic[0] = void 0
  }
}

var sortMakers = {
  number: function(sort) {
    var field = sort.field
    return function(a, b) {
      var va = a[field] && a[field].val
        , vb = b[field] && b[field].val
      if (va === void 0 || vb === void 0) {
        return va === vb 
               ? 0 
               : va === void 0 
                 ? 1 
                 : -1
      }
      return sort.order 
             ? (va - vb) * -1 
             : va - vb
    }
  },
  string: function(sort) {
    var field = sort.field
    if (~field.indexOf('.')) {
      var path = field.split('.')
      return function(a, b) {
        a = getDotFieldVal(a, path)
        b = getDotFieldVal(b, path)
        if (a === void 0 || b === void 0) {
          return a === b 
                 ? 0 
                 : a === void 0 
                   ? 1 
                   : -1
        }
        var re = a > b 
                 ? 1 
                 : a === b 
                   ? 0 
                   : -1
        return sort.order ? re * -1 : re
      }
    } else {
      return function(a, b) {
        a = getFieldVal(a, field)
        b = getFieldVal(b, field)
        var weakA = a === void 0 || a === null
          , weakB = b === void 0 || b === null
        if (weakA || weakB) {
          return a === b ? 0 : weakA ? 1 : -1
        }
        var re = a > b 
                 ? 1 
                 : a === b 
                   ? 0 
                   : -1
        return sort.order ? re * -1 : re
      }
    }
  }
}

function getFieldVal(obj, field) {
  var v = obj.val
  return v && v[field] && v[field].val
}

function getDotFieldVal(obj, field) {
  var v = obj.path(field)
  return v && v.val
}

function putSort(path) {
  var obj = part = {}
  for (var i = 0, l = path.length; i < l; i++) {
    part = part[path[i]] = {
      _up: part
    }
  }
  part._sort = true
  return obj
}

},{"../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../util/hash":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/hash.js","./conditions":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/conditions.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js":[function(require,module,exports){
//V only used as a reference now...
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/colors/colors.js":[function(require,module,exports){
/*
colors.js

Copyright (c) 2010

Marak Squires
Alexis Sellier (cloudhead)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

var isHeadless = false;

if (typeof module !== 'undefined') {
  isHeadless = true;
}

if (!isHeadless) {
  var exports = {};
  var module = {};
  var colors = exports;
  exports.mode = "browser";
} else {
  exports.mode = "console";
}

//
// Prototypes the string object to have additional method calls that add terminal colors
//
var addProperty = function (color, func) {
  exports[color] = function (str) {
    return func.apply(str);
  };
  String.prototype.__defineGetter__(color, func);
};

function stylize(str, style) {

  var styles;

  if (exports.mode === 'console') {
    styles = {
      //styles
      'bold'      : ['\x1B[1m',  '\x1B[22m'],
      'italic'    : ['\x1B[3m',  '\x1B[23m'],
      'underline' : ['\x1B[4m',  '\x1B[24m'],
      'inverse'   : ['\x1B[7m',  '\x1B[27m'],
      'strikethrough' : ['\x1B[9m',  '\x1B[29m'],
      //text colors
      //grayscale
      'white'     : ['\x1B[37m', '\x1B[39m'],
      'grey'      : ['\x1B[90m', '\x1B[39m'],
      'black'     : ['\x1B[30m', '\x1B[39m'],
      //colors
      'blue'      : ['\x1B[34m', '\x1B[39m'],
      'cyan'      : ['\x1B[36m', '\x1B[39m'],
      'green'     : ['\x1B[32m', '\x1B[39m'],
      'magenta'   : ['\x1B[35m', '\x1B[39m'],
      'red'       : ['\x1B[31m', '\x1B[39m'],
      'yellow'    : ['\x1B[33m', '\x1B[39m'],
      //background colors
      //grayscale
      'whiteBG'     : ['\x1B[47m', '\x1B[49m'],
      'greyBG'      : ['\x1B[49;5;8m', '\x1B[49m'],
      'blackBG'     : ['\x1B[40m', '\x1B[49m'],
      //colors
      'blueBG'      : ['\x1B[44m', '\x1B[49m'],
      'cyanBG'      : ['\x1B[46m', '\x1B[49m'],
      'greenBG'     : ['\x1B[42m', '\x1B[49m'],
      'magentaBG'   : ['\x1B[45m', '\x1B[49m'],
      'redBG'       : ['\x1B[41m', '\x1B[49m'],
      'yellowBG'    : ['\x1B[43m', '\x1B[49m']
    };
  } else if (exports.mode === 'browser') {
    styles = {
      //styles
      'bold'      : ['<b>',  '</b>'],
      'italic'    : ['<i>',  '</i>'],
      'underline' : ['<u>',  '</u>'],
      'inverse'   : ['<span style="background-color:black;color:white;">',  '</span>'],
      'strikethrough' : ['<del>',  '</del>'],
      //text colors
      //grayscale
      'white'     : ['<span style="color:white;">',   '</span>'],
      'grey'      : ['<span style="color:gray;">',    '</span>'],
      'black'     : ['<span style="color:black;">',   '</span>'],
      //colors
      'blue'      : ['<span style="color:blue;">',    '</span>'],
      'cyan'      : ['<span style="color:cyan;">',    '</span>'],
      'green'     : ['<span style="color:green;">',   '</span>'],
      'magenta'   : ['<span style="color:magenta;">', '</span>'],
      'red'       : ['<span style="color:red;">',     '</span>'],
      'yellow'    : ['<span style="color:yellow;">',  '</span>'],
      //background colors
      //grayscale
      'whiteBG'     : ['<span style="background-color:white;">',   '</span>'],
      'greyBG'      : ['<span style="background-color:gray;">',    '</span>'],
      'blackBG'     : ['<span style="background-color:black;">',   '</span>'],
      //colors
      'blueBG'      : ['<span style="background-color:blue;">',    '</span>'],
      'cyanBG'      : ['<span style="background-color:cyan;">',    '</span>'],
      'greenBG'     : ['<span style="background-color:green;">',   '</span>'],
      'magentaBG'   : ['<span style="background-color:magenta;">', '</span>'],
      'redBG'       : ['<span style="background-color:red;">',     '</span>'],
      'yellowBG'    : ['<span style="background-color:yellow;">',  '</span>']
    };
  } else if (exports.mode === 'none') {
    return str + '';
  } else {
    void(0);
  }
  return styles[style][0] + str + styles[style][1];
}

function applyTheme(theme) {

  //
  // Remark: This is a list of methods that exist
  // on String that you should not overwrite.
  //
  var stringPrototypeBlacklist = [
    '__defineGetter__', '__defineSetter__', '__lookupGetter__', '__lookupSetter__', 'charAt', 'constructor',
    'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf', 'charCodeAt',
    'indexOf', 'lastIndexof', 'length', 'localeCompare', 'match', 'replace', 'search', 'slice', 'split', 'substring',
    'toLocaleLowerCase', 'toLocaleUpperCase', 'toLowerCase', 'toUpperCase', 'trim', 'trimLeft', 'trimRight'
  ];

  Object.keys(theme).forEach(function (prop) {
    if (stringPrototypeBlacklist.indexOf(prop) !== -1) {
      void(0);
    }
    else {
      if (typeof(theme[prop]) === 'string') {
        addProperty(prop, function () {
          return exports[theme[prop]](this);
        });
      }
      else {
        addProperty(prop, function () {
          var ret = this;
          for (var t = 0; t < theme[prop].length; t++) {
            ret = exports[theme[prop][t]](ret);
          }
          return ret;
        });
      }
    }
  });
}


//
// Iterate through all default styles and colors
//
var x = ['bold', 'underline', 'strikethrough', 'italic', 'inverse', 'grey', 'black', 'yellow', 'red', 'green', 'blue', 'white', 'cyan', 'magenta', 'greyBG', 'blackBG', 'yellowBG', 'redBG', 'greenBG', 'blueBG', 'whiteBG', 'cyanBG', 'magentaBG'];
x.forEach(function (style) {

  // __defineGetter__ at the least works in more browsers
  // http://robertnyman.com/javascript/javascript-getters-setters.html
  // Object.defineProperty only works in Chrome
  addProperty(style, function () {
    return stylize(this, style);
  });
});

function sequencer(map) {
  return function () {
    if (!isHeadless) {
      return this.replace(/( )/, '$1');
    }
    var exploded = this.split(""), i = 0;
    exploded = exploded.map(map);
    return exploded.join("");
  };
}

var rainbowMap = (function () {
  var rainbowColors = ['red', 'yellow', 'green', 'blue', 'magenta']; //RoY G BiV
  return function (letter, i, exploded) {
    if (letter === " ") {
      return letter;
    } else {
      return stylize(letter, rainbowColors[i++ % rainbowColors.length]);
    }
  };
})();

exports.themes = {};

exports.addSequencer = function (name, map) {
  addProperty(name, sequencer(map));
};

exports.addSequencer('rainbow', rainbowMap);
exports.addSequencer('zebra', function (letter, i, exploded) {
  return i % 2 === 0 ? letter : letter.inverse;
});

exports.setTheme = function (theme) {
  if (typeof theme === 'string') {
    try {
      exports.themes[theme] = require(theme);
      applyTheme(exports.themes[theme]);
      return exports.themes[theme];
    } catch (err) {
      void(0);
      return err;
    }
  } else {
    applyTheme(theme);
  }
};


addProperty('stripColors', function () {
  return ("" + this).replace(/\x1B\[\d+m/g, '');
});

// please no
function zalgo(text, options) {
  var soul = {
    "up" : [
      '̍', '̎', '̄', '̅',
      '̿', '̑', '̆', '̐',
      '͒', '͗', '͑', '̇',
      '̈', '̊', '͂', '̓',
      '̈', '͊', '͋', '͌',
      '̃', '̂', '̌', '͐',
      '̀', '́', '̋', '̏',
      '̒', '̓', '̔', '̽',
      '̉', 'ͣ', 'ͤ', 'ͥ',
      'ͦ', 'ͧ', 'ͨ', 'ͩ',
      'ͪ', 'ͫ', 'ͬ', 'ͭ',
      'ͮ', 'ͯ', '̾', '͛',
      '͆', '̚'
    ],
    "down" : [
      '̖', '̗', '̘', '̙',
      '̜', '̝', '̞', '̟',
      '̠', '̤', '̥', '̦',
      '̩', '̪', '̫', '̬',
      '̭', '̮', '̯', '̰',
      '̱', '̲', '̳', '̹',
      '̺', '̻', '̼', 'ͅ',
      '͇', '͈', '͉', '͍',
      '͎', '͓', '͔', '͕',
      '͖', '͙', '͚', '̣'
    ],
    "mid" : [
      '̕', '̛', '̀', '́',
      '͘', '̡', '̢', '̧',
      '̨', '̴', '̵', '̶',
      '͜', '͝', '͞',
      '͟', '͠', '͢', '̸',
      '̷', '͡', ' ҉'
    ]
  },
  all = [].concat(soul.up, soul.down, soul.mid),
  zalgo = {};

  function randomNumber(range) {
    var r = Math.floor(Math.random() * range);
    return r;
  }

  function is_char(character) {
    var bool = false;
    all.filter(function (i) {
      bool = (i === character);
    });
    return bool;
  }

  function heComes(text, options) {
    var result = '', counts, l;
    options = options || {};
    options["up"] = options["up"] || true;
    options["mid"] = options["mid"] || true;
    options["down"] = options["down"] || true;
    options["size"] = options["size"] || "maxi";
    text = text.split('');
    for (l in text) {
      if (is_char(l)) {
        continue;
      }
      result = result + text[l];
      counts = {"up" : 0, "down" : 0, "mid" : 0};
      switch (options.size) {
      case 'mini':
        counts.up = randomNumber(8);
        counts.min = randomNumber(2);
        counts.down = randomNumber(8);
        break;
      case 'maxi':
        counts.up = randomNumber(16) + 3;
        counts.min = randomNumber(4) + 1;
        counts.down = randomNumber(64) + 3;
        break;
      default:
        counts.up = randomNumber(8) + 1;
        counts.mid = randomNumber(6) / 2;
        counts.down = randomNumber(8) + 1;
        break;
      }

      var arr = ["up", "mid", "down"];
      for (var d in arr) {
        var index = arr[d];
        for (var i = 0 ; i <= counts[index]; i++) {
          if (options[index]) {
            result = result + soul[index][randomNumber(soul[index].length)];
          }
        }
      }
    }
    return result;
  }
  return heComes(text);
}


// don't summon zalgo
addProperty('zalgo', function () {
  return zalgo(this);
});

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/index.js":[function(require,module,exports){

module.exports =  require('./lib/');

},{"./lib/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/index.js":[function(require,module,exports){

module.exports = require('./socket');

/**
 * Exports parser
 *
 * @api public
 *
 */
module.exports.parser = require('engine.io-parser');

},{"./socket":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/socket.js","engine.io-parser":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/lib/browser.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/socket.js":[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var transports = require('./transports');
var Emitter = require('component-emitter');
var debug = require('debug')('engine.io-client:socket');
var index = require('indexof');
var parser = require('engine.io-parser');
var parseuri = require('parseuri');
var parsejson = require('parsejson');
var parseqs = require('parseqs');

/**
 * Module exports.
 */

module.exports = Socket;

/**
 * Noop function.
 *
 * @api private
 */

function noop(){}

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

function Socket(uri, opts){
  if (!(this instanceof Socket)) return new Socket(uri, opts);

  opts = opts || {};

  if (uri && 'object' == typeof uri) {
    opts = uri;
    uri = null;
  }

  if (uri) {
    uri = parseuri(uri);
    opts.host = uri.host;
    opts.secure = uri.protocol == 'https' || uri.protocol == 'wss';
    opts.port = uri.port;
    if (uri.query) opts.query = uri.query;
  }

  this.secure = null != opts.secure ? opts.secure :
    (global.location && 'https:' == location.protocol);

  if (opts.host) {
    var pieces = opts.host.split(':');
    opts.hostname = pieces.shift();
    if (pieces.length) {
      opts.port = pieces.pop();
    } else if (!opts.port) {
      // if no port is specified manually, use the protocol default
      opts.port = this.secure ? '443' : '80';
    }
  }

  this.agent = opts.agent || false;
  this.hostname = opts.hostname ||
    (global.location ? location.hostname : 'localhost');
  this.port = opts.port || (global.location && location.port ?
       location.port :
       (this.secure ? 443 : 80));
  this.query = opts.query || {};
  if ('string' == typeof this.query) this.query = parseqs.decode(this.query);
  this.upgrade = false !== opts.upgrade;
  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
  this.forceJSONP = !!opts.forceJSONP;
  this.jsonp = false !== opts.jsonp;
  this.forceBase64 = !!opts.forceBase64;
  this.enablesXDR = !!opts.enablesXDR;
  this.timestampParam = opts.timestampParam || 't';
  this.timestampRequests = opts.timestampRequests;
  this.transports = opts.transports || ['polling', 'websocket'];
  this.readyState = '';
  this.writeBuffer = [];
  this.callbackBuffer = [];
  this.policyPort = opts.policyPort || 843;
  this.rememberUpgrade = opts.rememberUpgrade || false;
  this.binaryType = null;
  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;

  // SSL options for Node.js client
  this.pfx = opts.pfx || null;
  this.key = opts.key || null;
  this.passphrase = opts.passphrase || null;
  this.cert = opts.cert || null;
  this.ca = opts.ca || null;
  this.ciphers = opts.ciphers || null;
  this.rejectUnauthorized = opts.rejectUnauthorized || null;

  this.open();
}

Socket.priorWebsocketSuccess = false;

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Protocol version.
 *
 * @api public
 */

Socket.protocol = parser.protocol; // this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

Socket.Socket = Socket;
Socket.Transport = require('./transport');
Socket.transports = require('./transports');
Socket.parser = require('engine.io-parser');

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

Socket.prototype.createTransport = function (name) {
  debug('creating transport "%s"', name);
  var query = clone(this.query);

  // append engine.io protocol identifier
  query.EIO = parser.protocol;

  // transport name
  query.transport = name;

  // session id if we already have one
  if (this.id) query.sid = this.id;

  var transport = new transports[name]({
    agent: this.agent,
    hostname: this.hostname,
    port: this.port,
    secure: this.secure,
    path: this.path,
    query: query,
    forceJSONP: this.forceJSONP,
    jsonp: this.jsonp,
    forceBase64: this.forceBase64,
    enablesXDR: this.enablesXDR,
    timestampRequests: this.timestampRequests,
    timestampParam: this.timestampParam,
    policyPort: this.policyPort,
    socket: this,
    pfx: this.pfx,
    key: this.key,
    passphrase: this.passphrase,
    cert: this.cert,
    ca: this.ca,
    ciphers: this.ciphers,
    rejectUnauthorized: this.rejectUnauthorized
  });

  return transport;
};

function clone (obj) {
  var o = {};
  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      o[i] = obj[i];
    }
  }
  return o;
}

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */
Socket.prototype.open = function () {
  var transport;
  if (this.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf('websocket') != -1) {
    transport = 'websocket';
  } else if (0 == this.transports.length) {
    // Emit error on next tick so it can be listened to
    var self = this;
    setTimeout(function() {
      self.emit('error', 'No transports available');
    }, 0);
    return;
  } else {
    transport = this.transports[0];
  }
  this.readyState = 'opening';

  // Retry with the next transport if the transport is disabled (jsonp: false)
  var transport;
  try {
    transport = this.createTransport(transport);
  } catch (e) {
    this.transports.shift();
    this.open();
    return;
  }

  transport.open();
  this.setTransport(transport);
};

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

Socket.prototype.setTransport = function(transport){
  debug('setting transport %s', transport.name);
  var self = this;

  if (this.transport) {
    debug('clearing existing transport %s', this.transport.name);
    this.transport.removeAllListeners();
  }

  // set up transport
  this.transport = transport;

  // set up transport listeners
  transport
  .on('drain', function(){
    self.onDrain();
  })
  .on('packet', function(packet){
    self.onPacket(packet);
  })
  .on('error', function(e){
    self.onError(e);
  })
  .on('close', function(){
    self.onClose('transport close');
  });
};

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

Socket.prototype.probe = function (name) {
  debug('probing transport "%s"', name);
  var transport = this.createTransport(name, { probe: 1 })
    , failed = false
    , self = this;

  Socket.priorWebsocketSuccess = false;

  function onTransportOpen(){
    if (self.onlyBinaryUpgrades) {
      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
      failed = failed || upgradeLosesBinary;
    }
    if (failed) return;

    debug('probe transport "%s" opened', name);
    transport.send([{ type: 'ping', data: 'probe' }]);
    transport.once('packet', function (msg) {
      if (failed) return;
      if ('pong' == msg.type && 'probe' == msg.data) {
        debug('probe transport "%s" pong', name);
        self.upgrading = true;
        self.emit('upgrading', transport);
        if (!transport) return;
        Socket.priorWebsocketSuccess = 'websocket' == transport.name;

        debug('pausing current transport "%s"', self.transport.name);
        self.transport.pause(function () {
          if (failed) return;
          if ('closed' == self.readyState) return;
          debug('changing transport and sending upgrade packet');

          cleanup();

          self.setTransport(transport);
          transport.send([{ type: 'upgrade' }]);
          self.emit('upgrade', transport);
          transport = null;
          self.upgrading = false;
          self.flush();
        });
      } else {
        debug('probe transport "%s" failed', name);
        var err = new Error('probe error');
        err.transport = transport.name;
        self.emit('upgradeError', err);
      }
    });
  }

  function freezeTransport() {
    if (failed) return;

    // Any callback called by transport should be ignored since now
    failed = true;

    cleanup();

    transport.close();
    transport = null;
  }

  //Handle any error that happens while probing
  function onerror(err) {
    var error = new Error('probe error: ' + err);
    error.transport = transport.name;

    freezeTransport();

    debug('probe transport "%s" failed because of error: %s', name, err);

    self.emit('upgradeError', error);
  }

  function onTransportClose(){
    onerror("transport closed");
  }

  //When the socket is closed while we're probing
  function onclose(){
    onerror("socket closed");
  }

  //When the socket is upgraded while we're probing
  function onupgrade(to){
    if (transport && to.name != transport.name) {
      debug('"%s" works - aborting "%s"', to.name, transport.name);
      freezeTransport();
    }
  }

  //Remove all listeners on the transport and on self
  function cleanup(){
    transport.removeListener('open', onTransportOpen);
    transport.removeListener('error', onerror);
    transport.removeListener('close', onTransportClose);
    self.removeListener('close', onclose);
    self.removeListener('upgrading', onupgrade);
  }

  transport.once('open', onTransportOpen);
  transport.once('error', onerror);
  transport.once('close', onTransportClose);

  this.once('close', onclose);
  this.once('upgrading', onupgrade);

  transport.open();

};

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

Socket.prototype.onOpen = function () {
  debug('socket open');
  this.readyState = 'open';
  Socket.priorWebsocketSuccess = 'websocket' == this.transport.name;
  this.emit('open');
  this.flush();

  // we check for `readyState` in case an `open`
  // listener already closed the socket
  if ('open' == this.readyState && this.upgrade && this.transport.pause) {
    debug('starting upgrade probes');
    for (var i = 0, l = this.upgrades.length; i < l; i++) {
      this.probe(this.upgrades[i]);
    }
  }
};

/**
 * Handles a packet.
 *
 * @api private
 */

Socket.prototype.onPacket = function (packet) {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    debug('socket receive: type "%s", data "%s"', packet.type, packet.data);

    this.emit('packet', packet);

    // Socket is live - any packet counts
    this.emit('heartbeat');

    switch (packet.type) {
      case 'open':
        this.onHandshake(parsejson(packet.data));
        break;

      case 'pong':
        this.setPing();
        break;

      case 'error':
        var err = new Error('server error');
        err.code = packet.data;
        this.emit('error', err);
        break;

      case 'message':
        this.emit('data', packet.data);
        this.emit('message', packet.data);
        break;
    }
  } else {
    debug('packet received with socket readyState "%s"', this.readyState);
  }
};

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

Socket.prototype.onHandshake = function (data) {
  this.emit('handshake', data);
  this.id = data.sid;
  this.transport.query.sid = data.sid;
  this.upgrades = this.filterUpgrades(data.upgrades);
  this.pingInterval = data.pingInterval;
  this.pingTimeout = data.pingTimeout;
  this.onOpen();
  // In case open handler closes socket
  if  ('closed' == this.readyState) return;
  this.setPing();

  // Prolong liveness of socket on heartbeat
  this.removeListener('heartbeat', this.onHeartbeat);
  this.on('heartbeat', this.onHeartbeat);
};

/**
 * Resets ping timeout.
 *
 * @api private
 */

Socket.prototype.onHeartbeat = function (timeout) {
  clearTimeout(this.pingTimeoutTimer);
  var self = this;
  self.pingTimeoutTimer = setTimeout(function () {
    if ('closed' == self.readyState) return;
    self.onClose('ping timeout');
  }, timeout || (self.pingInterval + self.pingTimeout));
};

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

Socket.prototype.setPing = function () {
  var self = this;
  clearTimeout(self.pingIntervalTimer);
  self.pingIntervalTimer = setTimeout(function () {
    debug('writing ping packet - expecting pong within %sms', self.pingTimeout);
    self.ping();
    self.onHeartbeat(self.pingTimeout);
  }, self.pingInterval);
};

/**
* Sends a ping packet.
*
* @api public
*/

Socket.prototype.ping = function () {
  this.sendPacket('ping');
};

/**
 * Called on `drain` event
 *
 * @api private
 */

Socket.prototype.onDrain = function() {
  for (var i = 0; i < this.prevBufferLen; i++) {
    if (this.callbackBuffer[i]) {
      this.callbackBuffer[i]();
    }
  }

  this.writeBuffer.splice(0, this.prevBufferLen);
  this.callbackBuffer.splice(0, this.prevBufferLen);

  // setting prevBufferLen = 0 is very important
  // for example, when upgrading, upgrade packet is sent over,
  // and a nonzero prevBufferLen could cause problems on `drain`
  this.prevBufferLen = 0;

  if (this.writeBuffer.length == 0) {
    this.emit('drain');
  } else {
    this.flush();
  }
};

/**
 * Flush write buffers.
 *
 * @api private
 */

Socket.prototype.flush = function () {
  if ('closed' != this.readyState && this.transport.writable &&
    !this.upgrading && this.writeBuffer.length) {
    debug('flushing %d packets in socket', this.writeBuffer.length);
    this.transport.send(this.writeBuffer);
    // keep track of current length of writeBuffer
    // splice writeBuffer and callbackBuffer on `drain`
    this.prevBufferLen = this.writeBuffer.length;
    this.emit('flush');
  }
};

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @return {Socket} for chaining.
 * @api public
 */

Socket.prototype.write =
Socket.prototype.send = function (msg, fn) {
  this.sendPacket('message', msg, fn);
  return this;
};

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Function} callback function.
 * @api private
 */

Socket.prototype.sendPacket = function (type, data, fn) {
  if ('closing' == this.readyState || 'closed' == this.readyState) {
    return;
  }

  var packet = { type: type, data: data };
  this.emit('packetCreate', packet);
  this.writeBuffer.push(packet);
  this.callbackBuffer.push(fn);
  this.flush();
};

/**
 * Closes the connection.
 *
 * @api private
 */

Socket.prototype.close = function () {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    this.readyState = 'closing';

    var self = this;

    function close() {
      self.onClose('forced close');
      debug('socket closing - telling transport to close');
      self.transport.close();
    }

    function cleanupAndClose() {
      self.removeListener('upgrade', cleanupAndClose);
      self.removeListener('upgradeError', cleanupAndClose);
      close();
    }

    function waitForUpgrade() {
      // wait for upgrade to finish since we can't send packets while pausing a transport
      self.once('upgrade', cleanupAndClose);
      self.once('upgradeError', cleanupAndClose);
    }

    if (this.writeBuffer.length) {
      this.once('drain', function() {
        if (this.upgrading) {
          waitForUpgrade();
        } else {
          close();
        }
      });
    } else if (this.upgrading) {
      waitForUpgrade();
    } else {
      close();
    }
  }

  return this;
};

/**
 * Called upon transport error
 *
 * @api private
 */

Socket.prototype.onError = function (err) {
  debug('socket error %j', err);
  Socket.priorWebsocketSuccess = false;
  this.emit('error', err);
  this.onClose('transport error', err);
};

/**
 * Called upon transport close.
 *
 * @api private
 */

Socket.prototype.onClose = function (reason, desc) {
  if ('opening' == this.readyState || 'open' == this.readyState || 'closing' == this.readyState) {
    debug('socket close with reason: "%s"', reason);
    var self = this;

    // clear timers
    clearTimeout(this.pingIntervalTimer);
    clearTimeout(this.pingTimeoutTimer);

    // clean buffers in next tick, so developers can still
    // grab the buffers on `close` event
    setTimeout(function() {
      self.writeBuffer = [];
      self.callbackBuffer = [];
      self.prevBufferLen = 0;
    }, 0);

    // stop event from firing again for transport
    this.transport.removeAllListeners('close');

    // ensure transport won't stay open
    this.transport.close();

    // ignore further transport communication
    this.transport.removeAllListeners();

    // set ready state
    this.readyState = 'closed';

    // clear session id
    this.id = null;

    // emit close event
    this.emit('close', reason, desc);
  }
};

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

Socket.prototype.filterUpgrades = function (upgrades) {
  var filteredUpgrades = [];
  for (var i = 0, j = upgrades.length; i<j; i++) {
    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
  }
  return filteredUpgrades;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./transport":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transport.js","./transports":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/index.js","component-emitter":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-emitter/index.js","debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/browser.js","engine.io-parser":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/lib/browser.js","indexof":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/indexof/index.js","parsejson":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/parsejson/index.js","parseqs":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/parseqs/index.js","parseuri":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/parseuri/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transport.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var parser = require('engine.io-parser');
var Emitter = require('component-emitter');

/**
 * Module exports.
 */

module.exports = Transport;

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

function Transport (opts) {
  this.path = opts.path;
  this.hostname = opts.hostname;
  this.port = opts.port;
  this.secure = opts.secure;
  this.query = opts.query;
  this.timestampParam = opts.timestampParam;
  this.timestampRequests = opts.timestampRequests;
  this.readyState = '';
  this.agent = opts.agent || false;
  this.socket = opts.socket;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Transport.prototype);

/**
 * A counter used to prevent collisions in the timestamps used
 * for cache busting.
 */

Transport.timestamps = 0;

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

Transport.prototype.onError = function (msg, desc) {
  var err = new Error(msg);
  err.type = 'TransportError';
  err.description = desc;
  this.emit('error', err);
  return this;
};

/**
 * Opens the transport.
 *
 * @api public
 */

Transport.prototype.open = function () {
  if ('closed' == this.readyState || '' == this.readyState) {
    this.readyState = 'opening';
    this.doOpen();
  }

  return this;
};

/**
 * Closes the transport.
 *
 * @api private
 */

Transport.prototype.close = function () {
  if ('opening' == this.readyState || 'open' == this.readyState) {
    this.doClose();
    this.onClose();
  }

  return this;
};

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

Transport.prototype.send = function(packets){
  if ('open' == this.readyState) {
    this.write(packets);
  } else {
    throw new Error('Transport not open');
  }
};

/**
 * Called upon open
 *
 * @api private
 */

Transport.prototype.onOpen = function () {
  this.readyState = 'open';
  this.writable = true;
  this.emit('open');
};

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

Transport.prototype.onData = function(data){
  var packet = parser.decodePacket(data, this.socket.binaryType);
  this.onPacket(packet);
};

/**
 * Called with a decoded packet.
 */

Transport.prototype.onPacket = function (packet) {
  this.emit('packet', packet);
};

/**
 * Called upon close.
 *
 * @api private
 */

Transport.prototype.onClose = function () {
  this.readyState = 'closed';
  this.emit('close');
};

},{"component-emitter":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-emitter/index.js","engine.io-parser":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/lib/browser.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/index.js":[function(require,module,exports){
(function (global){
/**
 * Module dependencies
 */

var XMLHttpRequest = require('xmlhttprequest');
var XHR = require('./polling-xhr');
var JSONP = require('./polling-jsonp');
var websocket = require('./websocket');

/**
 * Export transports.
 */

exports.polling = polling;
exports.websocket = websocket;

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

function polling(opts){
  var xhr;
  var xd = false;
  var xs = false;
  var jsonp = false !== opts.jsonp;

  if (global.location) {
    var isSSL = 'https:' == location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    xd = opts.hostname != location.hostname || port != opts.port;
    xs = opts.secure != isSSL;
  }

  opts.xdomain = xd;
  opts.xscheme = xs;
  xhr = new XMLHttpRequest(opts);

  if ('open' in xhr && !opts.forceJSONP) {
    return new XHR(opts);
  } else {
    if (!jsonp) throw new Error('JSONP disabled');
    return new JSONP(opts);
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./polling-jsonp":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/polling-jsonp.js","./polling-xhr":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/polling-xhr.js","./websocket":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/websocket.js","xmlhttprequest":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/xmlhttprequest.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/polling-jsonp.js":[function(require,module,exports){
(function (global){

/**
 * Module requirements.
 */

var Polling = require('./polling');
var inherit = require('component-inherit');

/**
 * Module exports.
 */

module.exports = JSONPPolling;

/**
 * Cached regular expressions.
 */

var rNewline = /\n/g;
var rEscapedNewline = /\\n/g;

/**
 * Global JSONP callbacks.
 */

var callbacks;

/**
 * Callbacks count.
 */

var index = 0;

/**
 * Noop.
 */

function empty () { }

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

function JSONPPolling (opts) {
  Polling.call(this, opts);

  this.query = this.query || {};

  // define global callbacks array if not present
  // we do this here (lazily) to avoid unneeded global pollution
  if (!callbacks) {
    // we need to consider multiple engines in the same page
    if (!global.___eio) global.___eio = [];
    callbacks = global.___eio;
  }

  // callback identifier
  this.index = callbacks.length;

  // add callback to jsonp global
  var self = this;
  callbacks.push(function (msg) {
    self.onData(msg);
  });

  // append to query string
  this.query.j = this.index;

  // prevent spurious errors from being emitted when the window is unloaded
  if (global.document && global.addEventListener) {
    global.addEventListener('beforeunload', function () {
      if (self.script) self.script.onerror = empty;
    }, false);
  }
}

/**
 * Inherits from Polling.
 */

inherit(JSONPPolling, Polling);

/*
 * JSONP only supports binary as base64 encoded strings
 */

JSONPPolling.prototype.supportsBinary = false;

/**
 * Closes the socket.
 *
 * @api private
 */

JSONPPolling.prototype.doClose = function () {
  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  if (this.form) {
    this.form.parentNode.removeChild(this.form);
    this.form = null;
    this.iframe = null;
  }

  Polling.prototype.doClose.call(this);
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

JSONPPolling.prototype.doPoll = function () {
  var self = this;
  var script = document.createElement('script');

  if (this.script) {
    this.script.parentNode.removeChild(this.script);
    this.script = null;
  }

  script.async = true;
  script.src = this.uri();
  script.onerror = function(e){
    self.onError('jsonp poll error',e);
  };

  var insertAt = document.getElementsByTagName('script')[0];
  insertAt.parentNode.insertBefore(script, insertAt);
  this.script = script;

  var isUAgecko = 'undefined' != typeof navigator && /gecko/i.test(navigator.userAgent);
  
  if (isUAgecko) {
    setTimeout(function () {
      var iframe = document.createElement('iframe');
      document.body.appendChild(iframe);
      document.body.removeChild(iframe);
    }, 100);
  }
};

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

JSONPPolling.prototype.doWrite = function (data, fn) {
  var self = this;

  if (!this.form) {
    var form = document.createElement('form');
    var area = document.createElement('textarea');
    var id = this.iframeId = 'eio_iframe_' + this.index;
    var iframe;

    form.className = 'socketio';
    form.style.position = 'absolute';
    form.style.top = '-1000px';
    form.style.left = '-1000px';
    form.target = id;
    form.method = 'POST';
    form.setAttribute('accept-charset', 'utf-8');
    area.name = 'd';
    form.appendChild(area);
    document.body.appendChild(form);

    this.form = form;
    this.area = area;
  }

  this.form.action = this.uri();

  function complete () {
    initIframe();
    fn();
  }

  function initIframe () {
    if (self.iframe) {
      try {
        self.form.removeChild(self.iframe);
      } catch (e) {
        self.onError('jsonp polling iframe removal error', e);
      }
    }

    try {
      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
      var html = '<iframe src="javascript:0" name="'+ self.iframeId +'">';
      iframe = document.createElement(html);
    } catch (e) {
      iframe = document.createElement('iframe');
      iframe.name = self.iframeId;
      iframe.src = 'javascript:0';
    }

    iframe.id = self.iframeId;

    self.form.appendChild(iframe);
    self.iframe = iframe;
  }

  initIframe();

  // escape \n to prevent it from being converted into \r\n by some UAs
  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
  data = data.replace(rEscapedNewline, '\\\n');
  this.area.value = data.replace(rNewline, '\\n');

  try {
    this.form.submit();
  } catch(e) {}

  if (this.iframe.attachEvent) {
    this.iframe.onreadystatechange = function(){
      if (self.iframe.readyState == 'complete') {
        complete();
      }
    };
  } else {
    this.iframe.onload = complete;
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./polling":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/polling.js","component-inherit":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-inherit/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/polling-xhr.js":[function(require,module,exports){
(function (global){
/**
 * Module requirements.
 */

var XMLHttpRequest = require('xmlhttprequest');
var Polling = require('./polling');
var Emitter = require('component-emitter');
var inherit = require('component-inherit');
var debug = require('debug')('engine.io-client:polling-xhr');

/**
 * Module exports.
 */

module.exports = XHR;
module.exports.Request = Request;

/**
 * Empty function
 */

function empty(){}

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

function XHR(opts){
  Polling.call(this, opts);

  if (global.location) {
    var isSSL = 'https:' == location.protocol;
    var port = location.port;

    // some user agents have empty `location.port`
    if (!port) {
      port = isSSL ? 443 : 80;
    }

    this.xd = opts.hostname != global.location.hostname ||
      port != opts.port;
    this.xs = opts.secure != isSSL;
  }
}

/**
 * Inherits from Polling.
 */

inherit(XHR, Polling);

/**
 * XHR supports binary
 */

XHR.prototype.supportsBinary = true;

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

XHR.prototype.request = function(opts){
  opts = opts || {};
  opts.uri = this.uri();
  opts.xd = this.xd;
  opts.xs = this.xs;
  opts.agent = this.agent || false;
  opts.supportsBinary = this.supportsBinary;
  opts.enablesXDR = this.enablesXDR;

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  return new Request(opts);
};

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

XHR.prototype.doWrite = function(data, fn){
  var isBinary = typeof data !== 'string' && data !== undefined;
  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
  var self = this;
  req.on('success', fn);
  req.on('error', function(err){
    self.onError('xhr post error', err);
  });
  this.sendXhr = req;
};

/**
 * Starts a poll cycle.
 *
 * @api private
 */

XHR.prototype.doPoll = function(){
  debug('xhr poll');
  var req = this.request();
  var self = this;
  req.on('data', function(data){
    self.onData(data);
  });
  req.on('error', function(err){
    self.onError('xhr poll error', err);
  });
  this.pollXhr = req;
};

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

function Request(opts){
  this.method = opts.method || 'GET';
  this.uri = opts.uri;
  this.xd = !!opts.xd;
  this.xs = !!opts.xs;
  this.async = false !== opts.async;
  this.data = undefined != opts.data ? opts.data : null;
  this.agent = opts.agent;
  this.isBinary = opts.isBinary;
  this.supportsBinary = opts.supportsBinary;
  this.enablesXDR = opts.enablesXDR;

  // SSL options for Node.js client
  this.pfx = opts.pfx;
  this.key = opts.key;
  this.passphrase = opts.passphrase;
  this.cert = opts.cert;
  this.ca = opts.ca;
  this.ciphers = opts.ciphers;
  this.rejectUnauthorized = opts.rejectUnauthorized;

  this.create();
}

/**
 * Mix in `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

Request.prototype.create = function(){
  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  var xhr = this.xhr = new XMLHttpRequest(opts);
  var self = this;

  try {
    debug('xhr open %s: %s', this.method, this.uri);
    xhr.open(this.method, this.uri, this.async);
    if (this.supportsBinary) {
      // This has to be done after open because Firefox is stupid
      // http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension
      xhr.responseType = 'arraybuffer';
    }

    if ('POST' == this.method) {
      try {
        if (this.isBinary) {
          xhr.setRequestHeader('Content-type', 'application/octet-stream');
        } else {
          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
        }
      } catch (e) {}
    }

    // ie6 check
    if ('withCredentials' in xhr) {
      xhr.withCredentials = true;
    }

    if (this.hasXDR()) {
      xhr.onload = function(){
        self.onLoad();
      };
      xhr.onerror = function(){
        self.onError(xhr.responseText);
      };
    } else {
      xhr.onreadystatechange = function(){
        if (4 != xhr.readyState) return;
        if (200 == xhr.status || 1223 == xhr.status) {
          self.onLoad();
        } else {
          // make sure the `error` event handler that's user-set
          // does not throw in the same tick and gets caught here
          setTimeout(function(){
            self.onError(xhr.status);
          }, 0);
        }
      };
    }

    debug('xhr data %s', this.data);
    xhr.send(this.data);
  } catch (e) {
    // Need to defer since .create() is called directly fhrom the constructor
    // and thus the 'error' event can only be only bound *after* this exception
    // occurs.  Therefore, also, we cannot throw here at all.
    setTimeout(function() {
      self.onError(e);
    }, 0);
    return;
  }

  if (global.document) {
    this.index = Request.requestsCount++;
    Request.requests[this.index] = this;
  }
};

/**
 * Called upon successful response.
 *
 * @api private
 */

Request.prototype.onSuccess = function(){
  this.emit('success');
  this.cleanup();
};

/**
 * Called if we have data.
 *
 * @api private
 */

Request.prototype.onData = function(data){
  this.emit('data', data);
  this.onSuccess();
};

/**
 * Called upon error.
 *
 * @api private
 */

Request.prototype.onError = function(err){
  this.emit('error', err);
  this.cleanup(true);
};

/**
 * Cleans up house.
 *
 * @api private
 */

Request.prototype.cleanup = function(fromError){
  if ('undefined' == typeof this.xhr || null === this.xhr) {
    return;
  }
  // xmlhttprequest
  if (this.hasXDR()) {
    this.xhr.onload = this.xhr.onerror = empty;
  } else {
    this.xhr.onreadystatechange = empty;
  }

  if (fromError) {
    try {
      this.xhr.abort();
    } catch(e) {}
  }

  if (global.document) {
    delete Request.requests[this.index];
  }

  this.xhr = null;
};

/**
 * Called upon load.
 *
 * @api private
 */

Request.prototype.onLoad = function(){
  var data;
  try {
    var contentType;
    try {
      contentType = this.xhr.getResponseHeader('Content-Type').split(';')[0];
    } catch (e) {}
    if (contentType === 'application/octet-stream') {
      data = this.xhr.response;
    } else {
      if (!this.supportsBinary) {
        data = this.xhr.responseText;
      } else {
        data = 'ok';
      }
    }
  } catch (e) {
    this.onError(e);
  }
  if (null != data) {
    this.onData(data);
  }
};

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

Request.prototype.hasXDR = function(){
  return 'undefined' !== typeof global.XDomainRequest && !this.xs && this.enablesXDR;
};

/**
 * Aborts the request.
 *
 * @api public
 */

Request.prototype.abort = function(){
  this.cleanup();
};

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

if (global.document) {
  Request.requestsCount = 0;
  Request.requests = {};
  if (global.attachEvent) {
    global.attachEvent('onunload', unloadHandler);
  } else if (global.addEventListener) {
    global.addEventListener('beforeunload', unloadHandler, false);
  }
}

function unloadHandler() {
  for (var i in Request.requests) {
    if (Request.requests.hasOwnProperty(i)) {
      Request.requests[i].abort();
    }
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./polling":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/polling.js","component-emitter":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-emitter/index.js","component-inherit":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-inherit/index.js","debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/browser.js","xmlhttprequest":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/xmlhttprequest.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/polling.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parseqs = require('parseqs');
var parser = require('engine.io-parser');
var inherit = require('component-inherit');
var debug = require('debug')('engine.io-client:polling');

/**
 * Module exports.
 */

module.exports = Polling;

/**
 * Is XHR2 supported?
 */

var hasXHR2 = (function() {
  var XMLHttpRequest = require('xmlhttprequest');
  var xhr = new XMLHttpRequest({ xdomain: false });
  return null != xhr.responseType;
})();

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

function Polling(opts){
  var forceBase64 = (opts && opts.forceBase64);
  if (!hasXHR2 || forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(Polling, Transport);

/**
 * Transport name.
 */

Polling.prototype.name = 'polling';

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

Polling.prototype.doOpen = function(){
  this.poll();
};

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

Polling.prototype.pause = function(onPause){
  var pending = 0;
  var self = this;

  this.readyState = 'pausing';

  function pause(){
    debug('paused');
    self.readyState = 'paused';
    onPause();
  }

  if (this.polling || !this.writable) {
    var total = 0;

    if (this.polling) {
      debug('we are currently polling - waiting to pause');
      total++;
      this.once('pollComplete', function(){
        debug('pre-pause polling complete');
        --total || pause();
      });
    }

    if (!this.writable) {
      debug('we are currently writing - waiting to pause');
      total++;
      this.once('drain', function(){
        debug('pre-pause writing complete');
        --total || pause();
      });
    }
  } else {
    pause();
  }
};

/**
 * Starts polling cycle.
 *
 * @api public
 */

Polling.prototype.poll = function(){
  debug('polling');
  this.polling = true;
  this.doPoll();
  this.emit('poll');
};

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

Polling.prototype.onData = function(data){
  var self = this;
  debug('polling got data %s', data);
  var callback = function(packet, index, total) {
    // if its the first message we consider the transport open
    if ('opening' == self.readyState) {
      self.onOpen();
    }

    // if its a close packet, we close the ongoing requests
    if ('close' == packet.type) {
      self.onClose();
      return false;
    }

    // otherwise bypass onData and handle the message
    self.onPacket(packet);
  };

  // decode payload
  parser.decodePayload(data, this.socket.binaryType, callback);

  // if an event did not trigger closing
  if ('closed' != this.readyState) {
    // if we got data we're not polling
    this.polling = false;
    this.emit('pollComplete');

    if ('open' == this.readyState) {
      this.poll();
    } else {
      debug('ignoring poll - transport state "%s"', this.readyState);
    }
  }
};

/**
 * For polling, send a close packet.
 *
 * @api private
 */

Polling.prototype.doClose = function(){
  var self = this;

  function close(){
    debug('writing close packet');
    self.write([{ type: 'close' }]);
  }

  if ('open' == this.readyState) {
    debug('transport open - closing');
    close();
  } else {
    // in case we're trying to close while
    // handshaking is in progress (GH-164)
    debug('transport not open - deferring close');
    this.once('open', close);
  }
};

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

Polling.prototype.write = function(packets){
  var self = this;
  this.writable = false;
  var callbackfn = function() {
    self.writable = true;
    self.emit('drain');
  };

  var self = this;
  parser.encodePayload(packets, this.supportsBinary, function(data) {
    self.doWrite(data, callbackfn);
  });
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

Polling.prototype.uri = function(){
  var query = this.query || {};
  var schema = this.secure ? 'https' : 'http';
  var port = '';

  // cache busting is forced
  if (false !== this.timestampRequests) {
    query[this.timestampParam] = +new Date + '-' + Transport.timestamps++;
  }

  if (!this.supportsBinary && !query.sid) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // avoid port if default for schema
  if (this.port && (('https' == schema && this.port != 443) ||
     ('http' == schema && this.port != 80))) {
    port = ':' + this.port;
  }

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  return schema + '://' + this.hostname + port + this.path + query;
};

},{"../transport":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transport.js","component-inherit":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-inherit/index.js","debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/browser.js","engine.io-parser":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/lib/browser.js","parseqs":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/parseqs/index.js","xmlhttprequest":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/xmlhttprequest.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transports/websocket.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var Transport = require('../transport');
var parser = require('engine.io-parser');
var parseqs = require('parseqs');
var inherit = require('component-inherit');
var debug = require('debug')('engine.io-client:websocket');

/**
 * `ws` exposes a WebSocket-compatible interface in
 * Node, or the `WebSocket` or `MozWebSocket` globals
 * in the browser.
 */

var WebSocket = require('ws');

/**
 * Module exports.
 */

module.exports = WS;

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

function WS(opts){
  var forceBase64 = (opts && opts.forceBase64);
  if (forceBase64) {
    this.supportsBinary = false;
  }
  Transport.call(this, opts);
}

/**
 * Inherits from Transport.
 */

inherit(WS, Transport);

/**
 * Transport name.
 *
 * @api public
 */

WS.prototype.name = 'websocket';

/*
 * WebSockets support binary
 */

WS.prototype.supportsBinary = true;

/**
 * Opens socket.
 *
 * @api private
 */

WS.prototype.doOpen = function(){
  if (!this.check()) {
    // let probe timeout
    return;
  }

  var self = this;
  var uri = this.uri();
  var protocols = void(0);
  var opts = { agent: this.agent };

  // SSL options for Node.js client
  opts.pfx = this.pfx;
  opts.key = this.key;
  opts.passphrase = this.passphrase;
  opts.cert = this.cert;
  opts.ca = this.ca;
  opts.ciphers = this.ciphers;
  opts.rejectUnauthorized = this.rejectUnauthorized;

  this.ws = new WebSocket(uri, protocols, opts);

  if (this.ws.binaryType === undefined) {
    this.supportsBinary = false;
  }

  this.ws.binaryType = 'arraybuffer';
  this.addEventListeners();
};

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

WS.prototype.addEventListeners = function(){
  var self = this;

  this.ws.onopen = function(){
    self.onOpen();
  };
  this.ws.onclose = function(){
    self.onClose();
  };
  this.ws.onmessage = function(ev){
    self.onData(ev.data);
  };
  this.ws.onerror = function(e){
    self.onError('websocket error', e);
  };
};

/**
 * Override `onData` to use a timer on iOS.
 * See: https://gist.github.com/mloughran/2052006
 *
 * @api private
 */

if ('undefined' != typeof navigator
  && /iPad|iPhone|iPod/i.test(navigator.userAgent)) {
  WS.prototype.onData = function(data){
    var self = this;
    setTimeout(function(){
      Transport.prototype.onData.call(self, data);
    }, 0);
  };
}

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

WS.prototype.write = function(packets){
  var self = this;
  this.writable = false;
  // encodePacket efficient as it uses WS framing
  // no need for encodePayload
  for (var i = 0, l = packets.length; i < l; i++) {
    parser.encodePacket(packets[i], this.supportsBinary, function(data) {
      //Sometimes the websocket has already been closed but the browser didn't
      //have a chance of informing us about it yet, in that case send will
      //throw an error
      try {
        self.ws.send(data);
      } catch (e){
        debug('websocket closed before onclose event');
      }
    });
  }

  function ondrain() {
    self.writable = true;
    self.emit('drain');
  }
  // fake drain
  // defer to next tick to allow Socket to clear writeBuffer
  setTimeout(ondrain, 0);
};

/**
 * Called upon close
 *
 * @api private
 */

WS.prototype.onClose = function(){
  Transport.prototype.onClose.call(this);
};

/**
 * Closes socket.
 *
 * @api private
 */

WS.prototype.doClose = function(){
  if (typeof this.ws !== 'undefined') {
    this.ws.close();
  }
};

/**
 * Generates uri for connection.
 *
 * @api private
 */

WS.prototype.uri = function(){
  var query = this.query || {};
  var schema = this.secure ? 'wss' : 'ws';
  var port = '';

  // avoid port if default for schema
  if (this.port && (('wss' == schema && this.port != 443)
    || ('ws' == schema && this.port != 80))) {
    port = ':' + this.port;
  }

  // append timestamp to URI
  if (this.timestampRequests) {
    query[this.timestampParam] = +new Date;
  }

  // communicate binary support capabilities
  if (!this.supportsBinary) {
    query.b64 = 1;
  }

  query = parseqs.encode(query);

  // prepend ? to query
  if (query.length) {
    query = '?' + query;
  }

  return schema + '://' + this.hostname + port + this.path + query;
};

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

WS.prototype.check = function(){
  return !!WebSocket && !('__initialize' in WebSocket && this.name === WS.prototype.name);
};

},{"../transport":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/transport.js","component-inherit":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-inherit/index.js","debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/browser.js","engine.io-parser":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/lib/browser.js","parseqs":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/parseqs/index.js","ws":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/ws/lib/browser.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/lib/xmlhttprequest.js":[function(require,module,exports){
// browser shim for xmlhttprequest module
var hasCORS = require('has-cors');

module.exports = function(opts) {
  var xdomain = opts.xdomain;

  // scheme must be same when usign XDomainRequest
  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
  var xscheme = opts.xscheme;

  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
  // https://github.com/Automattic/engine.io-client/pull/217
  var enablesXDR = opts.enablesXDR;

  // XMLHttpRequest can be disabled on IE
  try {
    if ('undefined' != typeof XMLHttpRequest && (!xdomain || hasCORS)) {
      return new XMLHttpRequest();
    }
  } catch (e) { }

  // Use XDomainRequest for IE8 if enablesXDR is true
  // because loading bar keeps flashing when using jsonp-polling
  // https://github.com/yujiosaka/socke.io-ie8-loading-example
  try {
    if ('undefined' != typeof XDomainRequest && !xscheme && enablesXDR) {
      return new XDomainRequest();
    }
  } catch (e) { }

  if (!xdomain) {
    try {
      return new ActiveXObject('Microsoft.XMLHTTP');
    } catch(e) { }
  }
}

},{"has-cors":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/has-cors/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-emitter/index.js":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/emitter.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/component-inherit/index.js":[function(require,module,exports){

module.exports = function(a, b){
  var fn = function(){};
  fn.prototype = b.prototype;
  a.prototype = new fn;
  a.prototype.constructor = a;
};
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/browser.js":[function(require,module,exports){

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // is webkit? http://stackoverflow.com/a/16459606/376773
  return ('WebkitAppearance' in document.documentElement.style) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (window.console && (console.firebug || (console.exception && console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  return JSON.stringify(v);
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs() {
  var args = arguments;
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return args;

  var c = 'color: ' + this.color;
  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
  return args;
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // This hackery is required for IE8,
  // where the `console.log` function doesn't have 'apply'
  return 'object' == typeof console
    && 'function' == typeof console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      localStorage.removeItem('debug');
    } else {
      localStorage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = localStorage.debug;
  } catch(e) {}
  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

},{"./debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/debug.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/debug.js":[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

exports.formatters = {};

/**
 * Previously assigned color.
 */

var prevColor = 0;

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 *
 * @return {Number}
 * @api private
 */

function selectColor() {
  return exports.colors[prevColor++ % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function debug(namespace) {

  // define the `disabled` version
  function disabled() {
  }
  disabled.enabled = false;

  // define the `enabled` version
  function enabled() {

    var self = enabled;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // add the `color` if not set
    if (null == self.useColors) self.useColors = exports.useColors();
    if (null == self.color && self.useColors) self.color = selectColor();

    var args = Array.prototype.slice.call(arguments);

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %o
      args = ['%o'].concat(args);
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    if ('function' === typeof exports.formatArgs) {
      args = exports.formatArgs.apply(self, args);
    }
    var logFn = enabled.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }
  enabled.enabled = true;

  var fn = exports.enabled(namespace) ? enabled : disabled;

  fn.namespace = namespace;

  return fn;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  var split = (namespaces || '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/node_modules/ms/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/debug/node_modules/ms/index.js":[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options.long
    ? long(val)
    : short(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 's':
      return n * s;
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function short(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function long(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/lib/browser.js":[function(require,module,exports){
(function (global){
/**
 * Module dependencies.
 */

var keys = require('./keys');
var hasBinary = require('has-binary');
var sliceBuffer = require('arraybuffer.slice');
var base64encoder = require('base64-arraybuffer');
var after = require('after');
var utf8 = require('utf8');

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

var isAndroid = navigator.userAgent.match(/Android/i);

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */
var isPhantomJS = /PhantomJS/i.test(navigator.userAgent);

/**
 * When true, avoids using Blobs to encode payloads.
 * @type boolean
 */
var dontSendBlobs = isAndroid || isPhantomJS;

/**
 * Current protocol version.
 */

exports.protocol = 3;

/**
 * Packet types.
 */

var packets = exports.packets = {
    open:     0    // non-ws
  , close:    1    // non-ws
  , ping:     2
  , pong:     3
  , message:  4
  , upgrade:  5
  , noop:     6
};

var packetslist = keys(packets);

/**
 * Premade error packet.
 */

var err = { type: 'error', data: 'parser error' };

/**
 * Create a blob api even for blob builder when vendor prefixes exist
 */

var Blob = require('blob');

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
  if ('function' == typeof supportsBinary) {
    callback = supportsBinary;
    supportsBinary = false;
  }

  if ('function' == typeof utf8encode) {
    callback = utf8encode;
    utf8encode = null;
  }

  var data = (packet.data === undefined)
    ? undefined
    : packet.data.buffer || packet.data;

  if (global.ArrayBuffer && data instanceof ArrayBuffer) {
    return encodeArrayBuffer(packet, supportsBinary, callback);
  } else if (Blob && data instanceof global.Blob) {
    return encodeBlob(packet, supportsBinary, callback);
  }

  // might be an object with { base64: true, data: dataAsBase64String }
  if (data && data.base64) {
    return encodeBase64Object(packet, callback);
  }

  // Sending data as a utf-8 string
  var encoded = packets[packet.type];

  // data fragment is optional
  if (undefined !== packet.data) {
    encoded += utf8encode ? utf8.encode(String(packet.data)) : String(packet.data);
  }

  return callback('' + encoded);

};

function encodeBase64Object(packet, callback) {
  // packet data is an object { base64: true, data: dataAsBase64String }
  var message = 'b' + exports.packets[packet.type] + packet.data.data;
  return callback(message);
}

/**
 * Encode packet helpers for binary types
 */

function encodeArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var data = packet.data;
  var contentArray = new Uint8Array(data);
  var resultBuffer = new Uint8Array(1 + data.byteLength);

  resultBuffer[0] = packets[packet.type];
  for (var i = 0; i < contentArray.length; i++) {
    resultBuffer[i+1] = contentArray[i];
  }

  return callback(resultBuffer.buffer);
}

function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  var fr = new FileReader();
  fr.onload = function() {
    packet.data = fr.result;
    exports.encodePacket(packet, supportsBinary, true, callback);
  };
  return fr.readAsArrayBuffer(packet.data);
}

function encodeBlob(packet, supportsBinary, callback) {
  if (!supportsBinary) {
    return exports.encodeBase64Packet(packet, callback);
  }

  if (dontSendBlobs) {
    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
  }

  var length = new Uint8Array(1);
  length[0] = packets[packet.type];
  var blob = new Blob([length.buffer, packet.data]);

  return callback(blob);
}

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

exports.encodeBase64Packet = function(packet, callback) {
  var message = 'b' + exports.packets[packet.type];
  if (Blob && packet.data instanceof Blob) {
    var fr = new FileReader();
    fr.onload = function() {
      var b64 = fr.result.split(',')[1];
      callback(message + b64);
    };
    return fr.readAsDataURL(packet.data);
  }

  var b64data;
  try {
    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
  } catch (e) {
    // iPhone Safari doesn't let you apply with typed arrays
    var typed = new Uint8Array(packet.data);
    var basic = new Array(typed.length);
    for (var i = 0; i < typed.length; i++) {
      basic[i] = typed[i];
    }
    b64data = String.fromCharCode.apply(null, basic);
  }
  message += global.btoa(b64data);
  return callback(message);
};

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

exports.decodePacket = function (data, binaryType, utf8decode) {
  // String data
  if (typeof data == 'string' || data === undefined) {
    if (data.charAt(0) == 'b') {
      return exports.decodeBase64Packet(data.substr(1), binaryType);
    }

    if (utf8decode) {
      try {
        data = utf8.decode(data);
      } catch (e) {
        return err;
      }
    }
    var type = data.charAt(0);

    if (Number(type) != type || !packetslist[type]) {
      return err;
    }

    if (data.length > 1) {
      return { type: packetslist[type], data: data.substring(1) };
    } else {
      return { type: packetslist[type] };
    }
  }

  var asArray = new Uint8Array(data);
  var type = asArray[0];
  var rest = sliceBuffer(data, 1);
  if (Blob && binaryType === 'blob') {
    rest = new Blob([rest]);
  }
  return { type: packetslist[type], data: rest };
};

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

exports.decodeBase64Packet = function(msg, binaryType) {
  var type = packetslist[msg.charAt(0)];
  if (!global.ArrayBuffer) {
    return { type: type, data: { base64: true, data: msg.substr(1) } };
  }

  var data = base64encoder.decode(msg.substr(1));

  if (binaryType === 'blob' && Blob) {
    data = new Blob([data]);
  }

  return { type: type, data: data };
};

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

exports.encodePayload = function (packets, supportsBinary, callback) {
  if (typeof supportsBinary == 'function') {
    callback = supportsBinary;
    supportsBinary = null;
  }

  var isBinary = hasBinary(packets);

  if (supportsBinary && isBinary) {
    if (Blob && !dontSendBlobs) {
      return exports.encodePayloadAsBlob(packets, callback);
    }

    return exports.encodePayloadAsArrayBuffer(packets, callback);
  }

  if (!packets.length) {
    return callback('0:');
  }

  function setLengthHeader(message) {
    return message.length + ':' + message;
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, !isBinary ? false : supportsBinary, true, function(message) {
      doneCallback(null, setLengthHeader(message));
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(results.join(''));
  });
};

/**
 * Async array map using after
 */

function map(ary, each, done) {
  var result = new Array(ary.length);
  var next = after(ary.length, done);

  var eachWithIndex = function(i, el, cb) {
    each(el, function(error, msg) {
      result[i] = msg;
      cb(error, result);
    });
  };

  for (var i = 0; i < ary.length; i++) {
    eachWithIndex(i, ary[i], next);
  }
}

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

exports.decodePayload = function (data, binaryType, callback) {
  if (typeof data != 'string') {
    return exports.decodePayloadAsBinary(data, binaryType, callback);
  }

  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var packet;
  if (data == '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

  var length = ''
    , n, msg;

  for (var i = 0, l = data.length; i < l; i++) {
    var chr = data.charAt(i);

    if (':' != chr) {
      length += chr;
    } else {
      if ('' == length || (length != (n = Number(length)))) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      msg = data.substr(i + 1, n);

      if (length != msg.length) {
        // parser error - ignoring payload
        return callback(err, 0, 1);
      }

      if (msg.length) {
        packet = exports.decodePacket(msg, binaryType, true);

        if (err.type == packet.type && err.data == packet.data) {
          // parser error in individual packet - ignoring payload
          return callback(err, 0, 1);
        }

        var ret = callback(packet, i + n, l);
        if (false === ret) return;
      }

      // advance cursor
      i += n;
      length = '';
    }
  }

  if (length != '') {
    // parser error - ignoring payload
    return callback(err, 0, 1);
  }

};

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

exports.encodePayloadAsArrayBuffer = function(packets, callback) {
  if (!packets.length) {
    return callback(new ArrayBuffer(0));
  }

  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(data) {
      return doneCallback(null, data);
    });
  }

  map(packets, encodeOne, function(err, encodedPackets) {
    var totalLength = encodedPackets.reduce(function(acc, p) {
      var len;
      if (typeof p === 'string'){
        len = p.length;
      } else {
        len = p.byteLength;
      }
      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
    }, 0);

    var resultArray = new Uint8Array(totalLength);

    var bufferIndex = 0;
    encodedPackets.forEach(function(p) {
      var isString = typeof p === 'string';
      var ab = p;
      if (isString) {
        var view = new Uint8Array(p.length);
        for (var i = 0; i < p.length; i++) {
          view[i] = p.charCodeAt(i);
        }
        ab = view.buffer;
      }

      if (isString) { // not true binary
        resultArray[bufferIndex++] = 0;
      } else { // true binary
        resultArray[bufferIndex++] = 1;
      }

      var lenStr = ab.byteLength.toString();
      for (var i = 0; i < lenStr.length; i++) {
        resultArray[bufferIndex++] = parseInt(lenStr[i]);
      }
      resultArray[bufferIndex++] = 255;

      var view = new Uint8Array(ab);
      for (var i = 0; i < view.length; i++) {
        resultArray[bufferIndex++] = view[i];
      }
    });

    return callback(resultArray.buffer);
  });
};

/**
 * Encode as Blob
 */

exports.encodePayloadAsBlob = function(packets, callback) {
  function encodeOne(packet, doneCallback) {
    exports.encodePacket(packet, true, true, function(encoded) {
      var binaryIdentifier = new Uint8Array(1);
      binaryIdentifier[0] = 1;
      if (typeof encoded === 'string') {
        var view = new Uint8Array(encoded.length);
        for (var i = 0; i < encoded.length; i++) {
          view[i] = encoded.charCodeAt(i);
        }
        encoded = view.buffer;
        binaryIdentifier[0] = 0;
      }

      var len = (encoded instanceof ArrayBuffer)
        ? encoded.byteLength
        : encoded.size;

      var lenStr = len.toString();
      var lengthAry = new Uint8Array(lenStr.length + 1);
      for (var i = 0; i < lenStr.length; i++) {
        lengthAry[i] = parseInt(lenStr[i]);
      }
      lengthAry[lenStr.length] = 255;

      if (Blob) {
        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
        doneCallback(null, blob);
      }
    });
  }

  map(packets, encodeOne, function(err, results) {
    return callback(new Blob(results));
  });
};

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

exports.decodePayloadAsBinary = function (data, binaryType, callback) {
  if (typeof binaryType === 'function') {
    callback = binaryType;
    binaryType = null;
  }

  var bufferTail = data;
  var buffers = [];

  var numberTooLong = false;
  while (bufferTail.byteLength > 0) {
    var tailArray = new Uint8Array(bufferTail);
    var isString = tailArray[0] === 0;
    var msgLength = '';

    for (var i = 1; ; i++) {
      if (tailArray[i] == 255) break;

      if (msgLength.length > 310) {
        numberTooLong = true;
        break;
      }

      msgLength += tailArray[i];
    }

    if(numberTooLong) return callback(err, 0, 1);

    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
    msgLength = parseInt(msgLength);

    var msg = sliceBuffer(bufferTail, 0, msgLength);
    if (isString) {
      try {
        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
      } catch (e) {
        // iPhone Safari doesn't let you apply to typed arrays
        var typed = new Uint8Array(msg);
        msg = '';
        for (var i = 0; i < typed.length; i++) {
          msg += String.fromCharCode(typed[i]);
        }
      }
    }

    buffers.push(msg);
    bufferTail = sliceBuffer(bufferTail, msgLength);
  }

  var total = buffers.length;
  buffers.forEach(function(buffer, i) {
    callback(exports.decodePacket(buffer, binaryType, true), i, total);
  });
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./keys":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/lib/keys.js","after":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/after/index.js","arraybuffer.slice":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/arraybuffer.slice/index.js","base64-arraybuffer":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js","blob":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/blob/index.js","has-binary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/index.js","utf8":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/utf8/utf8.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/lib/keys.js":[function(require,module,exports){

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

module.exports = Object.keys || function keys (obj){
  var arr = [];
  var has = Object.prototype.hasOwnProperty;

  for (var i in obj) {
    if (has.call(obj, i)) {
      arr.push(i);
    }
  }
  return arr;
};

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/after/index.js":[function(require,module,exports){
module.exports = after

function after(count, callback, err_cb) {
    var bail = false
    err_cb = err_cb || noop
    proxy.count = count

    return (count === 0) ? callback() : proxy

    function proxy(err, result) {
        if (proxy.count <= 0) {
            throw new Error('after called too many times')
        }
        --proxy.count

        // after first error, rest are passed to err_cb
        if (err) {
            bail = true
            callback(err)
            // future error callbacks will go to error handler
            callback = err_cb
        } else if (proxy.count === 0 && !bail) {
            callback(null, result)
        }
    }
}

function noop() {}

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/arraybuffer.slice/index.js":[function(require,module,exports){
/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

module.exports = function(arraybuffer, start, end) {
  var bytes = arraybuffer.byteLength;
  start = start || 0;
  end = end || bytes;

  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

  if (start < 0) { start += bytes; }
  if (end < 0) { end += bytes; }
  if (end > bytes) { end = bytes; }

  if (start >= bytes || start >= end || bytes === 0) {
    return new ArrayBuffer(0);
  }

  var abv = new Uint8Array(arraybuffer);
  var result = new Uint8Array(end - start);
  for (var i = start, ii = 0; i < end; i++, ii++) {
    result[ii] = abv[i];
  }
  return result.buffer;
};

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/base64-arraybuffer/lib/base64-arraybuffer.js":[function(require,module,exports){
/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */
(function(chars){
  "use strict";

  exports.encode = function(arraybuffer) {
    var bytes = new Uint8Array(arraybuffer),
    i, len = bytes.length, base64 = "";

    for (i = 0; i < len; i+=3) {
      base64 += chars[bytes[i] >> 2];
      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
      base64 += chars[bytes[i + 2] & 63];
    }

    if ((len % 3) === 2) {
      base64 = base64.substring(0, base64.length - 1) + "=";
    } else if (len % 3 === 1) {
      base64 = base64.substring(0, base64.length - 2) + "==";
    }

    return base64;
  };

  exports.decode =  function(base64) {
    var bufferLength = base64.length * 0.75,
    len = base64.length, i, p = 0,
    encoded1, encoded2, encoded3, encoded4;

    if (base64[base64.length - 1] === "=") {
      bufferLength--;
      if (base64[base64.length - 2] === "=") {
        bufferLength--;
      }
    }

    var arraybuffer = new ArrayBuffer(bufferLength),
    bytes = new Uint8Array(arraybuffer);

    for (i = 0; i < len; i+=4) {
      encoded1 = chars.indexOf(base64[i]);
      encoded2 = chars.indexOf(base64[i+1]);
      encoded3 = chars.indexOf(base64[i+2]);
      encoded4 = chars.indexOf(base64[i+3]);

      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
    }

    return arraybuffer;
  };
})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/blob/index.js":[function(require,module,exports){
(function (global){
/**
 * Create a blob builder even when vendor prefixes exist
 */

var BlobBuilder = global.BlobBuilder
  || global.WebKitBlobBuilder
  || global.MSBlobBuilder
  || global.MozBlobBuilder;

/**
 * Check if Blob constructor is supported
 */

var blobSupported = (function() {
  try {
    var b = new Blob(['hi']);
    return b.size == 2;
  } catch(e) {
    return false;
  }
})();

/**
 * Check if BlobBuilder is supported
 */

var blobBuilderSupported = BlobBuilder
  && BlobBuilder.prototype.append
  && BlobBuilder.prototype.getBlob;

function BlobBuilderConstructor(ary, options) {
  options = options || {};

  var bb = new BlobBuilder();
  for (var i = 0; i < ary.length; i++) {
    bb.append(ary[i]);
  }
  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
};

module.exports = (function() {
  if (blobSupported) {
    return global.Blob;
  } else if (blobBuilderSupported) {
    return BlobBuilderConstructor;
  } else {
    return undefined;
  }
})();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/index.js":[function(require,module,exports){
(function (global){

/*
 * Module requirements.
 */

var isArray = require('isarray');

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      if (obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (obj.hasOwnProperty(key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"isarray":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/node_modules/isarray/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/node_modules/isarray/index.js":[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/utf8/utf8.js":[function(require,module,exports){
(function (global){
/*! http://mths.be/utf8js v2.0.0 by @mathias */
;(function(root) {

	// Detect free variables `exports`
	var freeExports = typeof exports == 'object' && exports;

	// Detect free variable `module`
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;

	// Detect free variable `global`, from Node.js or Browserified code,
	// and use it as `root`
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/*--------------------------------------------------------------------------*/

	var stringFromCharCode = String.fromCharCode;

	// Taken from http://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from http://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string) {
		var codePoints = ucs2decode(string);

		// console.log(JSON.stringify(codePoints.map(function(x) {
		// 	return 'U+' + x.toString(16).toUpperCase();
		// })));

		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol() {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			var byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString) {
		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol()) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	/*--------------------------------------------------------------------------*/

	var utf8 = {
		'version': '2.0.0',
		'encode': utf8encode,
		'decode': utf8decode
	};

	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define(function() {
			return utf8;
		});
	}	else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = utf8;
		} else { // in Narwhal or RingoJS v0.7.0-
			var object = {};
			var hasOwnProperty = object.hasOwnProperty;
			for (var key in utf8) {
				hasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.utf8 = utf8;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/has-cors/index.js":[function(require,module,exports){

/**
 * Module dependencies.
 */

var global = require('global');

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

try {
  module.exports = 'XMLHttpRequest' in global &&
    'withCredentials' in new global.XMLHttpRequest();
} catch (err) {
  // if XMLHttp support is disabled in IE then it will throw
  // when trying to create
  module.exports = false;
}

},{"global":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/has-cors/node_modules/global/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/has-cors/node_modules/global/index.js":[function(require,module,exports){

/**
 * Returns `this`. Execute this without a "context" (i.e. without it being
 * attached to an object of the left-hand side), and `this` points to the
 * "global" scope of the current JS execution.
 */

module.exports = (function () { return this; })();

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/indexof/index.js":[function(require,module,exports){

var indexOf = [].indexOf;

module.exports = function(arr, obj){
  if (indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/parsejson/index.js":[function(require,module,exports){
(function (global){
/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

var rvalidchars = /^[\],:{}\s]*$/;
var rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
var rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g;
var rtrimLeft = /^\s+/;
var rtrimRight = /\s+$/;

module.exports = function parsejson(data) {
  if ('string' != typeof data || !data) {
    return null;
  }

  data = data.replace(rtrimLeft, '').replace(rtrimRight, '');

  // Attempt to parse using the native JSON parser first
  if (global.JSON && JSON.parse) {
    return JSON.parse(data);
  }

  if (rvalidchars.test(data.replace(rvalidescape, '@')
      .replace(rvalidtokens, ']')
      .replace(rvalidbraces, ''))) {
    return (new Function('return ' + data))();
  }
};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/parseqs/index.js":[function(require,module,exports){
/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

exports.encode = function (obj) {
  var str = '';

  for (var i in obj) {
    if (obj.hasOwnProperty(i)) {
      if (str.length) str += '&';
      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
    }
  }

  return str;
};

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

exports.decode = function(qs){
  var qry = {};
  var pairs = qs.split('&');
  for (var i = 0, l = pairs.length; i < l; i++) {
    var pair = pairs[i].split('=');
    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
  }
  return qry;
};

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/parseuri/index.js":[function(require,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
    var src = str,
        b = str.indexOf('['),
        e = str.indexOf(']');

    if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
    }

    var m = re.exec(str || ''),
        uri = {},
        i = 14;

    while (i--) {
        uri[parts[i]] = m[i] || '';
    }

    if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
        uri.ipv6uri = true;
    }

    return uri;
};

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/ws/lib/browser.js":[function(require,module,exports){

/**
 * Module dependencies.
 */

var global = (function() { return this; })();

/**
 * WebSocket constructor.
 */

var WebSocket = global.WebSocket || global.MozWebSocket;

/**
 * Module exports.
 */

module.exports = WebSocket ? ws : null;

/**
 * WebSocket constructor.
 *
 * The third `opts` options object gets ignored in web browsers, since it's
 * non-standard, and throws a TypeError if passed to the constructor.
 * See: https://github.com/einaros/ws/issues/227
 *
 * @param {String} uri
 * @param {Array} protocols (optional)
 * @param {Object) opts (optional)
 * @api public
 */

function ws(uri, protocols, opts) {
  var instance;
  if (protocols) {
    instance = new WebSocket(uri, protocols);
  } else {
    instance = new WebSocket(uri);
  }
  return instance;
}

if (WebSocket) ws.prototype = WebSocket.prototype;

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/monotonic-timestamp/index.js":[function(require,module,exports){
// If `Date.now()` is invoked twice quickly, it's possible to get two
// identical time stamps. To avoid generation duplications, subsequent
// calls are manually ordered to force uniqueness.

var _last = 0
var _count = 1
var adjusted = 0
var _adjusted = 0

module.exports =
function timestamp() {
  /**
  Returns NOT an accurate representation of the current time.
  Since js only measures time as ms, if you call `Date.now()`
  twice quickly, it's possible to get two identical time stamps.
  This function guarantees unique but maybe inaccurate results
  on each call.
  **/
  //uncomment this wen
  var time = Date.now()
  //time = ~~ (time / 1000) 
  //^^^uncomment when testing...

  /**
  If time returned is same as in last call, adjust it by
  adding a number based on the counter. 
  Counter is incremented so that next call get's adjusted properly.
  Because floats have restricted precision, 
  may need to step past some values...
  **/
  if (_last === time)  {
    do {
      adjusted = time + ((_count++) / (_count + 999))
    } while (adjusted === _adjusted)
    _adjusted = adjusted
  }
  // If last time was different reset timer back to `1`.
  else {
    _count = 1
    adjusted = time
  }
  _adjusted = adjusted
  _last = time
  return adjusted
}

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/index.js":[function(require,module,exports){

module.exports = require('./lib/');

},{"./lib/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/index.js":[function(require,module,exports){

/**
 * Module dependencies.
 */

var url = require('./url');
var parser = require('socket.io-parser');
var Manager = require('./manager');
var debug = require('debug')('socket.io-client');

/**
 * Module exports.
 */

module.exports = exports = lookup;

/**
 * Managers cache.
 */

var cache = exports.managers = {};

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

function lookup(uri, opts) {
  if (typeof uri == 'object') {
    opts = uri;
    uri = undefined;
  }

  opts = opts || {};

  var parsed = url(uri);
  var source = parsed.source;
  var id = parsed.id;
  var io;

  if (opts.forceNew || opts['force new connection'] || false === opts.multiplex) {
    debug('ignoring socket cache for %s', source);
    io = Manager(source, opts);
  } else {
    if (!cache[id]) {
      debug('new io instance for %s', source);
      cache[id] = Manager(source, opts);
    }
    io = cache[id];
  }

  return io.socket(parsed.path);
}

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = parser.protocol;

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

exports.connect = lookup;

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

exports.Manager = require('./manager');
exports.Socket = require('./socket');

},{"./manager":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/manager.js","./socket":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/socket.js","./url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/url.js","debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/debug/debug.js","socket.io-parser":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/manager.js":[function(require,module,exports){

/**
 * Module dependencies.
 */

var url = require('./url');
var eio = require('engine.io-client');
var Socket = require('./socket');
var Emitter = require('component-emitter');
var parser = require('socket.io-parser');
var on = require('./on');
var bind = require('component-bind');
var object = require('object-component');
var debug = require('debug')('socket.io-client:manager');
var indexOf = require('indexof');
var Backoff = require('backo2');

/**
 * Module exports
 */

module.exports = Manager;

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

function Manager(uri, opts){
  if (!(this instanceof Manager)) return new Manager(uri, opts);
  if (uri && ('object' == typeof uri)) {
    opts = uri;
    uri = undefined;
  }
  opts = opts || {};

  opts.path = opts.path || '/socket.io';
  this.nsps = {};
  this.subs = [];
  this.opts = opts;
  this.reconnection(opts.reconnection !== false);
  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
  this.reconnectionDelay(opts.reconnectionDelay || 1000);
  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
  this.randomizationFactor(opts.randomizationFactor || 0.5);
  this.backoff = new Backoff({
    min: this.reconnectionDelay(),
    max: this.reconnectionDelayMax(),
    jitter: this.randomizationFactor()
  });
  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
  this.readyState = 'closed';
  this.uri = uri;
  this.connected = [];
  this.encoding = false;
  this.packetBuffer = [];
  this.encoder = new parser.Encoder();
  this.decoder = new parser.Decoder();
  this.autoConnect = opts.autoConnect !== false;
  if (this.autoConnect) this.open();
}

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

Manager.prototype.emitAll = function() {
  this.emit.apply(this, arguments);
  for (var nsp in this.nsps) {
    this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
  }
};

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

Manager.prototype.updateSocketIds = function(){
  for (var nsp in this.nsps) {
    this.nsps[nsp].id = this.engine.id;
  }
};

/**
 * Mix in `Emitter`.
 */

Emitter(Manager.prototype);

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnection = function(v){
  if (!arguments.length) return this._reconnection;
  this._reconnection = !!v;
  return this;
};

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionAttempts = function(v){
  if (!arguments.length) return this._reconnectionAttempts;
  this._reconnectionAttempts = v;
  return this;
};

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelay = function(v){
  if (!arguments.length) return this._reconnectionDelay;
  this._reconnectionDelay = v;
  this.backoff && this.backoff.setMin(v);
  return this;
};

Manager.prototype.randomizationFactor = function(v){
  if (!arguments.length) return this._randomizationFactor;
  this._randomizationFactor = v;
  this.backoff && this.backoff.setJitter(v);
  return this;
};

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.reconnectionDelayMax = function(v){
  if (!arguments.length) return this._reconnectionDelayMax;
  this._reconnectionDelayMax = v;
  this.backoff && this.backoff.setMax(v);
  return this;
};

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

Manager.prototype.timeout = function(v){
  if (!arguments.length) return this._timeout;
  this._timeout = v;
  return this;
};

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

Manager.prototype.maybeReconnectOnOpen = function() {
  // Only try to reconnect if it's the first time we're connecting
  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
    // keeps reconnection from firing twice for the same reconnection loop
    this.reconnect();
  }
};


/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

Manager.prototype.open =
Manager.prototype.connect = function(fn){
  debug('readyState %s', this.readyState);
  if (~this.readyState.indexOf('open')) return this;

  debug('opening %s', this.uri);
  this.engine = eio(this.uri, this.opts);
  var socket = this.engine;
  var self = this;
  this.readyState = 'opening';
  this.skipReconnect = false;

  // emit `open`
  var openSub = on(socket, 'open', function() {
    self.onopen();
    fn && fn();
  });

  // emit `connect_error`
  var errorSub = on(socket, 'error', function(data){
    debug('connect_error');
    self.cleanup();
    self.readyState = 'closed';
    self.emitAll('connect_error', data);
    if (fn) {
      var err = new Error('Connection error');
      err.data = data;
      fn(err);
    } else {
      // Only do this if there is no fn to handle the error
      self.maybeReconnectOnOpen();
    }
  });

  // emit `connect_timeout`
  if (false !== this._timeout) {
    var timeout = this._timeout;
    debug('connect attempt will timeout after %d', timeout);

    // set timer
    var timer = setTimeout(function(){
      debug('connect attempt timed out after %d', timeout);
      openSub.destroy();
      socket.close();
      socket.emit('error', 'timeout');
      self.emitAll('connect_timeout', timeout);
    }, timeout);

    this.subs.push({
      destroy: function(){
        clearTimeout(timer);
      }
    });
  }

  this.subs.push(openSub);
  this.subs.push(errorSub);

  return this;
};

/**
 * Called upon transport open.
 *
 * @api private
 */

Manager.prototype.onopen = function(){
  debug('open');

  // clear old subs
  this.cleanup();

  // mark as open
  this.readyState = 'open';
  this.emit('open');

  // add new subs
  var socket = this.engine;
  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
};

/**
 * Called with data.
 *
 * @api private
 */

Manager.prototype.ondata = function(data){
  this.decoder.add(data);
};

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

Manager.prototype.ondecoded = function(packet) {
  this.emit('packet', packet);
};

/**
 * Called upon socket error.
 *
 * @api private
 */

Manager.prototype.onerror = function(err){
  debug('error', err);
  this.emitAll('error', err);
};

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

Manager.prototype.socket = function(nsp){
  var socket = this.nsps[nsp];
  if (!socket) {
    socket = new Socket(this, nsp);
    this.nsps[nsp] = socket;
    var self = this;
    socket.on('connect', function(){
      socket.id = self.engine.id;
      if (!~indexOf(self.connected, socket)) {
        self.connected.push(socket);
      }
    });
  }
  return socket;
};

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

Manager.prototype.destroy = function(socket){
  var index = indexOf(this.connected, socket);
  if (~index) this.connected.splice(index, 1);
  if (this.connected.length) return;

  this.close();
};

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

Manager.prototype.packet = function(packet){
  debug('writing packet %j', packet);
  var self = this;

  if (!self.encoding) {
    // encode, then write to engine with result
    self.encoding = true;
    this.encoder.encode(packet, function(encodedPackets) {
      for (var i = 0; i < encodedPackets.length; i++) {
        self.engine.write(encodedPackets[i]);
      }
      self.encoding = false;
      self.processPacketQueue();
    });
  } else { // add packet to the queue
    self.packetBuffer.push(packet);
  }
};

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

Manager.prototype.processPacketQueue = function() {
  if (this.packetBuffer.length > 0 && !this.encoding) {
    var pack = this.packetBuffer.shift();
    this.packet(pack);
  }
};

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

Manager.prototype.cleanup = function(){
  var sub;
  while (sub = this.subs.shift()) sub.destroy();

  this.packetBuffer = [];
  this.encoding = false;

  this.decoder.destroy();
};

/**
 * Close the current socket.
 *
 * @api private
 */

Manager.prototype.close =
Manager.prototype.disconnect = function(){
  this.skipReconnect = true;
  this.backoff.reset();
  this.readyState = 'closed';
  this.engine && this.engine.close();
};

/**
 * Called upon engine close.
 *
 * @api private
 */

Manager.prototype.onclose = function(reason){
  debug('close');
  this.cleanup();
  this.backoff.reset();
  this.readyState = 'closed';
  this.emit('close', reason);
  if (this._reconnection && !this.skipReconnect) {
    this.reconnect();
  }
};

/**
 * Attempt a reconnection.
 *
 * @api private
 */

Manager.prototype.reconnect = function(){
  if (this.reconnecting || this.skipReconnect) return this;

  var self = this;

  if (this.backoff.attempts >= this._reconnectionAttempts) {
    debug('reconnect failed');
    this.backoff.reset();
    this.emitAll('reconnect_failed');
    this.reconnecting = false;
  } else {
    var delay = this.backoff.duration();
    debug('will wait %dms before reconnect attempt', delay);

    this.reconnecting = true;
    var timer = setTimeout(function(){
      if (self.skipReconnect) return;

      debug('attempting reconnect');
      self.emitAll('reconnect_attempt', self.backoff.attempts);
      self.emitAll('reconnecting', self.backoff.attempts);

      // check again for the case socket closed in above events
      if (self.skipReconnect) return;

      self.open(function(err){
        if (err) {
          debug('reconnect attempt error');
          self.reconnecting = false;
          self.reconnect();
          self.emitAll('reconnect_error', err.data);
        } else {
          debug('reconnect success');
          self.onreconnect();
        }
      });
    }, delay);

    this.subs.push({
      destroy: function(){
        clearTimeout(timer);
      }
    });
  }
};

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

Manager.prototype.onreconnect = function(){
  var attempt = this.backoff.attempts;
  this.reconnecting = false;
  this.backoff.reset();
  this.updateSocketIds();
  this.emitAll('reconnect', attempt);
};

},{"./on":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/on.js","./socket":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/socket.js","./url":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/url.js","backo2":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/backo2/index.js","component-bind":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/component-bind/index.js","component-emitter":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/component-emitter/index.js","debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/debug/debug.js","engine.io-client":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/index.js","indexof":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/indexof/index.js","object-component":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/object-component/index.js","socket.io-parser":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/on.js":[function(require,module,exports){

/**
 * Module exports.
 */

module.exports = on;

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

function on(obj, ev, fn) {
  obj.on(ev, fn);
  return {
    destroy: function(){
      obj.removeListener(ev, fn);
    }
  };
}

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/socket.js":[function(require,module,exports){

/**
 * Module dependencies.
 */

var parser = require('socket.io-parser');
var Emitter = require('component-emitter');
var toArray = require('to-array');
var on = require('./on');
var bind = require('component-bind');
var debug = require('debug')('socket.io-client:socket');
var hasBin = require('has-binary');

/**
 * Module exports.
 */

module.exports = exports = Socket;

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

var events = {
  connect: 1,
  connect_error: 1,
  connect_timeout: 1,
  disconnect: 1,
  error: 1,
  reconnect: 1,
  reconnect_attempt: 1,
  reconnect_failed: 1,
  reconnect_error: 1,
  reconnecting: 1
};

/**
 * Shortcut to `Emitter#emit`.
 */

var emit = Emitter.prototype.emit;

/**
 * `Socket` constructor.
 *
 * @api public
 */

function Socket(io, nsp){
  this.io = io;
  this.nsp = nsp;
  this.json = this; // compat
  this.ids = 0;
  this.acks = {};
  if (this.io.autoConnect) this.open();
  this.receiveBuffer = [];
  this.sendBuffer = [];
  this.connected = false;
  this.disconnected = true;
}

/**
 * Mix in `Emitter`.
 */

Emitter(Socket.prototype);

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

Socket.prototype.subEvents = function() {
  if (this.subs) return;

  var io = this.io;
  this.subs = [
    on(io, 'open', bind(this, 'onopen')),
    on(io, 'packet', bind(this, 'onpacket')),
    on(io, 'close', bind(this, 'onclose'))
  ];
};

/**
 * "Opens" the socket.
 *
 * @api public
 */

Socket.prototype.open =
Socket.prototype.connect = function(){
  if (this.connected) return this;

  this.subEvents();
  this.io.open(); // ensure open
  if ('open' == this.io.readyState) this.onopen();
  return this;
};

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.send = function(){
  var args = toArray(arguments);
  args.unshift('message');
  this.emit.apply(this, args);
  return this;
};

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

Socket.prototype.emit = function(ev){
  if (events.hasOwnProperty(ev)) {
    emit.apply(this, arguments);
    return this;
  }

  var args = toArray(arguments);
  var parserType = parser.EVENT; // default
  if (hasBin(args)) { parserType = parser.BINARY_EVENT; } // binary
  var packet = { type: parserType, data: args };

  // event ack callback
  if ('function' == typeof args[args.length - 1]) {
    debug('emitting packet with ack id %d', this.ids);
    this.acks[this.ids] = args.pop();
    packet.id = this.ids++;
  }

  if (this.connected) {
    this.packet(packet);
  } else {
    this.sendBuffer.push(packet);
  }

  return this;
};

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.packet = function(packet){
  packet.nsp = this.nsp;
  this.io.packet(packet);
};

/**
 * Called upon engine `open`.
 *
 * @api private
 */

Socket.prototype.onopen = function(){
  debug('transport is open - connecting');

  // write connect packet if necessary
  if ('/' != this.nsp) {
    this.packet({ type: parser.CONNECT });
  }
};

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

Socket.prototype.onclose = function(reason){
  debug('close (%s)', reason);
  this.connected = false;
  this.disconnected = true;
  delete this.id;
  this.emit('disconnect', reason);
};

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onpacket = function(packet){
  if (packet.nsp != this.nsp) return;

  switch (packet.type) {
    case parser.CONNECT:
      this.onconnect();
      break;

    case parser.EVENT:
      this.onevent(packet);
      break;

    case parser.BINARY_EVENT:
      this.onevent(packet);
      break;

    case parser.ACK:
      this.onack(packet);
      break;

    case parser.BINARY_ACK:
      this.onack(packet);
      break;

    case parser.DISCONNECT:
      this.ondisconnect();
      break;

    case parser.ERROR:
      this.emit('error', packet.data);
      break;
  }
};

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onevent = function(packet){
  var args = packet.data || [];
  debug('emitting event %j', args);

  if (null != packet.id) {
    debug('attaching ack callback to event');
    args.push(this.ack(packet.id));
  }

  if (this.connected) {
    emit.apply(this, args);
  } else {
    this.receiveBuffer.push(args);
  }
};

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

Socket.prototype.ack = function(id){
  var self = this;
  var sent = false;
  return function(){
    // prevent double callbacks
    if (sent) return;
    sent = true;
    var args = toArray(arguments);
    debug('sending ack %j', args);

    var type = hasBin(args) ? parser.BINARY_ACK : parser.ACK;
    self.packet({
      type: type,
      id: id,
      data: args
    });
  };
};

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

Socket.prototype.onack = function(packet){
  debug('calling ack %s with %j', packet.id, packet.data);
  var fn = this.acks[packet.id];
  fn.apply(this, packet.data);
  delete this.acks[packet.id];
};

/**
 * Called upon server connect.
 *
 * @api private
 */

Socket.prototype.onconnect = function(){
  this.connected = true;
  this.disconnected = false;
  this.emit('connect');
  this.emitBuffered();
};

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

Socket.prototype.emitBuffered = function(){
  var i;
  for (i = 0; i < this.receiveBuffer.length; i++) {
    emit.apply(this, this.receiveBuffer[i]);
  }
  this.receiveBuffer = [];

  for (i = 0; i < this.sendBuffer.length; i++) {
    this.packet(this.sendBuffer[i]);
  }
  this.sendBuffer = [];
};

/**
 * Called upon server disconnect.
 *
 * @api private
 */

Socket.prototype.ondisconnect = function(){
  debug('server disconnect (%s)', this.nsp);
  this.destroy();
  this.onclose('io server disconnect');
};

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

Socket.prototype.destroy = function(){
  if (this.subs) {
    // clean subscriptions to avoid reconnections
    for (var i = 0; i < this.subs.length; i++) {
      this.subs[i].destroy();
    }
    this.subs = null;
  }

  this.io.destroy(this);
};

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

Socket.prototype.close =
Socket.prototype.disconnect = function(){
  if (this.connected) {
    debug('performing disconnect (%s)', this.nsp);
    this.packet({ type: parser.DISCONNECT });
  }

  // remove socket from pool
  this.destroy();

  if (this.connected) {
    // fire events
    this.onclose('io client disconnect');
  }
  return this;
};

},{"./on":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/on.js","component-bind":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/component-bind/index.js","component-emitter":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/component-emitter/index.js","debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/debug/debug.js","has-binary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/has-binary/index.js","socket.io-parser":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/index.js","to-array":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/to-array/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/lib/url.js":[function(require,module,exports){
(function (global){

/**
 * Module dependencies.
 */

var parseuri = require('parseuri');
var debug = require('debug')('socket.io-client:url');

/**
 * Module exports.
 */

module.exports = url;

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

function url(uri, loc){
  var obj = uri;

  // default to window.location
  var loc = loc || global.location;
  if (null == uri) uri = loc.protocol + '//' + loc.host;

  // relative path support
  if ('string' == typeof uri) {
    if ('/' == uri.charAt(0)) {
      if ('/' == uri.charAt(1)) {
        uri = loc.protocol + uri;
      } else {
        uri = loc.hostname + uri;
      }
    }

    if (!/^(https?|wss?):\/\//.test(uri)) {
      debug('protocol-less url %s', uri);
      if ('undefined' != typeof loc) {
        uri = loc.protocol + '//' + uri;
      } else {
        uri = 'https://' + uri;
      }
    }

    // parse
    debug('parse %s', uri);
    obj = parseuri(uri);
  }

  // make sure we treat `localhost:80` and `localhost` equally
  if (!obj.port) {
    if (/^(http|ws)$/.test(obj.protocol)) {
      obj.port = '80';
    }
    else if (/^(http|ws)s$/.test(obj.protocol)) {
      obj.port = '443';
    }
  }

  obj.path = obj.path || '/';

  // define unique id
  obj.id = obj.protocol + '://' + obj.host + ':' + obj.port;
  // define href
  obj.href = obj.protocol + '://' + obj.host + (loc && loc.port == obj.port ? '' : (':' + obj.port));

  return obj;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/debug/debug.js","parseuri":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/parseuri/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/backo2/index.js":[function(require,module,exports){

/**
 * Expose `Backoff`.
 */

module.exports = Backoff;

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

function Backoff(opts) {
  opts = opts || {};
  this.ms = opts.min || 100;
  this.max = opts.max || 10000;
  this.factor = opts.factor || 2;
  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
  this.attempts = 0;
}

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

Backoff.prototype.duration = function(){
  var ms = this.ms * Math.pow(this.factor, this.attempts++);
  if (this.jitter) {
    var rand =  Math.random();
    var deviation = Math.floor(rand * this.jitter * ms);
    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
  }
  return Math.min(ms, this.max) | 0;
};

/**
 * Reset the number of attempts.
 *
 * @api public
 */

Backoff.prototype.reset = function(){
  this.attempts = 0;
};

/**
 * Set the minimum duration
 *
 * @api public
 */

Backoff.prototype.setMin = function(min){
  this.ms = min;
};

/**
 * Set the maximum duration
 *
 * @api public
 */

Backoff.prototype.setMax = function(max){
  this.max = max;
};

/**
 * Set the jitter
 *
 * @api public
 */

Backoff.prototype.setJitter = function(jitter){
  this.jitter = jitter;
};


},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/component-bind/index.js":[function(require,module,exports){
/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/component-emitter/index.js":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/cloud/emitter.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/debug/debug.js":[function(require,module,exports){

/**
 * Expose `debug()` as the module.
 */

module.exports = debug;

/**
 * Create a debugger with the given `name`.
 *
 * @param {String} name
 * @return {Type}
 * @api public
 */

function debug(name) {
  if (!debug.enabled(name)) return function(){};

  return function(fmt){
    fmt = coerce(fmt);

    var curr = new Date;
    var ms = curr - (debug[name] || curr);
    debug[name] = curr;

    fmt = name
      + ' '
      + fmt
      + ' +' + debug.humanize(ms);

    // This hackery is required for IE8
    // where `console.log` doesn't have 'apply'
    window.console
      && console.log
      && Function.prototype.apply.call(console.log, console, arguments);
  }
}

/**
 * The currently active debug mode names.
 */

debug.names = [];
debug.skips = [];

/**
 * Enables a debug mode by name. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} name
 * @api public
 */

debug.enable = function(name) {
  try {
    localStorage.debug = name;
  } catch(e){}

  var split = (name || '').split(/[\s,]+/)
    , len = split.length;

  for (var i = 0; i < len; i++) {
    name = split[i].replace('*', '.*?');
    if (name[0] === '-') {
      debug.skips.push(new RegExp('^' + name.substr(1) + '$'));
    }
    else {
      debug.names.push(new RegExp('^' + name + '$'));
    }
  }
};

/**
 * Disable debug output.
 *
 * @api public
 */

debug.disable = function(){
  debug.enable('');
};

/**
 * Humanize the given `ms`.
 *
 * @param {Number} m
 * @return {String}
 * @api private
 */

debug.humanize = function(ms) {
  var sec = 1000
    , min = 60 * 1000
    , hour = 60 * min;

  if (ms >= hour) return (ms / hour).toFixed(1) + 'h';
  if (ms >= min) return (ms / min).toFixed(1) + 'm';
  if (ms >= sec) return (ms / sec | 0) + 's';
  return ms + 'ms';
};

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

debug.enabled = function(name) {
  for (var i = 0, len = debug.skips.length; i < len; i++) {
    if (debug.skips[i].test(name)) {
      return false;
    }
  }
  for (var i = 0, len = debug.names.length; i < len; i++) {
    if (debug.names[i].test(name)) {
      return true;
    }
  }
  return false;
};

/**
 * Coerce `val`.
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

// persist

try {
  if (window.localStorage) debug.enable(localStorage.debug);
} catch(e){}

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/has-binary/index.js":[function(require,module,exports){
(function (global){

/*
 * Module requirements.
 */

var isArray = require('isarray');

/**
 * Module exports.
 */

module.exports = hasBinary;

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

function hasBinary(data) {

  function _hasBinary(obj) {
    if (!obj) return false;

    if ( (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer) ||
         (global.Blob && obj instanceof Blob) ||
         (global.File && obj instanceof File)
        ) {
      return true;
    }

    if (isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
          if (_hasBinary(obj[i])) {
              return true;
          }
      }
    } else if (obj && 'object' == typeof obj) {
      if (obj.toJSON) {
        obj = obj.toJSON();
      }

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && _hasBinary(obj[key])) {
          return true;
        }
      }
    }

    return false;
  }

  return _hasBinary(data);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"isarray":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/has-binary/node_modules/isarray/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/has-binary/node_modules/isarray/index.js":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/node_modules/isarray/index.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/indexof/index.js":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/indexof/index.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/object-component/index.js":[function(require,module,exports){

/**
 * HOP ref.
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Return own keys in `obj`.
 *
 * @param {Object} obj
 * @return {Array}
 * @api public
 */

exports.keys = Object.keys || function(obj){
  var keys = [];
  for (var key in obj) {
    if (has.call(obj, key)) {
      keys.push(key);
    }
  }
  return keys;
};

/**
 * Return own values in `obj`.
 *
 * @param {Object} obj
 * @return {Array}
 * @api public
 */

exports.values = function(obj){
  var vals = [];
  for (var key in obj) {
    if (has.call(obj, key)) {
      vals.push(obj[key]);
    }
  }
  return vals;
};

/**
 * Merge `b` into `a`.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object} a
 * @api public
 */

exports.merge = function(a, b){
  for (var key in b) {
    if (has.call(b, key)) {
      a[key] = b[key];
    }
  }
  return a;
};

/**
 * Return length of `obj`.
 *
 * @param {Object} obj
 * @return {Number}
 * @api public
 */

exports.length = function(obj){
  return exports.keys(obj).length;
};

/**
 * Check if `obj` is empty.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api public
 */

exports.isEmpty = function(obj){
  return 0 == exports.length(obj);
};
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/parseuri/index.js":[function(require,module,exports){
/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

var parts = [
    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host'
  , 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
];

module.exports = function parseuri(str) {
  var m = re.exec(str || '')
    , uri = {}
    , i = 14;

  while (i--) {
    uri[parts[i]] = m[i] || '';
  }

  return uri;
};

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/binary.js":[function(require,module,exports){
(function (global){
/*global Blob,File*/

/**
 * Module requirements
 */

var isArray = require('isarray');
var isBuf = require('./is-buffer');

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

exports.deconstructPacket = function(packet){
  var buffers = [];
  var packetData = packet.data;

  function _deconstructPacket(data) {
    if (!data) return data;

    if (isBuf(data)) {
      var placeholder = { _placeholder: true, num: buffers.length };
      buffers.push(data);
      return placeholder;
    } else if (isArray(data)) {
      var newData = new Array(data.length);
      for (var i = 0; i < data.length; i++) {
        newData[i] = _deconstructPacket(data[i]);
      }
      return newData;
    } else if ('object' == typeof data && !(data instanceof Date)) {
      var newData = {};
      for (var key in data) {
        newData[key] = _deconstructPacket(data[key]);
      }
      return newData;
    }
    return data;
  }

  var pack = packet;
  pack.data = _deconstructPacket(packetData);
  pack.attachments = buffers.length; // number of binary 'attachments'
  return {packet: pack, buffers: buffers};
};

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

exports.reconstructPacket = function(packet, buffers) {
  var curPlaceHolder = 0;

  function _reconstructPacket(data) {
    if (data && data._placeholder) {
      var buf = buffers[data.num]; // appropriate buffer (should be natural order anyway)
      return buf;
    } else if (isArray(data)) {
      for (var i = 0; i < data.length; i++) {
        data[i] = _reconstructPacket(data[i]);
      }
      return data;
    } else if (data && 'object' == typeof data) {
      for (var key in data) {
        data[key] = _reconstructPacket(data[key]);
      }
      return data;
    }
    return data;
  }

  packet.data = _reconstructPacket(packet.data);
  packet.attachments = undefined; // no longer useful
  return packet;
};

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

exports.removeBlobs = function(data, callback) {
  function _removeBlobs(obj, curKey, containingObject) {
    if (!obj) return obj;

    // convert any blob
    if ((global.Blob && obj instanceof Blob) ||
        (global.File && obj instanceof File)) {
      pendingBlobs++;

      // async filereader
      var fileReader = new FileReader();
      fileReader.onload = function() { // this.result == arraybuffer
        if (containingObject) {
          containingObject[curKey] = this.result;
        }
        else {
          bloblessData = this.result;
        }

        // if nothing pending its callback time
        if(! --pendingBlobs) {
          callback(bloblessData);
        }
      };

      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
    } else if (isArray(obj)) { // handle array
      for (var i = 0; i < obj.length; i++) {
        _removeBlobs(obj[i], i, obj);
      }
    } else if (obj && 'object' == typeof obj && !isBuf(obj)) { // and object
      for (var key in obj) {
        _removeBlobs(obj[key], key, obj);
      }
    }
  }

  var pendingBlobs = 0;
  var bloblessData = data;
  _removeBlobs(bloblessData);
  if (!pendingBlobs) {
    callback(bloblessData);
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./is-buffer":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js","isarray":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/node_modules/isarray/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/index.js":[function(require,module,exports){

/**
 * Module dependencies.
 */

var debug = require('debug')('socket.io-parser');
var json = require('json3');
var isArray = require('isarray');
var Emitter = require('component-emitter');
var binary = require('./binary');
var isBuf = require('./is-buffer');

/**
 * Protocol version.
 *
 * @api public
 */

exports.protocol = 4;

/**
 * Packet types.
 *
 * @api public
 */

exports.types = [
  'CONNECT',
  'DISCONNECT',
  'EVENT',
  'BINARY_EVENT',
  'ACK',
  'BINARY_ACK',
  'ERROR'
];

/**
 * Packet type `connect`.
 *
 * @api public
 */

exports.CONNECT = 0;

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

exports.DISCONNECT = 1;

/**
 * Packet type `event`.
 *
 * @api public
 */

exports.EVENT = 2;

/**
 * Packet type `ack`.
 *
 * @api public
 */

exports.ACK = 3;

/**
 * Packet type `error`.
 *
 * @api public
 */

exports.ERROR = 4;

/**
 * Packet type 'binary event'
 *
 * @api public
 */

exports.BINARY_EVENT = 5;

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

exports.BINARY_ACK = 6;

/**
 * Encoder constructor.
 *
 * @api public
 */

exports.Encoder = Encoder;

/**
 * Decoder constructor.
 *
 * @api public
 */

exports.Decoder = Decoder;

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

function Encoder() {}

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

Encoder.prototype.encode = function(obj, callback){
  debug('encoding packet %j', obj);

  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    encodeAsBinary(obj, callback);
  }
  else {
    var encoding = encodeAsString(obj);
    callback([encoding]);
  }
};

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

function encodeAsString(obj) {
  var str = '';
  var nsp = false;

  // first is type
  str += obj.type;

  // attachments if we have them
  if (exports.BINARY_EVENT == obj.type || exports.BINARY_ACK == obj.type) {
    str += obj.attachments;
    str += '-';
  }

  // if we have a namespace other than `/`
  // we append it followed by a comma `,`
  if (obj.nsp && '/' != obj.nsp) {
    nsp = true;
    str += obj.nsp;
  }

  // immediately followed by the id
  if (null != obj.id) {
    if (nsp) {
      str += ',';
      nsp = false;
    }
    str += obj.id;
  }

  // json data
  if (null != obj.data) {
    if (nsp) str += ',';
    str += json.stringify(obj.data);
  }

  debug('encoded %j as %s', obj, str);
  return str;
}

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

function encodeAsBinary(obj, callback) {

  function writeEncoding(bloblessData) {
    var deconstruction = binary.deconstructPacket(bloblessData);
    var pack = encodeAsString(deconstruction.packet);
    var buffers = deconstruction.buffers;

    buffers.unshift(pack); // add packet info to beginning of data list
    callback(buffers); // write all the buffers
  }

  binary.removeBlobs(obj, writeEncoding);
}

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

function Decoder() {
  this.reconstructor = null;
}

/**
 * Mix in `Emitter` with Decoder.
 */

Emitter(Decoder.prototype);

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

Decoder.prototype.add = function(obj) {
  var packet;
  if ('string' == typeof obj) {
    packet = decodeString(obj);
    if (exports.BINARY_EVENT == packet.type || exports.BINARY_ACK == packet.type) { // binary packet's json
      this.reconstructor = new BinaryReconstructor(packet);

      // no attachments, labeled binary but no binary data to follow
      if (this.reconstructor.reconPack.attachments === 0) {
        this.emit('decoded', packet);
      }
    } else { // non-binary full packet
      this.emit('decoded', packet);
    }
  }
  else if (isBuf(obj) || obj.base64) { // raw binary data
    if (!this.reconstructor) {
      throw new Error('got binary data when not reconstructing a packet');
    } else {
      packet = this.reconstructor.takeBinaryData(obj);
      if (packet) { // received final buffer
        this.reconstructor = null;
        this.emit('decoded', packet);
      }
    }
  }
  else {
    throw new Error('Unknown type: ' + obj);
  }
};

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

function decodeString(str) {
  var p = {};
  var i = 0;

  // look up type
  p.type = Number(str.charAt(0));
  if (null == exports.types[p.type]) return error();

  // look up attachments if type binary
  if (exports.BINARY_EVENT == p.type || exports.BINARY_ACK == p.type) {
    var buf = '';
    while (str.charAt(++i) != '-') {
      buf += str.charAt(i);
      if (i == str.length) break;
    }
    if (buf != Number(buf) || str.charAt(i) != '-') {
      throw new Error('Illegal attachments');
    }
    p.attachments = Number(buf);
  }

  // look up namespace (if any)
  if ('/' == str.charAt(i + 1)) {
    p.nsp = '';
    while (++i) {
      var c = str.charAt(i);
      if (',' == c) break;
      p.nsp += c;
      if (i == str.length) break;
    }
  } else {
    p.nsp = '/';
  }

  // look up id
  var next = str.charAt(i + 1);
  if ('' !== next && Number(next) == next) {
    p.id = '';
    while (++i) {
      var c = str.charAt(i);
      if (null == c || Number(c) != c) {
        --i;
        break;
      }
      p.id += str.charAt(i);
      if (i == str.length) break;
    }
    p.id = Number(p.id);
  }

  // look up json data
  if (str.charAt(++i)) {
    try {
      p.data = json.parse(str.substr(i));
    } catch(e){
      return error();
    }
  }

  debug('decoded %s as %j', str, p);
  return p;
}

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

Decoder.prototype.destroy = function() {
  if (this.reconstructor) {
    this.reconstructor.finishedReconstruction();
  }
};

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

function BinaryReconstructor(packet) {
  this.reconPack = packet;
  this.buffers = [];
}

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

BinaryReconstructor.prototype.takeBinaryData = function(binData) {
  this.buffers.push(binData);
  if (this.buffers.length == this.reconPack.attachments) { // done with buffer list
    var packet = binary.reconstructPacket(this.reconPack, this.buffers);
    this.finishedReconstruction();
    return packet;
  }
  return null;
};

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

BinaryReconstructor.prototype.finishedReconstruction = function() {
  this.reconPack = null;
  this.buffers = [];
};

function error(data){
  return {
    type: exports.ERROR,
    data: 'parser error'
  };
}

},{"./binary":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/binary.js","./is-buffer":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js","component-emitter":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/component-emitter/index.js","debug":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/debug/debug.js","isarray":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/node_modules/isarray/index.js","json3":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/node_modules/json3/lib/json3.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/is-buffer.js":[function(require,module,exports){
(function (global){

module.exports = isBuf;

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

function isBuf(obj) {
  return (global.Buffer && global.Buffer.isBuffer(obj)) ||
         (global.ArrayBuffer && obj instanceof ArrayBuffer);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/node_modules/isarray/index.js":[function(require,module,exports){
arguments[4]["/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/engine.io-client/node_modules/engine.io-parser/node_modules/has-binary/node_modules/isarray/index.js"][0].apply(exports,arguments)
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/socket.io-parser/node_modules/json3/lib/json3.js":[function(require,module,exports){
/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */
;(function (window) {
  // Convenience aliases.
  var getClass = {}.toString, isProperty, forEach, undef;

  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // Detect native implementations.
  var nativeJSON = typeof JSON == "object" && JSON;

  // Set up the JSON 3 namespace, preferring the CommonJS `exports` object if
  // available.
  var JSON3 = typeof exports == "object" && exports && !exports.nodeType && exports;

  if (JSON3 && nativeJSON) {
    // Explicitly delegate to the native `stringify` and `parse`
    // implementations in CommonJS environments.
    JSON3.stringify = nativeJSON.stringify;
    JSON3.parse = nativeJSON.parse;
  } else {
    // Export for web browsers, JavaScript engines, and asynchronous module
    // loaders, using the global `JSON` object if available.
    JSON3 = window.JSON = nativeJSON || {};
  }

  // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
  var isExtended = new Date(-3509827334573292);
  try {
    // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
    // results for certain dates in Opera >= 10.53.
    isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
      // Safari < 2.0.2 stores the internal millisecond time value correctly,
      // but clips the values returned by the date methods to the range of
      // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
      isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
  } catch (exception) {}

  // Internal: Determines whether the native `JSON.stringify` and `parse`
  // implementations are spec-compliant. Based on work by Ken Snyder.
  function has(name) {
    if (has[name] !== undef) {
      // Return cached feature test result.
      return has[name];
    }

    var isSupported;
    if (name == "bug-string-char-index") {
      // IE <= 7 doesn't support accessing string characters using square
      // bracket notation. IE 8 only supports this for primitives.
      isSupported = "a"[0] != "a";
    } else if (name == "json") {
      // Indicates whether both `JSON.stringify` and `JSON.parse` are
      // supported.
      isSupported = has("json-stringify") && has("json-parse");
    } else {
      var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
      // Test `JSON.stringify`.
      if (name == "json-stringify") {
        var stringify = JSON3.stringify, stringifySupported = typeof stringify == "function" && isExtended;
        if (stringifySupported) {
          // A test function object with a custom `toJSON` method.
          (value = function () {
            return 1;
          }).toJSON = value;
          try {
            stringifySupported =
              // Firefox 3.1b1 and b2 serialize string, number, and boolean
              // primitives as object literals.
              stringify(0) === "0" &&
              // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
              // literals.
              stringify(new Number()) === "0" &&
              stringify(new String()) == '""' &&
              // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
              // does not define a canonical JSON representation (this applies to
              // objects with `toJSON` properties as well, *unless* they are nested
              // within an object or array).
              stringify(getClass) === undef &&
              // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
              // FF 3.1b3 pass this test.
              stringify(undef) === undef &&
              // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
              // respectively, if the value is omitted entirely.
              stringify() === undef &&
              // FF 3.1b1, 2 throw an error if the given value is not a number,
              // string, array, object, Boolean, or `null` literal. This applies to
              // objects with custom `toJSON` methods as well, unless they are nested
              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
              // methods entirely.
              stringify(value) === "1" &&
              stringify([value]) == "[1]" &&
              // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
              // `"[null]"`.
              stringify([undef]) == "[null]" &&
              // YUI 3.0.0b1 fails to serialize `null` literals.
              stringify(null) == "null" &&
              // FF 3.1b1, 2 halts serialization if an array contains a function:
              // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
              // elides non-JSON values from objects and arrays, unless they
              // define custom `toJSON` methods.
              stringify([undef, getClass, null]) == "[null,null,null]" &&
              // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
              // where character escape codes are expected (e.g., `\b` => `\u0008`).
              stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
              // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
              stringify(null, value) === "1" &&
              stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
              // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
              // serialize extended years.
              stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
              // The milliseconds are optional in ES 5, but required in 5.1.
              stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
              // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
              // four-digit years instead of six-digit years. Credits: @Yaffle.
              stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
              // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
              // values less than 1000. Credits: @Yaffle.
              stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
          } catch (exception) {
            stringifySupported = false;
          }
        }
        isSupported = stringifySupported;
      }
      // Test `JSON.parse`.
      if (name == "json-parse") {
        var parse = JSON3.parse;
        if (typeof parse == "function") {
          try {
            // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
            // Conforming implementations should also coerce the initial argument to
            // a string prior to parsing.
            if (parse("0") === 0 && !parse(false)) {
              // Simple parsing test.
              value = parse(serialized);
              var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
              if (parseSupported) {
                try {
                  // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                  parseSupported = !parse('"\t"');
                } catch (exception) {}
                if (parseSupported) {
                  try {
                    // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                    // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                    // certain octal literals.
                    parseSupported = parse("01") !== 1;
                  } catch (exception) {}
                }
                if (parseSupported) {
                  try {
                    // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                    // points. These environments, along with FF 3.1b1 and 2,
                    // also allow trailing commas in JSON objects and arrays.
                    parseSupported = parse("1.") !== 1;
                  } catch (exception) {}
                }
              }
            }
          } catch (exception) {
            parseSupported = false;
          }
        }
        isSupported = parseSupported;
      }
    }
    return has[name] = !!isSupported;
  }

  if (!has("json")) {
    // Common `[[Class]]` name aliases.
    var functionClass = "[object Function]";
    var dateClass = "[object Date]";
    var numberClass = "[object Number]";
    var stringClass = "[object String]";
    var arrayClass = "[object Array]";
    var booleanClass = "[object Boolean]";

    // Detect incomplete support for accessing string characters by index.
    var charIndexBuggy = has("bug-string-char-index");

    // Define additional utility methods if the `Date` methods are buggy.
    if (!isExtended) {
      var floor = Math.floor;
      // A mapping between the months of the year and the number of days between
      // January 1st and the first of the respective month.
      var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
      // Internal: Calculates the number of days between the Unix epoch and the
      // first day of the given month.
      var getDay = function (year, month) {
        return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
      };
    }

    // Internal: Determines if a property is a direct property of the given
    // object. Delegates to the native `Object#hasOwnProperty` method.
    if (!(isProperty = {}.hasOwnProperty)) {
      isProperty = function (property) {
        var members = {}, constructor;
        if ((members.__proto__ = null, members.__proto__ = {
          // The *proto* property cannot be set multiple times in recent
          // versions of Firefox and SeaMonkey.
          "toString": 1
        }, members).toString != getClass) {
          // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
          // supports the mutable *proto* property.
          isProperty = function (property) {
            // Capture and break the object's prototype chain (see section 8.6.2
            // of the ES 5.1 spec). The parenthesized expression prevents an
            // unsafe transformation by the Closure Compiler.
            var original = this.__proto__, result = property in (this.__proto__ = null, this);
            // Restore the original prototype chain.
            this.__proto__ = original;
            return result;
          };
        } else {
          // Capture a reference to the top-level `Object` constructor.
          constructor = members.constructor;
          // Use the `constructor` property to simulate `Object#hasOwnProperty` in
          // other environments.
          isProperty = function (property) {
            var parent = (this.constructor || constructor).prototype;
            return property in this && !(property in parent && this[property] === parent[property]);
          };
        }
        members = null;
        return isProperty.call(this, property);
      };
    }

    // Internal: A set of primitive types used by `isHostType`.
    var PrimitiveTypes = {
      'boolean': 1,
      'number': 1,
      'string': 1,
      'undefined': 1
    };

    // Internal: Determines if the given object `property` value is a
    // non-primitive.
    var isHostType = function (object, property) {
      var type = typeof object[property];
      return type == 'object' ? !!object[property] : !PrimitiveTypes[type];
    };

    // Internal: Normalizes the `for...in` iteration algorithm across
    // environments. Each enumerated key is yielded to a `callback` function.
    forEach = function (object, callback) {
      var size = 0, Properties, members, property;

      // Tests for bugs in the current environment's `for...in` algorithm. The
      // `valueOf` property inherits the non-enumerable flag from
      // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
      (Properties = function () {
        this.valueOf = 0;
      }).prototype.valueOf = 0;

      // Iterate over a new instance of the `Properties` class.
      members = new Properties();
      for (property in members) {
        // Ignore all properties inherited from `Object.prototype`.
        if (isProperty.call(members, property)) {
          size++;
        }
      }
      Properties = members = null;

      // Normalize the iteration algorithm.
      if (!size) {
        // A list of non-enumerable properties inherited from `Object.prototype`.
        members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
        // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
        // properties.
        forEach = function (object, callback) {
          var isFunction = getClass.call(object) == functionClass, property, length;
          var hasProperty = !isFunction && typeof object.constructor != 'function' && isHostType(object, 'hasOwnProperty') ? object.hasOwnProperty : isProperty;
          for (property in object) {
            // Gecko <= 1.0 enumerates the `prototype` property of functions under
            // certain conditions; IE does not.
            if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
              callback(property);
            }
          }
          // Manually invoke the callback for each non-enumerable property.
          for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
        };
      } else if (size == 2) {
        // Safari <= 2.0.4 enumerates shadowed properties twice.
        forEach = function (object, callback) {
          // Create a set of iterated properties.
          var members = {}, isFunction = getClass.call(object) == functionClass, property;
          for (property in object) {
            // Store each property name to prevent double enumeration. The
            // `prototype` property of functions is not enumerated due to cross-
            // environment inconsistencies.
            if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
              callback(property);
            }
          }
        };
      } else {
        // No bugs detected; use the standard `for...in` algorithm.
        forEach = function (object, callback) {
          var isFunction = getClass.call(object) == functionClass, property, isConstructor;
          for (property in object) {
            if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
              callback(property);
            }
          }
          // Manually invoke the callback for the `constructor` property due to
          // cross-environment inconsistencies.
          if (isConstructor || isProperty.call(object, (property = "constructor"))) {
            callback(property);
          }
        };
      }
      return forEach(object, callback);
    };

    // Public: Serializes a JavaScript `value` as a JSON string. The optional
    // `filter` argument may specify either a function that alters how object and
    // array members are serialized, or an array of strings and numbers that
    // indicates which properties should be serialized. The optional `width`
    // argument may be either a string or number that specifies the indentation
    // level of the output.
    if (!has("json-stringify")) {
      // Internal: A map of control characters and their escaped equivalents.
      var Escapes = {
        92: "\\\\",
        34: '\\"',
        8: "\\b",
        12: "\\f",
        10: "\\n",
        13: "\\r",
        9: "\\t"
      };

      // Internal: Converts `value` into a zero-padded string such that its
      // length is at least equal to `width`. The `width` must be <= 6.
      var leadingZeroes = "000000";
      var toPaddedString = function (width, value) {
        // The `|| 0` expression is necessary to work around a bug in
        // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
        return (leadingZeroes + (value || 0)).slice(-width);
      };

      // Internal: Double-quotes a string `value`, replacing all ASCII control
      // characters (characters with code unit values between 0 and 31) with
      // their escaped equivalents. This is an implementation of the
      // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
      var unicodePrefix = "\\u00";
      var quote = function (value) {
        var result = '"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;
        if (isLarge) {
          symbols = value.split("");
        }
        for (; index < length; index++) {
          var charCode = value.charCodeAt(index);
          // If the character is a control character, append its Unicode or
          // shorthand escape sequence; otherwise, append the character as-is.
          switch (charCode) {
            case 8: case 9: case 10: case 12: case 13: case 34: case 92:
              result += Escapes[charCode];
              break;
            default:
              if (charCode < 32) {
                result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                break;
              }
              result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];
          }
        }
        return result + '"';
      };

      // Internal: Recursively serializes an object. Implements the
      // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
      var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
        var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
        try {
          // Necessary for host object support.
          value = object[property];
        } catch (exception) {}
        if (typeof value == "object" && value) {
          className = getClass.call(value);
          if (className == dateClass && !isProperty.call(value, "toJSON")) {
            if (value > -1 / 0 && value < 1 / 0) {
              // Dates are serialized according to the `Date#toJSON` method
              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
              // for the ISO 8601 date time string format.
              if (getDay) {
                // Manually compute the year, month, date, hours, minutes,
                // seconds, and milliseconds if the `getUTC*` methods are
                // buggy. Adapted from @Yaffle's `date-shim` project.
                date = floor(value / 864e5);
                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                date = 1 + date - getDay(year, month);
                // The `time` value specifies the time within the day (see ES
                // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                // to compute `A modulo B`, as the `%` operator does not
                // correspond to the `modulo` operation for negative numbers.
                time = (value % 864e5 + 864e5) % 864e5;
                // The hours, minutes, seconds, and milliseconds are obtained by
                // decomposing the time within the day. See section 15.9.1.10.
                hours = floor(time / 36e5) % 24;
                minutes = floor(time / 6e4) % 60;
                seconds = floor(time / 1e3) % 60;
                milliseconds = time % 1e3;
              } else {
                year = value.getUTCFullYear();
                month = value.getUTCMonth();
                date = value.getUTCDate();
                hours = value.getUTCHours();
                minutes = value.getUTCMinutes();
                seconds = value.getUTCSeconds();
                milliseconds = value.getUTCMilliseconds();
              }
              // Serialize extended years correctly.
              value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                // Months, dates, hours, minutes, and seconds should have two
                // digits; milliseconds should have three.
                "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                // Milliseconds are optional in ES 5.0, but required in 5.1.
                "." + toPaddedString(3, milliseconds) + "Z";
            } else {
              value = null;
            }
          } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
            // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
            // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
            // ignores all `toJSON` methods on these objects unless they are
            // defined directly on an instance.
            value = value.toJSON(property);
          }
        }
        if (callback) {
          // If a replacement function was provided, call it to obtain the value
          // for serialization.
          value = callback.call(object, property, value);
        }
        if (value === null) {
          return "null";
        }
        className = getClass.call(value);
        if (className == booleanClass) {
          // Booleans are represented literally.
          return "" + value;
        } else if (className == numberClass) {
          // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
          // `"null"`.
          return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
        } else if (className == stringClass) {
          // Strings are double-quoted and escaped.
          return quote("" + value);
        }
        // Recursively serialize objects and arrays.
        if (typeof value == "object") {
          // Check for cyclic structures. This is a linear search; performance
          // is inversely proportional to the number of unique nested objects.
          for (length = stack.length; length--;) {
            if (stack[length] === value) {
              // Cyclic structures cannot be serialized by `JSON.stringify`.
              throw TypeError();
            }
          }
          // Add the object to the stack of traversed objects.
          stack.push(value);
          results = [];
          // Save the current indentation level and indent one additional level.
          prefix = indentation;
          indentation += whitespace;
          if (className == arrayClass) {
            // Recursively serialize array elements.
            for (index = 0, length = value.length; index < length; index++) {
              element = serialize(index, value, callback, properties, whitespace, indentation, stack);
              results.push(element === undef ? "null" : element);
            }
            result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
          } else {
            // Recursively serialize object members. Members are selected from
            // either a user-specified list of property names, or the object
            // itself.
            forEach(properties || value, function (property) {
              var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
              if (element !== undef) {
                // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                // is not the empty string, let `member` {quote(property) + ":"}
                // be the concatenation of `member` and the `space` character."
                // The "`space` character" refers to the literal space
                // character, not the `space` {width} argument provided to
                // `JSON.stringify`.
                results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
              }
            });
            result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
          }
          // Remove the object from the traversed object stack.
          stack.pop();
          return result;
        }
      };

      // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
      JSON3.stringify = function (source, filter, width) {
        var whitespace, callback, properties, className;
        if (typeof filter == "function" || typeof filter == "object" && filter) {
          if ((className = getClass.call(filter)) == functionClass) {
            callback = filter;
          } else if (className == arrayClass) {
            // Convert the property names array into a makeshift set.
            properties = {};
            for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
          }
        }
        if (width) {
          if ((className = getClass.call(width)) == numberClass) {
            // Convert the `width` to an integer and create a string containing
            // `width` number of space characters.
            if ((width -= width % 1) > 0) {
              for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
            }
          } else if (className == stringClass) {
            whitespace = width.length <= 10 ? width : width.slice(0, 10);
          }
        }
        // Opera <= 7.54u2 discards the values associated with empty string keys
        // (`""`) only if they are used directly within an object member list
        // (e.g., `!("" in { "": 1})`).
        return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
      };
    }

    // Public: Parses a JSON source string.
    if (!has("json-parse")) {
      var fromCharCode = String.fromCharCode;

      // Internal: A map of escaped control characters and their unescaped
      // equivalents.
      var Unescapes = {
        92: "\\",
        34: '"',
        47: "/",
        98: "\b",
        116: "\t",
        110: "\n",
        102: "\f",
        114: "\r"
      };

      // Internal: Stores the parser state.
      var Index, Source;

      // Internal: Resets the parser state and throws a `SyntaxError`.
      var abort = function() {
        Index = Source = null;
        throw SyntaxError();
      };

      // Internal: Returns the next token, or `"$"` if the parser has reached
      // the end of the source string. A token may be a string, number, `null`
      // literal, or Boolean literal.
      var lex = function () {
        var source = Source, length = source.length, value, begin, position, isSigned, charCode;
        while (Index < length) {
          charCode = source.charCodeAt(Index);
          switch (charCode) {
            case 9: case 10: case 13: case 32:
              // Skip whitespace tokens, including tabs, carriage returns, line
              // feeds, and space characters.
              Index++;
              break;
            case 123: case 125: case 91: case 93: case 58: case 44:
              // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
              // the current position.
              value = charIndexBuggy ? source.charAt(Index) : source[Index];
              Index++;
              return value;
            case 34:
              // `"` delimits a JSON string; advance to the next character and
              // begin parsing the string. String tokens are prefixed with the
              // sentinel `@` character to distinguish them from punctuators and
              // end-of-string tokens.
              for (value = "@", Index++; Index < length;) {
                charCode = source.charCodeAt(Index);
                if (charCode < 32) {
                  // Unescaped ASCII control characters (those with a code unit
                  // less than the space character) are not permitted.
                  abort();
                } else if (charCode == 92) {
                  // A reverse solidus (`\`) marks the beginning of an escaped
                  // control character (including `"`, `\`, and `/`) or Unicode
                  // escape sequence.
                  charCode = source.charCodeAt(++Index);
                  switch (charCode) {
                    case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                      // Revive escaped control characters.
                      value += Unescapes[charCode];
                      Index++;
                      break;
                    case 117:
                      // `\u` marks the beginning of a Unicode escape sequence.
                      // Advance to the first character and validate the
                      // four-digit code point.
                      begin = ++Index;
                      for (position = Index + 4; Index < position; Index++) {
                        charCode = source.charCodeAt(Index);
                        // A valid sequence comprises four hexdigits (case-
                        // insensitive) that form a single hexadecimal value.
                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                          // Invalid Unicode escape sequence.
                          abort();
                        }
                      }
                      // Revive the escaped character.
                      value += fromCharCode("0x" + source.slice(begin, Index));
                      break;
                    default:
                      // Invalid escape sequence.
                      abort();
                  }
                } else {
                  if (charCode == 34) {
                    // An unescaped double-quote character marks the end of the
                    // string.
                    break;
                  }
                  charCode = source.charCodeAt(Index);
                  begin = Index;
                  // Optimize for the common case where a string is valid.
                  while (charCode >= 32 && charCode != 92 && charCode != 34) {
                    charCode = source.charCodeAt(++Index);
                  }
                  // Append the string as-is.
                  value += source.slice(begin, Index);
                }
              }
              if (source.charCodeAt(Index) == 34) {
                // Advance to the next character and return the revived string.
                Index++;
                return value;
              }
              // Unterminated string.
              abort();
            default:
              // Parse numbers and literals.
              begin = Index;
              // Advance past the negative sign, if one is specified.
              if (charCode == 45) {
                isSigned = true;
                charCode = source.charCodeAt(++Index);
              }
              // Parse an integer or floating-point value.
              if (charCode >= 48 && charCode <= 57) {
                // Leading zeroes are interpreted as octal literals.
                if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                  // Illegal octal literal.
                  abort();
                }
                isSigned = false;
                // Parse the integer component.
                for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                // Floats cannot contain a leading decimal point; however, this
                // case is already accounted for by the parser.
                if (source.charCodeAt(Index) == 46) {
                  position = ++Index;
                  // Parse the decimal component.
                  for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                  if (position == Index) {
                    // Illegal trailing decimal.
                    abort();
                  }
                  Index = position;
                }
                // Parse exponents. The `e` denoting the exponent is
                // case-insensitive.
                charCode = source.charCodeAt(Index);
                if (charCode == 101 || charCode == 69) {
                  charCode = source.charCodeAt(++Index);
                  // Skip past the sign following the exponent, if one is
                  // specified.
                  if (charCode == 43 || charCode == 45) {
                    Index++;
                  }
                  // Parse the exponential component.
                  for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                  if (position == Index) {
                    // Illegal empty exponent.
                    abort();
                  }
                  Index = position;
                }
                // Coerce the parsed value to a JavaScript number.
                return +source.slice(begin, Index);
              }
              // A negative sign may only precede numbers.
              if (isSigned) {
                abort();
              }
              // `true`, `false`, and `null` literals.
              if (source.slice(Index, Index + 4) == "true") {
                Index += 4;
                return true;
              } else if (source.slice(Index, Index + 5) == "false") {
                Index += 5;
                return false;
              } else if (source.slice(Index, Index + 4) == "null") {
                Index += 4;
                return null;
              }
              // Unrecognized token.
              abort();
          }
        }
        // Return the sentinel `$` character if the parser has reached the end
        // of the source string.
        return "$";
      };

      // Internal: Parses a JSON `value` token.
      var get = function (value) {
        var results, hasMembers;
        if (value == "$") {
          // Unexpected end of input.
          abort();
        }
        if (typeof value == "string") {
          if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
            // Remove the sentinel `@` character.
            return value.slice(1);
          }
          // Parse object and array literals.
          if (value == "[") {
            // Parses a JSON array, returning a new JavaScript array.
            results = [];
            for (;; hasMembers || (hasMembers = true)) {
              value = lex();
              // A closing square bracket marks the end of the array literal.
              if (value == "]") {
                break;
              }
              // If the array literal contains elements, the current token
              // should be a comma separating the previous element from the
              // next.
              if (hasMembers) {
                if (value == ",") {
                  value = lex();
                  if (value == "]") {
                    // Unexpected trailing `,` in array literal.
                    abort();
                  }
                } else {
                  // A `,` must separate each array element.
                  abort();
                }
              }
              // Elisions and leading commas are not permitted.
              if (value == ",") {
                abort();
              }
              results.push(get(value));
            }
            return results;
          } else if (value == "{") {
            // Parses a JSON object, returning a new JavaScript object.
            results = {};
            for (;; hasMembers || (hasMembers = true)) {
              value = lex();
              // A closing curly brace marks the end of the object literal.
              if (value == "}") {
                break;
              }
              // If the object literal contains members, the current token
              // should be a comma separator.
              if (hasMembers) {
                if (value == ",") {
                  value = lex();
                  if (value == "}") {
                    // Unexpected trailing `,` in object literal.
                    abort();
                  }
                } else {
                  // A `,` must separate each object member.
                  abort();
                }
              }
              // Leading commas are not permitted, object property names must be
              // double-quoted strings, and a `:` must separate each property
              // name and value.
              if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                abort();
              }
              results[value.slice(1)] = get(lex());
            }
            return results;
          }
          // Unexpected token encountered.
          abort();
        }
        return value;
      };

      // Internal: Updates a traversed object member.
      var update = function(source, property, callback) {
        var element = walk(source, property, callback);
        if (element === undef) {
          delete source[property];
        } else {
          source[property] = element;
        }
      };

      // Internal: Recursively traverses a parsed JSON object, invoking the
      // `callback` function for each value. This is an implementation of the
      // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
      var walk = function (source, property, callback) {
        var value = source[property], length;
        if (typeof value == "object" && value) {
          // `forEach` can't be used to traverse an array in Opera <= 8.54
          // because its `Object#hasOwnProperty` implementation returns `false`
          // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
          if (getClass.call(value) == arrayClass) {
            for (length = value.length; length--;) {
              update(value, length, callback);
            }
          } else {
            forEach(value, function (property) {
              update(value, property, callback);
            });
          }
        }
        return callback.call(source, property, value);
      };

      // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
      JSON3.parse = function (source, callback) {
        var result, value;
        Index = 0;
        Source = "" + source;
        result = get(lex());
        // If a JSON string contains multiple tokens, it is invalid.
        if (lex() != "$") {
          abort();
        }
        // Reset the parser state.
        Index = Source = null;
        return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
      };
    }
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}(this));

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/socket.io-client/node_modules/to-array/index.js":[function(require,module,exports){
module.exports = toArray

function toArray(list, index) {
    var array = []

    index = index || 0

    for (var i = index || 0; i < list.length; i++) {
        array[i - index] = list[i]
    }

    return array
}

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/array.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var util = require('../util'),
  object = require('./');

util.define(object,
  /**
   * V.Object's equivalent to Array.push()
   * @method push
   * @param  {Arguments}  The item(s) to add to the array
   * @return {Number}     The new length of the array
   */
  'push', function() {
    if (this.__t === 1) {
      if (this.length === void 0) {
        this.length = 0;
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        this._push(arguments[i]);
      }
      return this.length;
    }
  },
  '_push', function(val, vobj, stamp, noupdate, from) {
    //ame, val, vobj, stamp, noupdate, from
    this.length++;
    this.set((this.length - 1), val, vobj, stamp, noupdate, from);
    return this[this.length - 1];
  },
  /**
   * V.Object's equivalent to Array.pop()
   * @method pop
   * @return {*}  The removed array item
   */
  'pop', function() {
    if (this.__t === 1) {
      var l = this.length
      if(l !== 0){
        t = this[l - 1];
        this.length--;
        t.remove();
      }
      // return t; //pretty weird since this object always has value null;
    }
  },
  /**
   * V.Object's equivalent to Array.splice()
   * @method splice
   * @param  {Number}    index   An integer that specifies at what position to add/remove items, Use negative values to specify the position from the end of the array
   * @param  {Number}    howmany The number of items to be removed. If set to 0, no items will be removed
   * @param  {Arguments}         The new item(s) to be added to the array
   * @return {Array}             A new array containing the removed items, if any
   */
  'splice', function(index, howmany) { //can become shorter;
    if (index > -1 && this.__t === 1) { //how many and -i are ignored
      for (var i = 0, l = this.length, shift; i < l; i++) {
        if (shift) {
          if (i === l - 1) {
            // this.length--;
            this[i] = null;
          } else {
            this[i] = this[i + 1];
            this[i]._name = i;
          }
        } else {
          if (i === index) {
            if (i === l - 1) {
              this.pop();
            } else {
              shift = true;
              this.length--;
              this[i].remove();
              this[i] = this[i + 1];
              this[i]._name = i;
            }
          }
        }
      }
    }
  },
  /**
   * Adds value to array if it is not contained in array, executes handler on encountering val in array
   * @method include
   * @param  {*}         val       Value to add
   * @param  {Function}  [handler] Function to execute on encountering val in array
   * @return {Boolean}             True/false
   */
  'include', function(val, handler, arr) {
    return util.include(this, val, handler, arr);
  },
  'concat', function(val) { 

    // if(!val) {
    //   return
    // }
    
    var arr = this
    var ll = arr.length;
    for (var i = 0, l = val.length; i < l; i++) {
      arr._push(val[i], false, false, true);
    }
    arr._update(val);
    return arr;
  },
  'moveItem', function(from, to) { var arr = this
    if(to === void 0) to = arr.length - 1
    if(from === to) return
    var mover = arr[from]
    if(!mover) return
    var step = from < to ? 1 : -1
    do {
      arr[from] = null
      arr.set(from, arr[from + step], true)
      from += step
    } while(from !== to)
    arr[to] = null
    arr.set(to, mover, true)
  }
)

},{"../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/compound.js":[function(require,module,exports){


var VObject = require('vigour-js/object').inject(
    require('vigour-js/value/length')
  ),
  util = require('vigour-js/util'),
  uid = require('vigour-js/util/id')

var SAMEPATH = 'could not create compound of two Objects with the same path'

// function Compound(val){
//   var compound = this
//   compound.$sources = new SourceList(compound, val)
//   this.__t = 2
// }

// var Data = require('vigour-js/data')

var Compound = VObject.new(void 0, function(val){
  var compound = this
  compound.$sources = new SourceList(compound, val)
  this.__t = 2
  return false
})
util.define(Compound, '_class', VObject)


module.exports = Compound
// Compound.prototype = new VObject()

Compound.prototype._blacklist.push(
  '$sources'
)

util.define( Compound,
  '_absorb', function _absorb(entry) {
    var compound = this
    var source = entry.source
    var prefix = entry.name
    
    var endpoint = source
    while(endpoint && endpoint.__t === 4 && !endpoint._filter) {
      endpoint = endpoint._val
    }
    entry.endpoint = endpoint
    
    if(endpoint) {
      endpoint.each(function absorbEach(){
        compound.set(prefix + '-' +this._name, this)
      })
    }

    compound.each(function cleanOld(){
      var pointer = this
      var pointed = pointer._val

      // skip cleanup check on construction
      if(!compound.$sources) {
        return
      }

      // TODO: find a better way to check if thing is still in an enpoint
      // get the endpoint the item should be in
      var sourcename = pointer._name.split('-')[0]
      var ep = compound.$sources[sourcename].endpoint
      var ok
      ep.each(function okCheck(){
        if(this === pointed) {
          return ok = true
        }
      })
      if(!ok) {
        pointer.remove()
      }
    })
  },
  '_addCompoundListener', function _addCompoundListener(entry) {
    var compound = this
    entry.source.on(function compoundListener(){
      // console.log('change in source, run absorb on', entry, 
      //   '\nval', arguments[0],
      //   '\nstamp', arguments[1]
      // )
      compound._absorb(entry)
    })
  }
)

function SourceList(compound, val) {
  var sourcelist = this
  sourcelist._parent = compound
  if(val){
    if(!(val instanceof Array)) {
      val = [val]
    }
    this.push.apply(this, val)
  }
}

SourceList.prototype.push = function pushSource(){
  var sourcelist = this
  var compound = sourcelist._parent

  // console.log('push dat sources', arguments.length)
  var al = arguments.length
  for(var i = 0, source; source = arguments[i] ; i++){

    var sourcename = uid()

    // console.log('SOURCENAME IS', sourcename)

    var entry = sourcelist[sourcename] = {
      name: sourcename,
      source: source
    }

    compound._absorb(entry)
    compound._addCompoundListener(entry)

  }
}




},{"vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/util/id":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/id.js","vigour-js/value/length":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/length.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/flags.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var util = require('../util')

/**
 * Flags are special properties where a function is called
 * different from operators since flags may have nothing to do with value calculation
 * extends default set from V.Object
 * @property
 */
/**
 * Adds new flags to V.Object
 * @method extend
 * @param  {Object}   object V.Object to extend flags to
 * @param  {Function} [set]  [description]
 * @return {[type]}          [description]
 */
exports.extend = util.extend(function(object, set) {
  
  //multiple flags 
  
  // abstract flags array away!
  // 
  // flags object --> field
  // 
  // check /w cases
  // check /w parent
  // flag4 is dynamic has stack as option
  
  var _proto = object.prototype
    , _convert = _proto.convert
    , _set = _proto._set
    , _remove = _proto._remove
    , _check = function(name) {
      var f;
      for (var i in object.flags.dynamic) {
        f = object.flags.dynamic[i](name)
        if(f) break
      }
      return f
    }
    , checkIfFlagOverwrite = function(val) {
      for(var i in val) {
        if(object.flags[i] || _check(i)) return true
      }
    }

  if (!set) set = _proto.set

  _proto._blacklist.push('_flag');
  util.define(object,
    /**
     * [description]
     * @method convert
     * @param  {[type]} val [description]
     * @return {[type]}     [description]
     */
    'convert', function(val) {

      //hier ook weer for
      var obj = _convert.call(this, val);

      // console.log('I SHOULD BE CONVERTING!', val, obj, this._flag)





      if (this._flag && (!val || !util.isObj(val) || val.val || checkIfFlagOverwrite(val) )) {

        // console.log('I SHOULD BE CONVERTING! step 2')

        //ff useVal gebruiken

        for(var i in this._flag) {
          var flag = this._flag[i]
          if (!flag[4] || !flag[4].stack) {

            // console.log('CONVERT NEEDS FIX'.red.bold.inverse)

            if (obj === flag[1]) {
              // console.log('2 CONVERT NEEDS FIX'.red.bold.inverse)
              obj = {};
            }
            if (obj.val === flag[1]) {
              // console.log('3 CONVERT NEEDS FIX'.red.bold.inverse)
              delete obj.val;
            }


            obj[flag[0]] = flag[2]
          }
          else {
            //still have to take care of this situation
            // console.error('trying convert a stack-dynamic flag', flag);
          }
        }

        // console.log('CONVERTED ---->',obj)

      }
      return obj;
    },
    /**
      @property __flags__
    */
    '__flags__', {},
    /**
     * [description]
     * @method remove
     * @param  {[type]} from   [description]
     * @param  {[type]} update [description]
     * @param  {[type]} stamp  [description]
     * @return {[type]}        [description]
     */
    '_remove', function(from, update, stamp) {

      if(this._flag) {
        for(var i in this._flag) {
          // console.log(i, this._flag)
          var flag = this._flag[i]
          //for 
          // console.log('_remove')
          if (flag) {
            //dit moet wel ff lukken
            if (object.flags[flag[0]]) {
              object.flags[flag[0]].remove && object.flags[flag[0]].remove.call(this, flag);
            } else {
              flag[4].remove.call(this, flag);
            }
          }
        }
        this._flag = null
      }

      _remove.call(this, from, update, stamp);
    },
    /**
     * [description]
     * @method _set
     * @param  {[type]} val      [description]
     * @param  {[type]} stamp    [description]
     * @param  {[type]} from     [description]
     * @param  {[type]} remove   [description]
     * @param  {[type]} noupdate [description]
     * @return {[type]}          [description]
     */
    '_set', function(val, stamp, from, remove, noupdate) {
      // console.log('make _set',this._name,val);
      _set.call(this, val, stamp, from, remove, noupdate)

      //flag moet dus ook meer een copied value worden

      // console.log('_set', this._flag, val)


      if(this._flag) {

        // console.log('overwrite>?----', this._flag, val)

        for(var i in this._flag) {
          var flag = this._flag[i]
          if (flag) {
            var setFl = object.flags[flag[0]] || flag[4]
            //what to do with reset?
            //change fixen bij cases?
            
            // console.log('2 overwrite>?----', flag, this._val, this._val !== flag[1])
            
            if (this._val !== flag[1] && setFl.useVal) {

              // nu ff hier ook nog!

              if (object.flags[flag[0]]) {

                // console.log('remove flag normal',flag, flag[4], i, this)

                object.flags[flag[0]].remove && object.flags[flag[0]].remove.call(this, flag)
                //if this empty
                // delete this._flag;
                delete this._flag[i]
                if(util.empty(this._flag)) {
                  delete this._flag
                }
                // this._update()
              } else if (!flag[5]) {
                // console.log('remove flag /w flag[4] and not flag[5]',flag, flag[4], i)
                flag[4].remove.call(this, flag);
                // if(this.)
                //delete this._flag;
                delete this._flag[i]
                if(util.empty(this._flag)) {
                  delete this._flag
                }
              }
            } else if (object.flags[flag[0]] && object.flags[flag[0]].reset && flag[3] !== this) {
              // console.error('RESETTING -- ingnore /w a clear!',flag[0]) 
              object.flags[flag[0]].set.call(this, flag[2], stamp, true, this._name)
            }
          }
        }
      }

    },
    /**
     * [description]
     * @method set
     * @param  {[type]} name     [description]
     * @param  {[type]} val      [description]
     * @param  {[type]} vobj     [description]
     * @param  {[type]} stamp    [description]
     * @param  {[type]} noupdate [description]
     * @return {[type]}          [description]
     */
    'set', function(name, val, vobj, stamp, noupdate) {
      var fl = object.flags[name] || _check(name)
        , r
        , same

        // console.log(name, val, vobj)

      if (fl) {

        // console.log('set>?----', name, val, this._flag)
       
      if(val===false) {
          //stack -- alle flags name providen!
          var i = fl.stack||name 
            , flag = this._flag && this._flag[i]
          if(flag && fl.remove) {
            var d = fl.remove.call(this, flag, name)
            // console.log('REMOVE FLAG FROM FALSE'.inverse, fl, name, val, stamp, this)
            if(!d) {
              delete this._flag[i]
              if(util.empty(this._flag)) {
                // console.log('flag is empty, delete')
                delete this._flag
              }
            }
          } 
          r = true
          // if(this._flag)
      } else {
       if(this._flag) {
          //check if need to remove! -- only in case
          for(var i in this._flag) {
            var flag = this._flag[i]
            if (flag && fl.remove) {

              if(!fl.stack && name === flag[0]) {
                // console.log('--->',flag[0])
                if(val!==flag[2]) {
                  // console.log('remove flag! ---> overwrite bymyself --->', flag[0],  setFl, 'by:' ,name, fl, val, flag[2])
                  fl.remove.call(this, flag);
                } else {
                  same = true
                }

              } else if (!fl.stack || fl.stack !== flag[0]) {

                //this._flag

                //if val:true 
                //go check if you need to remove mofos

                var setFl = object.flags[flag[0]] || flag[4]

                if(setFl.useVal && fl.useVal) {

                  // console.log('remove flag! -- clearly has some useVal', flag[0],  setFl, 'by:' ,name, fl)

                  setFl.remove.call(this, flag);
                  delete this._flag[i]
                  if(util.empty(this._flag)) {
                    // console.log('flag is empty, delete')
                    delete this._flag
                  }
                }


                // console.log('remove flag!', flag, flag[0], flag[4],  object.flags[flag[0]]  , fl, name) //check if it needs to be removed
                // var fl 
                
                //fl = object.flags[name] || _check(name)
                //
                //hier iets mee doen weer zoeken naar flag set


                //do the special check if value is tight to flag check (for both! fl.value)

                // fl.remove.call(this, flag);
              }
            }
          }
        }

      if(!same) {
          // console.log('SET FLAG'.inverse, name, val, stamp, this)
          fl.set.call(this, val, stamp, false, name);
          r = true //niet altijd waar ofcourse!
          // console.log('---------')
        } else {
          // console.log('FLAG IS SAME'.red.inverse, name, val, stamp, this)
        }
      }
        this[name] && this[name].remove(false, false, false, false, false, true);
      } else {
        r = set.call(this, name, val, vobj, stamp, noupdate);
      }
      return r;
    });
  object.flags = _proto.__flags__;
  util.define(object.flags, 'dynamic', {});
})
},{"../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/hashpath.js":[function(require,module,exports){
var util = require('../util')
  , hash = require('../util/hash')

exports.extend = util.extend(function(base) {
  base.prototype._blacklist.push('__hp')
  util.define( base
  , '_hashpath', {
      get: function() {
        return this.__hp || (this.__hp = hash(this._path.toString()))
      }
    }
  )
})
},{"../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../util/hash":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/hash.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var util = require('../util')
  , vigour = require('../')
  , inject = require('../util/inject')
/**
 * V.Objects are used instead of normal objects in vigour listeners are automatically added and removed
 * type: __t : 1 = array , 2 = object , 3 = has field (can never be an array) , 4 = field ref to other V.Object
 * note you can make an object out of a field or field ref the type will be 3 or 4 though!
 * @constructor
 * @param  {*}      [val]    Value
 * @param  {Object} [parent] Parentobject
 */
var object = module.exports = exports = vigour.Object = function(val, hook, parent) {
  if (parent) this._parent = parent
  if (hook && this._hook) this._hook(val, hook)
  if (val !== void 0) this.val = val
}
object.inject = inject
/**
 * Used to set .val
 * @method _set
 * @param  {*}              val                  [description]
 * @param  {Number}         [stamp = new stamp]  [description]
 * @param  {Object|Boolean} [from]               [description]
 * @param  {Boolean}        [noupdate]           When true, no updates
 * @param  {Boolean}        [add]                When true, this is an add
 */
var _set = function(val, stamp, from, noupdate, add) {

  if(val===null) {
    if (!stamp) stamp = this.stamp()
    this.remove(false, false, false, from, stamp, noupdate)
  }

  if (!this.__t || this.__t < 3 || ( val !== this._val || this._ignoreValue ) ) {

    // console.error(this)
    if(!this.stamp) {
      //moet allemaal event emitters worden (on('error'))
      //this._update('error') en anders V.debug.error._update( 'object' )
      void(0)
      return
    }

    if (!stamp) stamp = this.stamp()

    var oldval = this._val
      , nestedval
      , noset
      , isSet
      , isArray
      , valIsSet

    if (this._changevobj 
      && ((this.__t < 4 && val instanceof object) 
      || this.__t === 4 && ((!this._mixed||this._mixed===4) || val instanceof Array 
        || (val instanceof Object 
          && (val instanceof object || val.val))))) { //try to make this shorter
         this._changevobj(val, stamp)
         if(this._mixed===4) this._val = null
    }

    if (vigour.Base && (val instanceof vigour.Base)) {
      this.remove(true, true, false, false, stamp)
      this.__t = 5
      this._val = val
    } else if (val instanceof object) {
      if ((this.__t < 3 && !this._mixed) || this.__t === 1) {
        this.remove(true, true, false, void 0, stamp) //check if 2nd param true is absolutely nessecary (else it will be removed)
      }
      this._val = val
      this.__t = 4
      if (this._setvobj) this._setvobj(val)
    } else {

      if (val instanceof Object && typeof val !== 'function') {
        if (val instanceof Array) {
          this._val = void 0
          this.__t = 1
          this.length = val.length
          noset = this.remove(true, true, val, false, stamp)
          for (var i = 0, l = this.length; i < l; i++) {
            if (!this.set(i, val[i], false, stamp, noupdate, true) && noset !== false) {
              noset = true
            } else {
              noset = false
            }
          }
        } else {

          //normal object

          if (val.clear) {
            noset = this.remove(true, true, false, false, stamp)
            delete val.clear
          } else {

            if (this.__t === 1) {
              if (this._mixed !== 1 && this._mixed!==4) {
                this.remove(true, true, false, false, stamp) //ommiting stamp can be a problem
              } else {
                isArray = true
              }
            } else if (!this._merge && (!this._mixed || this.__t === 2)) {
              noset = this.remove(true, true, val, false, stamp)
            }
          }
          if (val.val && util.isObj(val.val)) {
            valIsSet = true
            this._$setVal( new this._class(val.val, false, this), stamp, from, true)
            this._val._contained = true
          } else if (!this._mixed) {
            this._val = void 0 //this messes up property updates!! (youri)
          }

          if (!isArray) this.__t = 2

          for (var j in val) {
            if (!util.checkArray(this._blacklist, j)) {
              if (j === 'val') {
                if(!valIsSet) isSet = this._$setVal( val.val, stamp, from, true )
                nestedval = true;
              } else {
                //do not always ignore updates at this point
                if (!this.set(j, val[j], false, stamp, noupdate, true) && noset !== false) {
                  noset = true
                } else {
                  noset = false //this is the place where set is passed
                }
              }
            }
          }
        }

      } else {
        if ((this.__t < 3 && !this._mixed) || this.__t === 1) {
          this.remove(true, true, false, false, stamp)
          if (this.__t === 1) delete this.length
        }
        if (val === this._val && !this._ignoreValue ) {
          //maybe use stamp for ignoreValue as well?
          if (noset !== false) {
            this.__t = 3
            return false
          }
        } else {
          this._val = val
          this.__t = 3
        }
      }
    }
    if (nestedval) {

      if (this._set && (isSet !== false || noset === false)) {
        this._set(val, stamp, from, false, noupdate, add, oldval)
      }
    } else if (this._set) {
      if (!noset) {
        this._set(val, stamp, from, false, noupdate, add, oldval)
      } else {
                    // if(window.smut) console.log('!1',arguments)

        return false;
      }
    }
  } else {
                        // if(window.smut) console.log('!1',arguments)

    return false;
  }

},
/**
 * stamp
 * paint the set origin
 * @method
 */
_stamp = 0,
_params = function(params, list) {
  for (var i = list.length - 1, p; i >= 0; i--) {
    if (params && params[list[i]]!==void 0) {
      p = '_' + list[i]
      util.define(this, p, params[list[i]])
    }
  }
}
/**
* Generates unique stamp
* @method stamp
* @return {Number} Returns stamp
*/
exports.stamp = function() {
//if stamp > x reset ?
return _stamp++
}

exports.set = _set

// objectUtils.extend(exports);  
/**
 * Creates a new constructor based on a V.Object
 * Params can be passed
 * Mixed creates mixed types for the new class i.e having a string and properties
 * @method new
 * @param  {Object} params Parametersobject
 * @return {Object}        Returns V.Object
 */
// window.cnt = 0
// setTimeout(function() {
//   window.smut = true
// },2000)

object.new = function(params, constructor) {
  var vObj = function(val, hook, parent) {
      if (parent) this._parent = parent
      var conresult
      if (constructor) {
        conresult = constructor.apply(this,arguments)
      }
      if (hook && this._hook) this._hook(val, hook)
      if (this._onConstruct) this._onConstruct(val, hook)

      if(val !== void 0 && conresult !== false) {
        this.val = val
      }
    },
    proto = vObj.prototype = new this()
  vObj.new = object.new
  vObj.inject = inject //not handeled well yet
  util.define(vObj, '_blacklist', proto._blacklist.concat())
  _params.call(vObj, params, ['mixed', 'merge'])
  util.define(vObj, '_class', vObj)
  return vObj
}

util.define(object,

// '_set, set , '

 '_$setVal', _set,

/**
 * Items in the blacklist skipped in each function
 * @method _blacklist
 */
'_blacklist', ['_', '__', '__t', '_val', 'length', '_name', '_parent', '_contained', '_removed','extensions', '__cachedPath', '_ignoreValue', '_indexCache'],
/**
 * Replaces default constructor property ,necessary for classes made with V.Object.new
 * @constructor _class
 */
'_class', object,
/**
 * Stamp is a method of VObject so that it can be extended in subclasses
 * @return {*} a unique identifier for a mutation
 */
'stamp', object.stamp,
/**
 * Used to get .val which returns field values i.e. a string
 * @method _get
 * @return {*} Returns value
 */
'_get', function() {
  var self = this
    , type = self.__t
    , val

  if (type < 3) {
    return self
  } else {
    val = self._val
    return (type !== 4) ? val : val && val._get()
  }
},
/**
 * Used to get .val which returns field values i.e. a string
 * Set creates instances of the _class for nested properties
 * @property
 */
'val', {
  set: function(val) {
    // window.cnt++
    // if(window.smut) {
      // console.error(window.cnt, 'whats happening', this._path, this._prop && this._prop.name, this, this._updateOrigin)
    // }
    return this._$setVal(val)
  },
  get: function() {
    return this._get()
  }
},
/**
 * Add a property to a object
 * @method set
 * @param  {String}  name                [description]
 * @param  {*}       val                 [description]
 * @param  {Boolean} [vobj]              [description]
 * @param  {Number}  [stamp = new stamp] [description]
 * @param  {Boolean} [noupdate]          [description]
 * @return {Boolean}                     [description]
 */
'set', function( name, val, vobj, stamp, noupdate, from ) {

  //function( name, val, vobj, stamp, noupdate, from ) 

  // console.log(name, stamp)

  from = from && this
  if (!vobj && (this[name] instanceof object)) {
    if (this._$setVal.call(this[name], val, stamp, from, noupdate) === false && stamp) {
      return false
    }
  } else {
    if (vobj) {
      if(this[name]) this[name].remove()
      this[name] = val
      this[name]._name = name
      this[name]._parent = this
      if(!noupdate) val._update(val, stamp || this.stamp(), from, void 0, true)
    } else {
      this[name] = new this._class(void 0, false, this)
      this[name]._name = name
      this._$setVal.call(this[name], val, stamp, from, noupdate, true)
    }
    if (this.__t === 1 && this._setArrayItem) {
      this._setArrayItem( this[name], val )
    }
  }
  return true
},
/**
 * Removes a V.Object including all nested fields and values
 * @method remove
 * @param  {Boolean}        [nested]             When true remove nested objects
 * @param  {Boolean}        [bl]                 When true doesn't remove blacklisted items
 * @param  {Boolean}        [not]                [description]
 * @param  {Boolean|Object} [from]               [description]
 * @param  {Number}         [stamp = new stamp]  [description]
 * @param  {Boolean}        [noupdate]           [description]
 * @return {Boolean}                             [description]
 */
 //    this.remove(false, false, false, from, stamp, noupdate)

'remove', function(nested, bl, not, from, stamp, noupdate) { //no update first > (extended in selection.js)
  if (!nested) this._removed = true
  var r, i, oldval
  if (!stamp) stamp = this.stamp()
  // console.log('START',stamp,this._name);
  if (!nested) {
    if (this._parent) {
      this._parent[this._name] = null
      delete this._parent[this._name]
    }
    if (this._val !== void 0) {
      if (this._val instanceof object && this._val._contained) {
        this._val.remove(false, false, false, from || this, stamp, noupdate)
      }
      oldval = this._val
      this._val = null
    }
  }
  for (i in this) {
    if ((!not || !not[i]) && !util.checkArray(this._blacklist, i)) {
      if (this[i] instanceof object) {
        r = false
        // console.log('DELETE',stamp,i,this[i]);
        this[i].remove(false, false, false, from || this, stamp, noupdate)
      }
      this[i] = null
      delete this[i] //delete is pretty nasty for performance
    }
  }
  if (!nested) {
    if (this._remove) {
      //r
      this._remove(from, noupdate ? false : from /*||r*/ , stamp, oldval);
      if (!bl) {
        for (var j in this) {
          if (this[j] !== void 0) {
            if (j !== '_parent' && this[j] instanceof object && this[j]._contained) {
              this[j].remove()
            }
            this[j] = null
            delete this[j]
          }
        }
      }
    }
    this._removed = true
  }
  return r
})


//----this has to be initialized after defining the blacklist property;
exports.listen = require('./listen')
require('./array')
require('./util')
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../util/inject":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/inject.js","./array":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/array.js","./listen":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/listen.js","./util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/util.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/listen.js":[function(require,module,exports){
var util = require('../util')
  , vObject = require('./')
  , V = require('../')
  //TODO: this is a temp fix to emulate on next tick
  , raf = require('vigour-js/browser/animation/raf')
  , Promise = require('promise')

function _addListener( obj, fn, mark, original ) {
  //val, mark, skipcheck, ignoreval, orginal
  if( mark ) 
  {
    // console.log('hey got orginal!', original)
    //n( val, mark, skipcheck, ignoreval, original )
    obj.addListener([ fn, mark ], true, false, false, original  )
  } 
  else 
  {
        // console.log('hey got orginal!', original)

    obj.addListener( fn, false, false, false, original )
  }
}

/*
  _update calls listeners on a given Object (listeners include linking fields in other V.Objects)
  V.Object._update can be modified to change update behavior:
    - standard: update Object and it's parents / ancestors recursively.
    - parentOnly: update Object and only its direct parent.
    - just _update: update only the Object.
*/
var _update = exports._update = function(val, stamp, from, remove, added, oldval, test) {

  // if(window.here) console.log('UPDATE!',this._path)

  var _l = this._listeners
    , i
    , listener

  if (_l) {
    for (i = _l.length; listener = _l[--i];) { //order is irrelevant
      if (listener instanceof vObject) {

        // console.log('update?????', listener._path, this._path, from)

        // if (from) {
        listener._lfrom = from || this
          // }

        listener._update(val, stamp, false, remove, added, oldval)

        if (listener) listener._lfrom = null

      } else if (listener[0]) {
        if(!test || !test(listener)) {
          if (listener.length > 2) {
            for (var l = listener.length - 2
              , l2 = arguments.length
              , a = [], j = -1
              , la = l + l2
              ; j < la
              ; a[++j] = j < l
                ? listener[j + 2]
                : j === l ? this : arguments[j - l - 1]
              );

            listener[0].apply(listener[1], a)
          } else {
            listener[0].call(listener[1], this, val, stamp, from, remove, added, oldval)
          }
        }
      } else {
        listener.call(this, val, stamp, from, remove, added, oldval)
      }
    }
  }
}


// util.define(vObject, 
//   '_nodePath_', function() {
//     if(this._caller) {

//       var arr = []
//       var p = this._caller

//       while(p) {
//         arr.push( p._name || p._node && p._node.className )
//         p = p._node && p.parent
//       }
//       arr.reverse()
//       return arr


//     }
//   }

// )


vObject.prototype._blacklist.push('_listeners', '_listens', '_lfrom', '_listenMap');

util.define(vObject,
  /**
   * _set
   * is called when a value is set
   * @method
   */
  '_set', function(val, stamp, from, remove, noupdate, added, oldval) {
    if (!noupdate) {
      // console.log(this._path, val)
      this._update(val, stamp, from, remove, added, oldval);
    }
  },

  'is', function (val, cb, nextTick ) {

    //on removal of promise remove listener

    if(!cb || ( typeof cb !== 'function')) {
      var _this = this
      nextTick = cb
      return new Promise(function( resolve, reject ) {
        // console.log('312123123213', val)
        _this.is( val, function() {
          resolve.apply(this, arguments)
        })
      })
    } else {
      var cbx = nextTick ? function() {
        var args = util.arg(arguments)
          , _this = this
        raf(function() {
          cb.call(_this)
        })
      } : cb
      //TODO: add original if its not 
          // console.error('--------------', val)

      if(val==='loaded') {
        if(this.$loaded || this.from.$loaded) {
          cbx.call(this)
        } else {
          this.once('loaded', cbx)
        }
      } else {
        var ret
        // var ignore
        // console.error('1!@#@#!!@#', ret, val)

        if(this.val == val ) {
          // console.error('2!@#@#!!@#', ret, val)

          return cbx.call(this)
        } else {
          // console.error('!@#xxxxx12121212122112@#!!@#', ret, val)

          ret = (typeof val === 'function') && val.call(this)
          // ignore = true
          // console.error('2222222222!@#@#!!@#', ret, val)
        }
        if(ret) {
          if( ret instanceof Promise ) {
            // console.error('promise')
            return ret
          } else {
            // console.log('????!!!')
            return cbx.call(this)
          }
        } else {
          // console.error('22222!@!@#!@#', val)
          if(typeof val === 'function') {
            this.once(val, cbx)
         } else {
            this.once({
              $val: val
            }, cbx)
         }
        }
      }
      return this
    }
  },
  /**
   * __update
   * calls listeners attached to the Object
   * types -- function or V.Object
   * @method
   */
  '__update', _update,
  /**
   * _update
   * escalates an update up it's structure and calls __update to call listeners
   * types -- function or V.Object
   * @method
   */
  '_update', function(val, stamp, from, remove, added, oldval, test) { //here you can see if its an update from another object (from)
    // console.log('V.Object OG _update', val, stamp, from, remove, added, oldval)
    var curr = this,
    s = true

    while (curr) {
      // var p = curr._path
      // _update ["clients", "V_2pxcewv3g4k"] 
      // console.log('_update', p, val, from || ((!s && this) ? this : void 0, this) )

      //TODO 10 double check this
      curr.__update(val, stamp, from || (s!==true) ? this : false , remove, added, oldval, test)
      curr = from ? false : curr._parent
      s = false
      if (remove) remove = 1
    }
  },
  /**
   * _remove
   * called on remove
   * @method
   */
  '_remove', function(from, update, stamp, oldval) {
    if (update !== false) {
      this._update(null, stamp, from, true, false, oldval);
    }
    this.removeListener();
    var _l = this._listens,
      i, listener;
    if (_l) {
      //optimize later
      //this,this is weird to always use this...
      for (i = _l.length - 1; i >= 0; _l[i--].removeListener(this, void 0, false, true));
    }
  },
  /**
   * _setvobj
   * if a value is set to a V.Object
   * @method
   */
  '_setvobj', function(val) {
    val.addListener(this);
  },
  /**
   * _changevobj
   * if a value is changed from a V.Object
   * @method
   */
  '_changevobj', function(val) {
    if (this.__t === 4) {
      var _l = this._listens,
        _val = this._val,
        i;
      if (_l) {
        for (i = _l.length; i >= 0; _l[--i] && _l[i].removeListener(this, this));
      }
      if (_val instanceof vObject && _val._contained) {
        _val.remove();
      }
    }
  },
  /**
   * addListener
   * adds a listener to an object can be a function or V.Object
   * @method
   */
  'addListener', function( val, mark, skipcheck, ignoreval, original ) {
    var _l = this._listeners || (this._listeners = []),
      target, g;

    if(original) {
      // console.log('ORGINAL!', original)
      if(!this._listenMap) {
        this._listenMap = []
      }
    }

    //more speed voor checkarray
    if (mark) {
      g = util.checkArray(_l, val[1], 1);
      if (g === false
        || !ignoreval && util.checkArray(_l, val[0], 0) === false
        || (mark !== true && mark.call(this, _l[g], _l, g, val) === true)) {
        
        //TODO: fix this ultra dirty stuff
        if( original && val !== orginal ) {
          this._listenMap.push([ orginal, val ])
        }

        _l.push(val);
      } else  {
         return _l[g];
      }
    } else if (!val.__t || !util.checkArray(_l, val)) {

      if( original && val !== original ) {
        this._listenMap.push([ original, val ])
      }

      _l.push(val);
    }
    if (mark || val instanceof vObject) {
      target = mark ? val[1] : val;
      if (target instanceof vObject) {
        _li = target._listens || (target._listens = []);
        if (skipcheck || !util.checkArray(_li, this)) {

          if( original && val !== original ) {
            this._listenMap.push([ original, val ])
          }

          _li.push(this);
        }
      }
    }
  },
   'once', function( val, method, mark ) {

    //val, mark, skipcheck, ignoreval, orginal

    //TODO:unify /w on
    var mval

    var listen = function() {
      
      this.removeListener( mval, mark )
      // this.removeListener( listen )

      mval.apply( this, arguments )
      //original perhaps????
    }

    if( method ) {
      mval = method
      this.on( val, listen, false, mval ) //deze fn moet wel geremoved worden gebeurd nu niet!
    } else {
      mval = val
      this.on( listen, false, false, mval )
    }

    return this

  },
  'on', function( val, method, mark, original ) {
      /**
        * val can be a condition or a comparison or a method
      **/
      if( V.Base && method instanceof V.Base ) 
      {
        mark = method //make exception for values!
        method = null
      }

      if(!original) {
        original = method
      } else {
        // console.log('set original!', original, method )
      }

      if( !method ) 
      {
        _addListener( this, val, mark, original )
      }
      else 
      {
        if( util.isObj( val ) )
        {
          // console.warn('this will become a condition later on for now its not supported!, conditions will be used eveyrwhere')
          //Has to become a condition
          if(val.$val) {
            _addListener( this, function( nval ) {
              if( this.val === val.$val ) //more checks
              {
                method.apply( this, arguments )
              }
            }, mark, original )
          } else {
            void(0)
          }
          //Has to become a condition


        }
        else if( typeof val === 'function' )
        {
          _addListener( this, function( nval ) {
            if( val.apply( this, arguments ) ) //more checks
            {
              method.apply( this, arguments )
            }
          }, mark, original )
        }
        else 
        {

          if( util.isObj( method ) )
          {

            mark = val

            void(0)
            _addListener( this, function( nval, stamp, from, remove, added, oldval ) {
              if( remove ) //more checks
              {
                method.apply( this, arguments )
              }
            }, mark, original )


          }
          else if( val === 'remove' )
          {
            //val, stamp, false, remove, added, oldval
            _addListener( this, function( nval, stamp, from, remove, added, oldval ) {
              if( remove ) //more checks
              {
                method.apply( this, arguments )
              }
            }, mark, original )
          }
          //TODO: in redo this will be done differently (event types are special done)
          else if( val === 'loaded' ) {
            _addListener( this, function( nval, stamp, from, remove, added, oldval ) {
              // console.log( added ) //werkt niet!;
              //__frommethod

              if( this.$loaded || this.from.$loaded ) //more checks
              {
                method.apply( this, arguments )
              }
            }, mark, original )
          }
          else if( val === 'added' )
          {
            _addListener( this, function( nval, stamp, from, remove, added, oldval ) {
              // console.log( added ) //werkt niet!;
              if( added ) //more checks
              {
                method.apply( this, arguments )
              }
            }, mark, original )
          }
          else if( val === 'self' )
          {
            _addListener( this, function( nval, stamp, from, remove, added, oldval ) {
              // console.log( added ) //werkt niet!;

              //TODO: put on in a different file
              // console.log('SHOULD DO SELF!', arguments, from ) //zo wrong!

              if( this._val === nval 
              || !val && this._updateOrigin===this //pretty slow check , its there to check when someone call .update for example
              ) 
              {
                method.apply( this, arguments )
              }
            }, mark, original )
          }
          else
          {
            _addListener( this, function( nval ) {
              if( nval === val || this.val === val || this._val === val ) //more checks
              {
                method.apply( this, arguments )
              }
            }, mark, original )
          }
        }
      }
      return this
    },

  /**
   * removeListener
   * if no val removes all listeners
   * mark checks in array on position 1 for uniqueness
   * remove is used in combination with mark
   * @method
   */
  'removeListener', function(val, mark, remove, nobreak) {
    // console.log('removeListener!', this._path, this._listeners && this._listeners.length
    //   , '\nmark:\n', mark && mark.raw
    //   , '\nval:\n', val && val.name
    //   , '\nval:\n', val
    // )
    var _l = this._listeners,
      i;
    if (_l) {
      for (i = _l.length - 1; i >= 0; i--) {
        //maybe checking mark all the time is too slow?
        var listener = _l[i]
        if (
          (!mark && !val)
          || (val && listener === val) //false voor mark
          || (mark!==false && ((listener instanceof Array) && ((mark && listener[1] === mark && (!val||listener[0]===val)) || val && listener[1] === val))
            && (!remove
              || (remove === true  //dit moet later weg is dan alleen een functie is nu overbodig (check boven)
                ? listener[0] === val
                : remove.call(this, listener, mark))))
        ) {
          // console.log('mark._listens?', !!(mark && mark._listens)
          //     , '\nis vObject?', listener instanceof vObject
          //     , '\nis marked?', listener instanceof Array
          //   )
          var focus = mark
            ? mark
            : listener instanceof vObject
              ? listener
              : listener instanceof Array
                ? listener[1]
                : false
          var listens = focus && focus._listens
          if(listens){
            for(var j = listens.length-1 ; j >= 0 ; j--){
              if(listens[j] === this){
                listens.splice(j, 1)
                if(listens.length === 0)
                  focus._listens = null
                if(focus.__t === 4 && listener._val === this)
                  listener._val = void 0
                break
              }
            }
          }
          _l.splice(i, 1)
          if (_l.length === 0) this._listeners = null;
          if (val && !nobreak) break
        }
      }

      //TODO: this has to be refactored ASAP! do when new design phase for vobject+base is going down
      if( this._listenMap && val ) {
        // console.log('im here!', val)
        var piv
        for(var i = 0, _len = this._listenMap.length; i < _len; i++ ) {
          if( this._listenMap[i][0] === val ) {
             // console.log('hey its the listenmap!', val)
             this.removeListener( this._listenMap[i][1] )
             piv = i
             break;
          }
        }
        if( piv !== void 0 ) {
          this._listenMap.splice(piv, 1)
          if(this._listenMap.length === 0) {
            this._listenMap = false
          }
        }
      }

    }
  });
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","promise":"/Users/youzi/dev/mtv-play/node_modules/promise/index.js","vigour-js/browser/animation/raf":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/animation/raf.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/util.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var util = require('../util'),
  VObject = require('./'),
  V = require('../')
  _c = util.checkArray

/**
 * Gets/sets VObject origin
 * In a chain of V.Objects e.g. x.val = y, y.val = z ---> x.from returns z;
 * @method from
 * @param  {Object} obj [description]
 * @return {Object}     [description]
 */
var _coreSet = VObject.set,
  _from = this.from = function(obj) {
    var val = obj,
      last;

    while (val instanceof VObject) {
      // console.log(val)
      if(val._filter) {
        // console.error('IS SELECITON', val)
      }
      last = val;
      val = val._val;
    }
    return last !== obj ? last : false;
  },
  _lastLFrom = function(obj) {
    while (obj && obj.__t === 4) {
      if (obj._lfrom) {
        return obj._lfrom;
      } else {
        obj = obj._val;
      }
    }
  },
  /**
   * Returns path
   * @method _updatePath
   * @param  {Object}    till [description]
   * @return {Object}         Returns path
   */
  _updatePath = function(till, start) {
    var parent = this,
      lfrom,
      path = []; //reduce amount of new arrays
    while (parent && (parent._name !== void 0 || start)) {
      lfrom = parent._lfrom || _lastLFrom(parent)
      if (lfrom) {
        var a = _updatePath.call(lfrom),
          c = parent.from._name;
        util.add(a, path);
        path = a;
        if (c) {
          c = a.indexOf(c);
          a.splice(c, a.length - c);
        }
      }
      if (parent !== till) {
        path.push(parent._name);
        parent = parent._parent;
      } else {
        parent = false;
      }
    }
    // console.log('----->',path)
    return till ? path.reverse() : path;
  }

util.define(VObject,
  /**
   * Removes all linked containers, uses slice on arrays
   * Removes all _listeners
   * @method destroy
   */
   'toString', function( compressed ) {
      return compressed 
             ? JSON.stringify( this.raw ) 
             : JSON.stringify( this.raw, false, 2 )
   },
   'referenceLevel', function(linked) {
      var link = this
      var cnt = 0

      // console.log(link, link.__t)

      while(link && link.__t) {
        if(link===linked) {
          return cnt
        }
        link = link._val
        cnt++
      }
      return false
   },
  'destroy', function(nested, bl, not, from, stamp, noupdate) {
    if(!stamp)
      stamp = this.stamp()

    this._removed = true
    this.destroyReferences(nested, bl, not, from, stamp, noupdate)
    this.remove(nested, bl, not, from, stamp, noupdate)
  },
  'destroyReferences', function(nested, bl, not, from, stamp, noupdate) {
    if(!stamp)
      stamp = this.stamp()

    var _l = this._listeners
      , parent
      // , item
    if (_l) {
      for (var i = _l.length, ref; ref = _l[--i];) {
        // if(listener instanceof Array){
        //   if(listener)
        // }
        // ref =  instanceof Array ? _l[i][1] : _l[i];
        if (ref instanceof VObject) {
          parent = ref._parent;
          if (parent && parent.__t === 1) {
            parent.splice(ref._name, 1);
          } else {
            ref.remove(nested, bl, not, from, stamp, noupdate);
          }
        }
      }
    }
  },
  /**
   * Performs passed function on each item.
   * Skips items in the blacklist.
   * @method
   * @param  {Function}  fn   function to perform on each
   * @param  {Boolean}   deep If true, repeats eachmethod on nested fields
   * @param  {Arguments} arg  Arguments to pass to the function
   * @return {Boolean}        [description]
   */
  'each', function(fn, deep, arg) {
    //try to make this a lot shorter
    var i, item;
    if (arg !== void 0) {
      arg = util.arg(arguments, 2);
      for (i in this) {
        if (!_c(this._blacklist, i)) {
          item = this[i];
          if (fn.apply(item, arg)) {
            return true;
          }
          if (deep && (item.__t !== 4 || item._contained)) {
            if (item.each.apply(item, arg)) {
              return true;
            }
          }
        }
      }
    } else {
      for (i in this) {
        if (!_c(this._blacklist, i)) {
          item = this[i];
          if (fn.call(item, i)) {
            return true;
          }
          if (deep && (item.__t !== 4 || item._contained)) {
            if (item.each(fn, deep, arg)) {
              return true;
            }
          }
        }
      }
    }
  },
  /**
   * Returns the real path
   * @attribute _path
   */
    '_path', {
      get: function() {
        var parent = this
          , path = []

        while (parent && parent._name !== void 0) {
          path.push(parent._name);
          parent = parent._parent;
        }

        return path.reverse();
      }
    },
    '_cachedPath', {
      get: function() {
        return this.__cachedPath || (this.__cachedPath = this._path.join('.'))
      }
    },
  /**
   * Returns the update path
   * @attribute updatePath
   */
  'updatePath', {
    get: function() {
      var a = _updatePath.call(this, this, true),
        name = this._name;
      name !== void 0 && a.unshift(name);
      return a;
    }
  },
  /**
   * Returns the keys of an object
   * @attribute keys
   */
  'keys', {
    get: function() {
      var i, arr = [];
      for (i in this) {
        if (!_c(this._blacklist, i)) {
          arr.push(i);
        }
      }
      return arr;
    }
  },
  /**
   * Returns true if object is Ancestor
   * also return true when object is object to be compared to
   * @attribute keys
   */
  //t._d === from._parent || t._d === from
  '_ancestor', function(obj) {
    // console.log('ANCESTOR'.red.inverse, obj, this)
    var p = this
    while (p) {
      if (obj === p) return true
      p = p._parent
    }
  },
  /**
   * Get a field at first occurence in the parent chain
   * @method checkParent
   * @param  {String}  field [description]
   * @param  {Boolean} get   When true returns found instead of current
   * @return {Object}        [description]
   */
  'checkParent', util.checkParentFactory('_parent'),
  /**
   * Returns a normal object, and keeps links to V.Objects
   * @method
   * @param  {*}      [val] [description]
   * @return {Object}       [description]
   */
  'convert', function(val) {
    var obj = {}, l = 0
    if (!val || val.val) obj.val = this._val
    if (this.__t === 1) {
      obj = []
      for (var i = 0; i < this.length; i++) {
        l++
        obj[i] = this[i].convert()
      }
    } else {
      this.each(function(i) {
        if (!val || val[i]!==void 0) {
          l++
          obj[i] = this.convert()
        }
      })
    }
    if (val) {
      for (var i in val) {
        if (obj[i] === void 0) obj[i] = void 0
        l++
      }
    }
    if (!l && (!val || val.val)) obj = obj.val
    return obj
  },
  /**
   * Returns a normal object
   * @attribute raw
   */
  'raw', {
    get: function() {
      var self = this,
        type = self._filter ? 2 : self.__t,
        obj, i, l;
      if (type === 4) {
        return self._val && self._val.raw;
      } else if (type === 3) {
        return self.val; //when the type is mixed always uses val
      } else {
        if (type === 1) {
          obj = [];
          for (i = -1, l = self.length - 1; i < l; self[++i] && obj.push(self[i].raw));
        } else {
          obj = {};
          for (i in self) {
            if (!_c(self._blacklist, i) && self[i]) {
              obj[i] = self[i].raw;
            }
          }
        }
        return obj;
      }
    }
  },
  /**
   * Gets/sets object origin
   * In a chain of V.Objects e.g. x.val = y, y.val = z ---> x.from returns z;
   * @attribute from
   */
  'from', {
    set: function(val) {
      var found = _from(this)
      _coreSet.call(found || this, val)
    },
    get: function() {
      return _from(this) || this
    }
  },
  /**
   * Merge any object into another object
   * Shallow for a shallow merge
   * @method merge
   * @param  {Object}  obj      [description]
   * @param  {Boolean} shallow  [description]
   * @param  {Number}  stamp    [description]
   * @param  {Boolean} noupdate [description]
   * @return {Object}           [description]
   */
  'merge', function merge( obj, shallow, stamp, noupdate, block, sorted, deferUpdates ) {

    // console.log('MERGE---->', obj )

    var mergeArray = this._mergeArray
      , r
      , i
      , stop
      , rt
      , cobj
      , tobj
      , topLevel

    if(!deferUpdates) {
      // console.log('NO deferUpdates'.yellow.inverse)
      topLevel = true
      deferUpdates = []
    }
    //FIXME: make it better long names etc, code formatting

    if ( !stamp ) stamp = this.stamp()

    if ( this.__t === 1 ) {
      if (mergeArray) {
        mergeArray( obj, stamp, noupdate ) //hier moet ook ff deferUpdates
      } else {
        for (var j in obj) {
          cobj = obj[j]
          tobj = this[j]
          if ((j = Number(j)) > -1) {
            r = true
            if (tobj) {
              tobj.merge(cobj, false, stamp, true, block, sorted, deferUpdates )
            } else {
              if (j > this.length - 1) this.length = j + 1
              this.set(j, cobj, false, stamp, true, true)
            }
          }
        }
      }
    } else {
      for (i in obj) {
        stop = true
        cobj = obj[i]
        tobj = this[i]
        if (i !== 'val' && !_c(this._blacklist, i)) {
          if (!shallow && tobj && util.isObj(cobj)) { //cobj instanceof Object && (typeof cobj !== 'function') && cobj.__t !== 3)
            if (cobj.clear) {
              _coreSet.call(tobj, cobj, stamp, false, true)
              r = true
            } else {

              // console.error('---- merge /w update thats mos def wrong!', i, deferUpdates)
              //deferUpdates

              rt = tobj.merge(cobj, false, stamp, true, block, sorted, deferUpdates )
              if (r !== true) r = rt

              if (!rt) 
              {
                // console.log('0000')
                obj[i] = void 0
              }
            }
          } else {

            if (tobj && tobj._val === cobj) { //changed to differentiate between 0 and false, now also differentiates between 1 and '1'
                // console.log('---- 2 update thats mos def wrong!', i)

              if (r !== true) r = false
              // console.log('???????')
              obj[i] = void 0
            } else {
              // console.log('---- 3 update thats mos def wrong!', i)
              if(cobj===null && this[i]) {
                this[i].remove( false, false, false, void 0, stamp )
              } else {
                // console.log('!?'.bold, i, this[i])
                //name, val, vobj, stamp, noupdate, from
                this.set( i, cobj, false, stamp, true )
                // console.log('!xxxx?', i)
                if(this[i] && this[i]._listeners) {
                  // console.log('push push'.green,  JSON.stringify(obj) )
                  deferUpdates.push( [this[i], cobj] )
                }
                //add dit naar list
              }
              if (!r) r = rt;

              // console.warn(r, rt)

              if (!rt) 
              {
                //TODO: TEMP FIX DONT KNOW IF THIS WORKS!
                // console.log('???????22222')
                // obj[i] = void 0
                // console.warn('cant be right!')
                //SUPER CAREFULL WITH THIS R THING!!!!!
                r = true
              }
            }
          }
        }
      }
      if (obj.val) {
        rt = _coreSet.call(this, obj.val, stamp, false, true)
        if (!r) {
          r = rt
        }
        if (!rt) {
          obj.val = void 0
        }
      } else if (!stop) {
        if (!r) {
          r = false;
        }
      }
      r = (r !== false) || r
    }

    if (r) {
      if (!block) {
        // alert(noupdate)
        if (noupdate) {

          // console.log('!!??????????? NOUPDATE'.blue, JSON.stringify(obj))

          if(topLevel) {
            // console.log('UPDATE>?'.magenta.inverse, obj, JSON.stringify( obj ), noupdate, stamp)
            this._update(obj, stamp)
          }
          else {
            this.__update(obj, stamp)
            deferUpdates.push([ this, obj ])
          }
        } else {
          
          // console.log('2UPDATE>?'.cyan.inverse, topLevel, deferUpdates, obj, noupdate, stamp)

          this._update( obj, stamp )
        }
      }
    }
   

    if(topLevel && deferUpdates) {
      // console.log( 'defered updace', topLevel, deferUpdates)
      for(var df in deferUpdates) {
        if( deferUpdates[df][0] && deferUpdates[df][0].__update ) {
          // console.log('DEFERED!!!!'.cyan.inverse, df, deferUpdates[df][1], stamp )
          deferUpdates[df][0].__update( deferUpdates[df][1], stamp )
        }
      }
    }
    return r
  },
  /**
   * Copies an object and returns a new one, can also pass a merge object
   * @method
   * @param  {Object}        obj       Object to copy
   * @param  {Boolean}       [shallow] [description]
   * @param  {Array|Object}  [list]    Takes any object with .length
   * @param  {Object}        [parent]  [description]
   * @return {Object}                  [description]
   */
  'clone', function(obj, shallow, list, parent) { //support shallow!; check obj copy only what is nessecary added makeshort , made parent shorter
    var copy = new this._class(),
      _val = this._val,
      i;
    if (parent) {
      copy._parent = parent;
    }
    copy.__t = this.__t;
    if (this.__t === 1) {
      copy.length = this.length;
    }
    if (list) {
      //list
      for (var j = list.length - 1, item; j >= 0; j--) {
        item = list[j];

        if (item instanceof Array && this[item[0]]) {
          if(item[1] === true) {
            copy[item[0]] = util.clone(this[item[0]], false, true)
          } else {
            copy[item[0]] = item[1];
          }
        } else if (this[item]) {
          // console.log(item)
          copy[item] = this[item];
        }
      }
    }
    if (_val && (_val instanceof VObject && _val._contained)) {
      copy.val = _val.clone(copy, false, list, copy);
      copy._val._contained = true;
    } else {
      VObject.set.call(copy, _val, false, false, true);
    }
    for (i in this) {
      if (!_c(this._blacklist, i)) {
        // console.log(i)
        if (!shallow) {
          if (this[i] instanceof VObject) {
            //function( name, val, vobj, stamp, noupdate, from )

            // console.log('----->1', i, this[i].clone(void 0, false, list, copy))
            //stamp void 0
            copy.set(i, this[i].clone(void 0, false, list, copy), true, false, true)
          } else {

            // console.log('----->2', i, util.clone(this[i]))

            copy[i] = util.clone(this[i]);
          }
        } else {
          //function( name, val, vobj, stamp, noupdate, from )
          copy.set(i, this[i], false, false, true);
        }
      }
    }
    if (obj !== void 0) {
      if (util.isObj(obj)) {
        // console.log('MERGE----->', obj, shallow)
        copy.merge(obj, shallow);
      } else {
        VObject.set.call(copy, obj, false, false, true)
      }
    }
    copy.__t = this.__t;
    return copy;
  },
  /**
   * Returns object on the end of a defined path
   * @method path
   * @param  {Array}     path           Array of fields in path
   * @param  {*}         [val]          When defined, val will be set on endpoint of path if not already defined
   * @param  {Boolean}   [overwrite]    If true, val WILL overwrite existing value on endpoint of path when already defined
   * @param  {Function}  [writeHandler] Callback on write
   * @return {*}                        Object on the end of a defined path
   */
  'path', function(path, val, overwrite, writeHandler, vobj, stamp, noupdate, self) {
    if(!(path instanceof Array)) path = path.split('.');
    return util.path(this, path, val, overwrite, writeHandler, vobj, stamp, noupdate, self);
  },
  /**
   * Gets object from specified path. When path is a string checks for 'dotnotation'.
   * @method get
   * @param  {String|Array} path Defines field {string} or path {array|'dot-notation'}
   * @return {*}                 obj[path]|nested object/value
   */
  'get', function(path, self) { //get does not need an array as path
    return util.get(this, path, self);
  },

  //(val, stamp, from, noupdate, add)
  // '$set', function( val, stamp, from, update ) { //get does not need an array as path

  //   return VObject.set.call( this, val, stamp, from, !update )
    
  //     '_set', function(val, stamp, from, remove, noupdate, added, oldval) {
  //   if (!noupdate) {
  //     (val, stamp, from, noupdate, add)
  //     // console.log(this._path, val)
  //     this._update(val, stamp, from, remove, added, oldval);
  //   }
    

  // },
  /**
   * Check if obj is empty exclude field names passed to list
   * @method empty
   * @return {Boolean} True/false
   */
  'empty', {
    get: function() {
      return util.empty(this, this._blacklist);
    }
  },
  '$empty', function( excludes, update ) {
      //get does not need an array as path
      var _this = this
      this.each( function( key ) {
        if( 
            !excludes 
              || typeof excludes === 'string'  
                 ? key !== excludes 
                 : !util.checkArray( excludes, key ) 
          )
        {
          if( this.remove ) 
          {
            this.remove( false, false, false, false, false, true )
          } 
          else 
          {
            // console.warn( '$empty non-vObject object.util remove', this, key )
            _this[key] = null
          }
        }
      })
    
      if( this.clearCache ) this.clearCache()

      if( update )
      {
        this._update('empty')
      }
  },
  /**
   * Returns the V.Object from which the current update originated.
   * @method _updateOrigin
   * @return {V.Object} origin of the update
   */
  '_updateOrigin', {
    get: function() {
      var mark = this;
      // console.error('get UPDATE ORIGIN', this._path, this._lfrom)
      while (mark._lfrom) {

        //if V.CloudData
       // console.error( '_update that origin!', mark._path )
        mark = mark._lfrom;
      }
      return mark;
    }
  },
  '_origin', {
    get: function() {
      var mark = this;
      while (mark && mark.__t === 4) {
        mark = mark._val;
      }
      return mark;
    }
  }
)


//add find


},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/index.js":[function(require,module,exports){
(function (__dirname){
var util = require('../')
  , ajax
  , PACKAGE = '/package.json'

module.exports = exports = function( callback, params, packageFile, noReplace ) {

  packageFile = packageFile || ( util.isNode ? {} : window.package )

  var obj = {}
    , req = module.exports
    , cb = callback && function( pckg ) {

      obj = pckg.vigour
      req.parse( obj, packageFile, req._checks )

      if(!noReplace) module.exports = obj
      callback(obj)
    }

  //default option add more!
  if(!params) {
    exports.options.val(obj, cb, false, packageFile )
  } else if(exports.options[params]) {
    exports.options[params](obj, cb, false, packageFile )
  } else {
    exports.options.val(obj, cb, params, packageFile )
  }
  return obj
}

if(util.isNode) {
  exports.options = {
    val:function( obj, callback, params, pckg ) {
      callback( pckg )
    }
  }
} else {
  ajax = require( '../../browser/network/ajax' )
  exports.options = {
    val:function(obj, callback, params) {
      if( !window.package ) {
        var domain = !window.cordova && String(window.location)
            .match(/https?:\/\/([^\/]+)/)

        if(domain) domain = domain[0]
         
        ajax({
          url:params && params.url ? params.url : domain+PACKAGE,
          fallback: [
              { url: PACKAGE } //for testing
            , params && params.fallback ? params.fallback : { url: __dirname+PACKAGE }
            , { url: '../'+PACKAGE }
            , { url: '../../'+PACKAGE }
            , { url: '../../../'+PACKAGE }
          ],
          complete:function(data) {
            window.package = data
            if(callback) callback(data)
          }
        })
      } else if(callback) {
        callback(window.package)
      }
    }
  }
}

exports.inject = function() {
  exports._checks = util.arg(arguments)
  return exports
}

exports.loop = function(obj, option, pckgval, merge, fn, params ) {
  if(fn) {
    var val = option(obj,pckgval,merge, params)
    if(val) { util.merge(obj,val) }
  } else {
    for(var h in obj[option]) {
      if((pckgval===h)) {
        util.merge(obj,merge[h])
        break
      }
    }
  }
}

exports.parse = function( obj, pckg, options, params ) {
 if(!(options instanceof Array)) {
    options = [options]
 }

 for(var i in options) {
    for(var check in options[i]) {
      var pckgval = util.get(pckg,check)
        , option = options[i][check]

      exports.loop(obj, option, pckgval, obj[options[i][check]], typeof option === 'function',params)
    }
  }
  return obj
}

}).call(this,"/node_modules/vigour-js/util/config")

},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../browser/network/ajax":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/ajax.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/config/ua.js":[function(require,module,exports){
var ua = require('../../browser/ua')
  , util = require('../')
  , Data = require('../../data').inject(require('../../data/selection'))
/*
selection!

*/
bla = exports

exports.parse = function(obj, pckgval, merge, params) {
  var _ua = ua

  if(params && params.ua) {
    _ua = ua.parse(params.ua.toLowerCase(),{})
  }

  // console.log('HERE!',obj,pckgval,merge)
  var cond
    , uaclone = new Data({bla:util.clone(_ua)})

  if(obj.ua) {
    for(var i in obj.ua) {
      if(_ua.platform===i||_ua.device===i||_ua.browser===i) {
        return obj.ua[i]
      } else if(obj.ua[i].condition) {
        if(!cond) {
          cond = new Data(uaclone, obj.ua[i])
        } else {
          cond.filter = obj.ua[i]
        }
        if(cond.length) {
          delete obj.ua[i].condition
          cond.remove()
          return obj.ua[i]
        }
      }
    }
  }


  //blabla

  // console.log('SUBOBJ???',obj)


  delete obj.subsObj

  if(cond) cond.remove()
}


},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../browser/ua":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/ua.js","../../data":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/index.js","../../data/selection":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/data/selection.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/debug/index.js":[function(require,module,exports){
(function (process){
var debug = exports

DEBUG$ = debug

/*
  console.log('util/test \n\nif you want to check memory usage start chrome using: \n\n open -a Google\\ Chrome --args --enable-memory-info \n')
*/
var util = require('../')
  , isNode = util.isNode //has to become part of util
  , V = require('../../')
  , log = debug.log = require('./log')
  , debuglog = log.logger('DEBUG$', 'rainbow')

debug.perf = debug.performance = require('./performance')

//------------------------------------------------------------------------------

if(!isNode) {
  debug.cases = require('../../browser/cases/')
  exports.body = document.body.base
  Object.defineProperty(module.exports, 'domain', {
    get: function() {
      //debugger --- can go away with a transform
      return String(window.location)
        .match(/https?:\/\/([^\/]+)/)[1]
        .replace(/:.+/, '')
    }
  })

} else {
  var DEBUG = process.env.DEBUG
  if(DEBUG){
    var levels = DEBUG.split(',')
    for(var l in levels){
      var two = levels[l].split(':')
      DEBUG$.level[two[0]] = two[1] ? Number(two[1]) : 3
    }
  }
}

//------------------------------------------------------------------------------

exports.int = function(rand, fn) {
  function func() {
    rand = rand||1000
    return ~~(Math.floor(Math.random()*rand))
  }
  return fn ? func() : func
}

exports.text = function (length, fn, str, nolines, strict) {
  if (fn) {
    return function() {
      return exports.text(
        Math.round(Math.random() * length) + 1, false, str, nolines, strict
      )
    }
  }
  else {
    var s = ['.', '.', '.', ';', ',']
      , b = ['ab', 'able', 'zo', 'x', 'lax', 'bur', 'rem', 'lur', 'fur', 'jur', 'lex', 'rex', 'wurd',
        'shur', 'burn', 'heps', 'a', 'i', 'y', 'u', 'e', 'p', 'l', 'splurf']
      , output = ''
      , nospace = 0

    if (str) b = str

    str = function () {
      return b[Math.round(Math.random() * (b.length - 1))]
    }
    if (!length) length = ~~ (Math.random() * 101)
    for (var i = 0, g; i < length; i++) {
      if ( !strict && (!output[output.length - 1]
        || output[output.length - 2] === '.'
        || output[output.length - 2] === '\n')
      ) {
        g = str()
        output += g[0].toUpperCase() + g.slice(1)
      }
      else {
        output += str()
      }
      nospace++
      if (!strict && ~~(Math.random() * (nospace / 2))) {
        var br = false
          , v
        if (!nolines && ~~(Math.random() * 21) > 17) {
          v = s[~~(Math.random() * (s.length - 1))]
          output += v
          if (v === '.' && ~~(Math.random() * 11) > 6) {
            br = true
            output += '\n'
            if (~~(Math.random() * 11) > 7) output += '\n';
          }
        }
        if (!br) output += ' '
        nospace = 0
      }
    }
    return output
  }
}

exports.data = function (populate, level, obj, cnt, prev) {
  if (!obj) obj = {}
  if (!cnt) cnt = 0
  if (!level) level = 0
  for (var i in populate) {
    if ((populate[i] instanceof Object)
      && populate[i].length && populate[i].val
    ) {
      if (populate && populate[i]) {
        obj[i] = []
        for (var j = 0; j < populate[i].length; j++) {
          obj[i][j] = typeof populate[i].val === 'function'
            ? populate[i].val()
            : exports.data(populate[i].val, (level + 1), false, j + 1, obj)
        }
      }
    }
    else if ((populate[i] instanceof Object)
      && (typeof populate[i] !== 'function')
    ) {
      obj[i] = exports.data(populate[i], (level + 1), obj[i], false, cnt, obj)
    }
    else if (populate && populate[i]) {
      obj[i] = (typeof populate[i] === 'function')
      ? populate[i].call(obj, cnt, prev)
      : populate[i];
    }
  }
  return obj;
};

//------------------------------------------------------------------------------
debug.download = function(filename, text) {
  var pom = document.createElement('a');
  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
  pom.setAttribute('download', filename);
  pom.click();
}

//------------------------------------------------------------------------------
debug.remote = function(id) {
  var fileref = document.createElement('script')
  fileref.setAttribute("type", "text/javascript")
  fileref.setAttribute("src", 'http://jsconsole.com/remote.js?'+id)
  document.getElementsByTagName("head")[0].appendChild(fileref)
}

debug.findScript = function(node,name,strict) {

  var children = node.childNodes
    , extension = name.match(/\.([a-zA-Z0-9]{1,30})$/)[1]
    , regExp = !strict && new RegExp(name+'$')
    , field = extension === 'js' ? 'src' : 'href'

  for(var i in children) {

    if(strict ? children[i][field]===name : regExp.test(children[i][field])) {
      return children[i]
    }

  }

  // console.log('notfound', name)
}

function prompty (msg, value, cb) {
    var dialog = document.createElement("div")
        , p = document.createElement("p")
        , input = document.createElement("input")
        , ok = document.createElement("button")
        , cancel = document.createElement("button")
    p.appendChild(document.createTextNode(msg))
    input.type = "text"
    input.value = value
    input.style.display = "block"
    ok.appendChild(document.createTextNode("OK"))
    cancel.appendChild(document.createTextNode("Cancel"))
    ok.addEventListener('click', function () {
        hideDialog()
        cb(input.value)
    })
    cancel.addEventListener('click', function () {
        hideDialog()
        cb(null)
    })
    dialog.appendChild(p)
    dialog.appendChild(input)
    dialog.appendChild(ok)
    dialog.appendChild(cancel)
    dialog.style.position = "absolute"
    dialog.style.top = 25 + "px"
    dialog.style.left = 50 + "px"
    dialog.style.zIndex = 1000
    dialog.style.fontSize =  24 + 'px'
    dialog.style.backgroundColor = "white"
    document.body.appendChild(dialog)
    function hideDialog() {
        dialog.parentNode.removeChild(dialog)
    }
}

debug.native = function(def, parse, cb, file) {
  if(!document.getElementById('dev')) {
    var elem = document.createElement('div')
    elem.id = 'dev'
    elem.style.zIndex = 9999999
    elem.style.position = 'absolute'
    elem.style.left = '2px'
    elem.style.top = '80px'
    elem.style.padding = '15px'
    elem.style.backgroundColor = 'rgba(50,50,50,0.8)'
    elem.style.borderRadius = '50%'
    elem.addEventListener('click',function() {
      prompty('IP', localStorage.getItem('devip') || def || 'http://10.0.1.2:8080', function (ip) {
        if (ip) {
          localStorage.setItem('devip',ip)
           window.location.reload()
        } else {
          // alert('x')
          localStorage.removeItem('devip')
          window.location.reload()
        }
      })
    })
    document.body.appendChild(elem)
  }

  if(!file) {
    file = 'build'
  }

  if( localStorage.getItem('devip') ) {
    DEBUG$.remoteResource(localStorage.getItem('devip')+'/bundle.css',file+'.css',false)
    if(DEBUG$.remoteResource(localStorage.getItem('devip')+'/bundle.js',file+'.js',false)) {
      document.getElementById('dev').style.backgroundColor = 'rgba(0,255,0,0.8)'
      if(cb) cb(localStorage.getItem('devip'))
      return true
    } 
  }
}

//hier remoteresource gebruiken
debug.remoteResource = function(src, replace, strict) {
  void(0)
  var strict = strict !== void 0 ? strict : true
    , extension = src.match(/\.([a-zA-Z0-9]{1,30})$/)[1]
    , fileref = document.createElement(extension==='js' ? 'script' : 'link')
    , head =  document.getElementsByTagName("head")[0]
    , body = document.body
    , found
    , fileSrc

  if(!replace) {
    strict = false
    replace = src.match(extension==='js'
      ? /(\/)([a-zA-Z0-9-_+$]){0,30}\.js$/
      : /(\/)([a-zA-Z0-9-_+$]){0,30}\.css$/
    )[0].slice(1)


  }

  fileSrc = src+'?'+ ~~(Math.random()*9999999)

  if(extension==='js') {
    fileref.setAttribute("type", "text/javascript")
    fileref.setAttribute("src", fileSrc)
  } else {
    fileref.setAttribute("type", "text/css")
    fileref.setAttribute("rel", "stylesheet")
    fileref.setAttribute("href", fileSrc)
    fileref.setAttribute("id", fileSrc)
  }

  found = debug.findScript(head,replace,strict)

  if(!found) {
      void(0)

    found = debug.findScript(body,replace,strict)
  }
  if(found) {

    void(0)

    var parent = found.parentNode
    if(String(found.src).indexOf(src)>-1) {
      return
    }

    parent.removeChild(found)
    parent.appendChild(fileref)
    return true
  }
}

}).call(this,require('_process'))

},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../../browser/cases/":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js","./log":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/debug/log.js","./performance":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/debug/performance.js","_process":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/process/browser.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/debug/log.js":[function(require,module,exports){
var debug = require('./') 
  , util = require('../') 
  , isNode = util.isNode //has to become part of util
  , V = require('../../')
  , repl
  , colors
  , origConsole = console
  , colors = {
      green:'#56db68',
      red:'#ff0000',
      grey:'#ccc',
      yellow:'#e0e67c',
      cyan:'#00ffff',
      magenta:'#ff00ff',
      blue:'#1111ff',
      white:'#fff'
    }
  , styles = {
      bold:'font-weight:bold;font-size:16px;line-height:15px',
      underline:'border-bottom:1px solid',
      italic:'font-style:italic',
      inverse:function(color) {
        if(color) {
          return color+';background-color:#333;padding:5px;line-height:20px'
        } else {
          return 'color:'+colors.white+';background-color:#333;padding:5px;line-height:20px'
        }
      }
    }

debug.level = 
{ DEBUG$: Infinity
, test:2
}



/*
bold
italic
underline
inverse
yellow
cyan
white
magenta
green
red
grey
blue
rainbow
zebra
random
*/

//------------------------------------------------------------------------------

var logObject
  , parseObject
  , LOG
  , INFO
  , ERROR
  , DETAIL

if (!isNode) { 

  LOG = ':'
  INFO = '::'
  ERROR = 'ERREX!'
  DETAIL = ':::'

  // console = {}
  function loglink(i) {
    return function() {
      // console.log(i, arguments)
      // console.log(new Error().stack)

      origConsole[i].apply(origConsole, arguments)
    }
  }

  // for(var i in origConsole) {
  //   if(i !== 'log') console[i] = loglink(i)
  // }

  var Color = function(val,code,s) {
    this.color =  (s ? code : 'color: '+code)+';'
    this.val = new String('%c'+val)
  }
  
  // console.log = function() {

  //   var next = false

  //   for(var i=0, arg, rargs=[], args = arguments,len = args.length;i<len;i++) {
  //     arg = args[i]
  //     if(arg instanceof Color) {
  //       if(rargs.length){
  //         next = util.arg(args, i)
  //         break
  //       }else{
  //         rargs.push(arg.val.valueOf(), arg.color)
  //       }
  //       // logger(arg.val.valueOf(), arg.color)
  //     } else {
  //       rargs.push(arg)
  //     }
  //   }
  //   // logger('now log', rargs)
  //   if(rargs.length) logger.apply(origConsole,rargs)
  //   // logger('next', next)
  //   if(next.length) console.log.apply(null,next)

  // }

  function color(i, Class, style) {
    util.define(Class || String,i,{
      get:function() {
        if(Class) {
          if(typeof style === 'function') {
            this.color = style(this.color)
          } else {
            this.color+=(style||('color:'+colors[i]))+';'
          }
          return this
        } else {
          var s = colors[i]
          if(style) {
            if(typeof style === 'function') {
              s = style()
            } else {
              s=style
            }
          }
          return new Color(this,s,style)
        }
      }
    })
  }

  // function logger() {


  //   origConsole.log.apply(origConsole,arguments)


  // }

  // for(var i in colors) { color(i) }
  // for(var i in styles) { color(i, false, styles[i]) }  
  // for(var i in colors) { color(i, Color) }
  // for(var i in styles) { color(i, Color, styles[i]) }  

  parseObject = function(obj) {
    if(typeof obj === 'string') return obj
    var str = ''
    for(var i in obj) {
      str += i + ' : ' + (typeof obj[i] === 'string' 
        ?  obj[i] 
        : JSON.stringify(obj[i],false,2)) 
      + '\n'
    }
    return str.inverse.green
  }
  
  logObject = function(obj) {
    void(0)
  }
  
} else {
  repl = require('repl')
  colors = require('colors')

  LOG = 'log  '.grey
  INFO = 'info '.green
  ERROR = 'error'.red
  DETAIL = '-----'.grey

  debug.repl = function() {
    repl.start('>')
    return debug
  }
  if(repl.context) repl.context.DEBUG$ = DEBUG$

  console.group = function() {
    void(0)
  }      
  console.groupEnd = function() {
    void(0)
  }
  var n_util = require('util')
  parseObject = function(obj){
    return n_util.inspect(obj,{colors:true, depth: 50})
  }
  logObject = function(obj){
    void(0)
  }
}

//------------------------------------------------------------------------------

util.define(Object,'DEBUG$log', function(msg,s) {
  if(console.group) void(0)
  if(typeof msg === 'string') {
    msg = msg
  } else {
    msg = false
  }
  var h = 'JSON '+(msg||' normal')
  debug.log.header(h)
  if(debug.level.test>1) void(0)
  if(s) {
    void(0)
    debug.log.fn.apply(this,util.arg(arguments,1)) 
  }
  // debug.log.end(h)
  if(console.group) void(0)
  return JSON.stringify(this,false,2)
})

if(!isNode && localStorage) {
  util.define(localStorage,'DEBUG$log', function(msg,s) {
    if(console.group) void(0)
    if(typeof msg === 'string') {
      msg = msg
    } else {
      msg = false
    }
    var h = 'localStorage '+(msg||' normal')
    debug.log.header(h)

    var obj = {}
    for(var i in this) {
      // console.log(i, this)
       try { obj[i] =JSON.parse(this[i]) } catch(e){
        obj[i] = this[i]
       }
    }

    // console.log()

    if(debug.level.test>1) void(0)
    if(s) {
      void(0)
      debug.log.fn.apply(this,util.arg(arguments,1)) 
    }
    // debug.log.end(h)
    if(console.group) void(0)
    return obj
  })
}

//------------------------------------------------------------------------------

var log = module.exports = exports = {
  stack: false,
  i:function(nr) {
    nr = this.indent
    var str = ''
    for(var i in nr) {
      str+='  '
    }
    return str
  },
  parse: parseObject,
  object: logObject,
  default: function(label, level){
    if(label instanceof Object)
      for(var l in label)
        setDefault(l, label[l])
    else
      setDefault(label, level)
  },
  logger:function(label, color, level){
    log.default(label, level || 1)
    
    function logger(){
      var level = debug.level.global !== undefined ? debug.level.global : debug.level[label]
      if(level > 2) {
//         console.log.apply(null, [label[color].bold, LOG].concat(util.arg(arguments)))
        if(log.stack) void(0)
      }
    }

    logger.info = function(){
      var level = debug.level.global !== undefined ? debug.level.global : debug.level[label]
      if(level > 1) {
        console.log.apply(null, [label[color].bold, INFO].concat(util.arg(arguments)))
        if(log.stack) void(0)
      }
        
    }
    logger.error = function(){
      var level = debug.level.global !== undefined ? debug.level.global : debug.level[label]
      if(level > 0) {
        console.log.apply(null, [label[color].bold, ERROR].concat(util.arg(arguments)))
        if(log.stack) void(0)
      }
    }
    logger.detail = function(){
      var level = debug.level.global !== undefined ? debug.level.global : debug.level[label]
      if(level > 3) {
        console.log.apply(null, [label[color].bold, DETAIL].concat(util.arg(arguments)))
        if(log.stack) void(0)
      }      
    }
    logger.parse = parseObject
    return logger
  },
  label: function(label, style, log){
      if(isNode) {
        console.log.apply(null, log)
      } else {
        console.log.apply( null
          , ['%c '+label+' ', style].concat(log)
        )
      }
  },
  header:function(msg) {
    this._lh = msg
    void(0)
  },
  header2:function(msg) {
    this._lh = msg
    void(0)
  },
  end:function(msg) {
    void(0)
  },
  level:function(level,field) {
    if(level >= debug.level.test 
      ||  debug.level[level] 
      || field && debug.level[level]>=field ) 
      console.log.apply(this,util.arg(arguments,1))
  },
  fn:function(arg) {
    debug.log.indent++
    if(typeof arg === 'function') {
      arg.call(this,util.arg(arguments,1))
    } else {
      void(0)
//       console.log.apply(this,arguments)
    }
    debug.log.indent--
  },
  indent:0
}

//------------------------------------------------------------------------------
function smallStack(lines){
  if(!lines) lines = 1
  var stack = new Error().stack.split('\n')
    , l = 3
    , result = []
    , end

  while(lines--){
    line = stack[l++]
    end = line[line.length-1] === ')' ? line.length-1 : line.length
    result.push(line.slice(line.indexOf('/'), end))
  }

  return result.join('\n').grey
  
}

function setDefault(label, level){
  if(debug.level[label] === void 0) debug.level[label] = level
}

setTimeout(function() {
//   console.log('log levels:\n', log.parse(debug.level))
},0)

//Localstorage

/*
var localStorageSpace = function(){
        var allStrings = '';
        for(var key in window.localStorage){
            if(window.localStorage.hasOwnProperty(key)){
                allStrings += window.localStorage[key];
            }
        }
        return allStrings ? 3 + ((allStrings.length*16)/(8*1024)) + ' KB' : 'Empty (0 KB)';
    };

*/

util.define(debug,'localStorageSize', {
  get:function() {
  var total = 0
  for(var x in localStorage) {
    var kbytes = (((x.length+localStorage[x].length))/(1024))
    total+=kbytes
    // console.log((x+":"+kbytes.toFixed(10)+" KB").grey)
  }
  void(0)
  return total*1024
}
})

util.define(debug,'localStorageKeysSize', {
  get:function() {
  var total = 0
  for(var x in localStorage) {
    var kbytes = (((x.length))/(1024))
    total+=kbytes
    // console.log((x+":"+kbytes.toFixed(10)+" KB").grey)
  }
  void(0)
  return total*1024
}
})



},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/debug/index.js","colors":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/node_modules/colors/colors.js","repl":"/Users/youzi/dev/gaston/node_modules/browserify/lib/_empty.js","util":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/util/util.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/debug/performance.js":[function(require,module,exports){
(function (process){
var util = require('../') 
  , debug = require('./') 
  , isNode = util.isNode //has to become part of util
  , os

if (isNode) { 
  os = require('os')
} else {
  void(0)
}

function _test(method, name, complete, call, args, nolog) {
  var start = exports.now()
    , memorystart = exports.memory()
    , memoryend
    , mem
    , time
    , end
    , sub 
  if (!name) name = 'TEST PERFORMANCE'
  if (call) {
    sub = method.apply(call, args)
  } 
  else {
    sub = method.apply(this, args)
  }
  end = exports.now()
  memoryend = exports.memory()
  mem = (memoryend - memorystart)
  time = end - start - (sub || 0)
  if (complete) {
    complete(((time) / 1000), (memoryend - memorystart))
  } 
  else if (!nolog) {
    if(debug.level.test>0) {
      void(0)
    }
  }
  return time
}



var oldCheck = []
debug.countNewListeners = function( obj, amount ) {
  
  amount = {val:0}

  var checknow = []

  debug.countListeners( obj, amount, checknow ) 

  var newlistners = []

  for( var i in checknow ) {

    if( util.checkArray( oldCheck, checknow[i] ) === false ) {
      // console.log(checknow[i])
      // if( typeof checknow[i] === 'object' || typeof checknow[i] === 'function' ) {
        // console.log('lets push')
        // if(!util.empty(checknow[i])) {
        newlistners.push( checknow[i] )
        // }
      // }
    }
  }

  oldCheck = checknow

  return {
    amount: amount.val
  , newchecks: newlistners
  }

}


debug.countListeners = function(obj, amount, checked) {
  var amount 
    , checked 

  if(!checked) {
    checked = []
  }

  if(util.checkArray(checked, obj)!==false || !obj) {
    return amount.val
  }
  checked.push(obj)

  if(!amount) amount = {val:0}
  if(obj._listeners) {
    amount.val+=obj._listeners.length
  }

  if(!obj.each) {

    if(obj instanceof Object) {
      for(var i in obj) {
        if(obj[i] && ( obj[i].__t || obj[i]._from || obj._from && i ==='cloud') ) debug.countListeners(obj[i],amount,checked)
      }
    }

  } else {

    obj.each(function(i) {
      debug.countListeners(this,amount,checked)
    })

  }

  return amount.val
}

debug.countSubs = function(obj, amount, key) {
  var amount 
  if(!amount) amount = {val:0}
  if(obj._subs) {
    void(0)
    amount.val+=obj._subs.length
  }
    
  if(!obj.each) {
    void(0)
  }
  // console.log(obj, obj._subs)
  obj.each(function(i) {
    debug.countSubs(this,amount,i)
  })
  return amount.val
}

function _done(params, time, mem) {
  if (params.complete) {
    params.complete(time, mem, params, exports.average(time)[0], exports.average(time)[1])
  } else {
    if(debug.level.test>0) {
      void(0)
    }
    //+(mem.length>0 ? '\nmemory used (approximate): '+mem+' kb' : '');
  }
}

module.exports = exports = function (params, fn) {
  if (fn && typeof params === 'string') {
    return _test(fn, params)
  } 
  else if (typeof params === 'function') {
    return _test(params)
  } 
  else if (params instanceof Object) {
    if(!params.name) params.name = 'performance test'

    if (params.loop) {
      //testing memory in loop is hard since the gc almost never makes it before next iteration;
      var time = []
        , mem = []
        , callback = function (_time, memory) {
          time.push(_time)
          if (memory) mem.push(memory)
        }

      if(params.interval) {
        var cnt = 0
          , interval = setInterval(function() {
              cnt++
              if(cnt===params.loop-1) {
                 clearInterval(interval)
                 _done(params, time, mem) 
              } else {
                _test(params.method, false, callback)
              }
            },params.interval)
      } else {
        for (var i = params.loop; i > 0; i--) {
          _test(params.method, false, callback)
        }
        _done(params, time, mem) 
      } 
      return exports.average(time)
    } 
    else {
      return _test(params.method
        , params.name
        , params.complete
        , params.call
        , params.args
        , params.nolog)
    }
  }
}

if(debug.log) debug.log.default('test', 4)

exports.now = function () {
  return isNode
    ? process.hrtime()[0] * 1000 + process.hrtime()[1] * 0.000001 
    : (window.performance && window.performance.now 
      ? window.performance.now() 
      : new Date().getTime())
}

exports.memory = function () {
  return isNode 
    ? process.memoryUsage().heapUsed 
    : (window && window.performance && window.performance.memory 
      ? window.performance.memory.usedJSHeapSize * 0.000976562 
      : 0)
}

exports.average = function (array) {
  var number = 0
  for (var i = array.length - 1; i >= 0; i--) {
    number += array[i]
  }
  return [number, number / array.length]
}

}).call(this,require('_process'))

},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/debug/index.js","_process":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/process/browser.js","os":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/os-browserify/browser.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/encode64.js":[function(require,module,exports){
/**
*
*  Base64 encode / decode
*  http://www.webtoolkit.info/
*
**/
var Base64 = {

// private property
_keyStr : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

// public method for encoding
encode : function (input) {
    var output = "";
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
    var i = 0;

    input = Base64._utf8_encode(input);

    while (i < input.length) {

        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);

        enc1 = chr1 >> 2;
        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
        enc4 = chr3 & 63;

        if (isNaN(chr2)) {
            enc3 = enc4 = 64;
        } else if (isNaN(chr3)) {
            enc4 = 64;
        }

        output = output +
        this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
        this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

    }

    return output;
},

// public method for decoding
decode : function (input) {
    var output = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i = 0;

    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

    while (i < input.length) {

        enc1 = this._keyStr.indexOf(input.charAt(i++));
        enc2 = this._keyStr.indexOf(input.charAt(i++));
        enc3 = this._keyStr.indexOf(input.charAt(i++));
        enc4 = this._keyStr.indexOf(input.charAt(i++));

        chr1 = (enc1 << 2) | (enc2 >> 4);
        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
        chr3 = ((enc3 & 3) << 6) | enc4;

        output = output + String.fromCharCode(chr1);

        if (enc3 != 64) {
            output = output + String.fromCharCode(chr2);
        }
        if (enc4 != 64) {
            output = output + String.fromCharCode(chr3);
        }

    }

    output = Base64._utf8_decode(output);

    return output;

},

// private method for UTF-8 encoding
_utf8_encode : function (string) {
    string = string.replace(/\r\n/g,"\n");
    var utftext = "";

    for (var n = 0; n < string.length; n++) {

        var c = string.charCodeAt(n);

        if (c < 128) {
            utftext += String.fromCharCode(c);
        }
        else if((c > 127) && (c < 2048)) {
            utftext += String.fromCharCode((c >> 6) | 192);
            utftext += String.fromCharCode((c & 63) | 128);
        }
        else {
            utftext += String.fromCharCode((c >> 12) | 224);
            utftext += String.fromCharCode(((c >> 6) & 63) | 128);
            utftext += String.fromCharCode((c & 63) | 128);
        }

    }

    return utftext;
},

// private method for UTF-8 decoding
_utf8_decode : function (utftext) {
    var string = "";
    var i = 0;
    var c = c1 = c2 = 0;

    while ( i < utftext.length ) {

        c = utftext.charCodeAt(i);

        if (c < 128) {
            string += String.fromCharCode(c);
            i++;
        }
        else if((c > 191) && (c < 224)) {
            c2 = utftext.charCodeAt(i+1);
            string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
            i += 2;
        }
        else {
            c2 = utftext.charCodeAt(i+1);
            c3 = utftext.charCodeAt(i+2);
            string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
            i += 3;
        }

    }

    return string;
}

}

module.exports = exports = Base64
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/global.js":[function(require,module,exports){
(function (process,global){
var g = typeof window !== 'undefined'
        ? window
        : typeof global !== 'undefined'
          ? global
          : false
  , hasLS = typeof localStorage !== 'undefined'
  , hasPR = typeof process !== 'undefined'

var G = module.exports = 
  { session: function(key, val){
      return getSet(g, key, val)
    }
  , env: function(key, val){
      if(hasLS)
        return getSet(localStorage, key, val, 'getItem', 'setItem')
      else if(hasPR)
        return getSet(process.env, key, val)
    }
  }

function getSet(thing, key, val, getter, setter){
  if(!thing)
    return

  if(val === void 0){
    if(getter)
      return thing[getter](key)
    else
      return thing[key]
  }else{
    if(setter){
      thing[setter](key, val)
      return val
    }else{
      return thing[key] = val
    }
  }
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":"/Users/youzi/dev/gaston/node_modules/browserify/node_modules/process/browser.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/hash.js":[function(require,module,exports){
//check this for more compression http://www.htmlgoodies.com/html5/client/optimizing-websockets-bandwidth.html#fbid=6QZx8napu20

/*
var crcTable
  , create = function () {
      crcTable = []
      for (var c, n = 0, k; n < 256; c = ++n) {
        for (k = 0; k < 8; k++, c = ((c & 1) ? ((0xEDB88320) ^ (c >>> 1)) : (c >>> 1)));
        crcTable[n] = c
      }
      return crcTable
    }

exports = module.exports = function (str) {
  for (var tab = crcTable || create(), crc = -1, i = 0, l = str.length; i < l; i++) {
    crc = (crc >>> 8) ^ tab[(crc ^ str.charCodeAt(i)) & 0xFF]
  }
  return exports.encode(((crc ^ (-1)) >>> 0))
}


*/

exports = module.exports = function(key, seed) {
  var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i;
  seed = 1

  remainder = key.length & 3; // key.length % 4
  bytes = key.length - remainder;
  h1 = seed;
  c1 = 0xcc9e2d51;
  c2 = 0x1b873593;
  i = 0;
  
  while (i < bytes) {
      k1 = 
        ((key.charCodeAt(i) & 0xff)) |
        ((key.charCodeAt(++i) & 0xff) << 8) |
        ((key.charCodeAt(++i) & 0xff) << 16) |
        ((key.charCodeAt(++i) & 0xff) << 24);
    ++i;
    
    k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
    k1 = (k1 << 15) | (k1 >>> 17);
    k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

    h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
    h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
    h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
  }
  
  k1 = 0;
  
  switch (remainder) {
    case 3: k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
    case 2: k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
    case 1: k1 ^= (key.charCodeAt(i) & 0xff);
    
    k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
    k1 = (k1 << 15) | (k1 >>> 17);
    k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= k1;
  }
  
  h1 ^= key.length;

  h1 ^= h1 >>> 16;
  h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
  h1 ^= h1 >>> 13;
  h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
  h1 ^= h1 >>> 16;

  return (h1 >>> 0).toString(36)
}

// exports = module.exports = function( str )
// {
//   var FNV1_32A_INIT = 0x811c9dc5;
//   var hval = FNV1_32A_INIT;
//   for ( var i = 0; i < str.length; ++i )
//   {
//     hval ^= str.charCodeAt(i);
//     hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);
//   }
//   return hval >>> 0;
// }

/**
 * Encode to base 62 (url save)
*/
exports.encode = function c (a, b) {
  b = b || ""
  return ~~ a 
       ? c(a / 62, String.fromCharCode(((a %= 62) > 9 
          ? a > 35 ? 29 : 87 
          : 48) + a) + b) 
       : b
}

/**
 * decode base 62
*/
exports.decode = function (a, b, c, d) {
  for (b = c = 0; d = a.charCodeAt(c++); b = b * 62 + d - [ , 48, 29, 87][d >> 5]);
  return b
}


// exports.decode64

},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/id.js":[function(require,module,exports){
module.exports = function id(pre, level){
  var r = rnd()
  if(level) 
    while(level--){
      r += rnd()
    }
  return pre ? pre + r : r
}

function rnd(){
  return Number(String(Math.random()).slice(2)).toString(36)
}
},{}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
require('./object') //these things add extra methods to util for readability in a seperate module
require('./prop')


exports.isNode = (typeof window === 'undefined') ? true : false

/**
 * Add is similar to .push it returns the array instead of length
 * Can be extended to support more types e.g. add an object to another
 * @method add
 * @param  {Array}  obj Target
 * @param  {Object} add Object to add
 * @deprecated
 */
exports.add = function (obj, add) {
  if (add) obj.push.apply(obj, add);
  return obj
}

/**
 * Finds items in an array
 * @method checkArray
 * @param  {Object|Array}                 list  Defines the list where you want to search through, only uses .length field
 * @param  {Object}                       val   Defines the value you want to search for
 * @param  {Boolean|String|Number}        [index] When index is true return the index instead of true or false, when index and index !== true index is used as a field in objects in the array
 * @param  {String}                       [field] When field return field instead of index or true
 * @return {*}
 */
exports.checkArray = function (list, val, index, field) {
  var arr = index instanceof Array
  if(!list) return false
  for (var i = 0, l = list.length, t; i < l; i++) {
    t = list[i]
    if (index !== void 0) {
      if (index === true) {
        if (t === val) return i
      } else if (arr ? exports.path(t,index)===val : t[index] === val) return field ? t : i
    } else {
      if (t === val) return true
    }
  }
  return false
}

/**
 * Pass arguments (arguments) and return a new array, when index return a new array sliced from index
 * @method arg
 * @param  {Arguments} args        Arguments
 * @param  {Number}    [index = 0] When index return a new array sliced from index
 * @return {Array}
 */
exports.arg = function (args, index) {
  return Array.prototype.slice.call(args, !index ? 0 : index)
}

/**
 * Check if obj is empty exclude field names passed to list
 * @method empty
 * @param  {Object}       obj  Object
 * @param  {Object|Array} list Takes any object with .length
 * @return {Boolean}           True/false
 */
exports.empty = function (obj, list) {
  for (var i in obj) {
    if (!list || !this.checkArray(list, i)) return false
  }
  return true
}

exports.inject = require('./inject')

},{"./inject":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/inject.js","./object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/object.js","./prop":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/prop.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/inject.js":[function(require,module,exports){

var V = require('../')
  , util = require('./')

var $TEST
if(!util.isNode) {
  $TEST = window.$TEST
}



module.exports = exports = function(extend) {

  var args = arguments

  if(args[0]&&args[0].$TEST) {
     $TEST = window.$TEST = true
  }

  if( (typeof this === 'function') || (V.Base && (this instanceof V.Base)) || typeof this === 'object') {
    if((V.Base 
        && (this===V.Base 
        || (this.prototype instanceof V.Base)
        || (this instanceof V.Base))
      )) { 
      args = util.arg(args)
      args.unshift(this)
      extend = this
    } else {
      return inject.apply(this,args)
    }
  }
  for(var i = 1; i < args.length; i++) {
   makeExtend(extend, args[i])
  }
  return extend
}

function makeExtend(extend, module) {
  if($TEST) void(0)
  if(module.extend) {
    if($TEST) void(0)
     module.extend(extend)
  } else if(module instanceof Array) {
    var arr = module.concat()
      , mod = arr[0]
    arr[0] = extend
     if($TEST) void(0)
    mod.extend.apply(mod,arr)
  } 
} 

function inject() {
  if($TEST) void(0)
  //do special stuff voor blacklist
  // Custom.prototype = new this() //lighter
  var Custom
    , extendResidue = []
    , Aspects = [this]

  for (var i = 0, Aspect, args = arguments, len = args.length; i < len; i++) {
    
    Aspect = args[i]

    if(typeof Aspect === 'function') {
      if(!Custom) {
        Custom = function() {
          for (var j = 0, len = Aspects.length; j < len;  j++) {
            Aspects[j].apply(this, arguments)
          }
        }
        inherits( Custom, this )
      }
      Aspects.push(Aspect)
      for (var method$ in Aspect.prototype) if ({}.hasOwnProperty.call(Aspect.prototype, method$)) {
        if (method$ === 'constructor') continue
        Custom.prototype[method$] = Aspect.prototype[method$]
      }
    } else {
      if($TEST) void(0)
      if(Custom) {
              if($TEST) void(0)

       makeExtend(Custom , Aspect)
      } else {
        // if($TEST) console.log('8')
        extendResidue.push(Aspect)
      }
    }
  }

  if(!Custom) Custom = this
  
  for(var j in extendResidue) {
    // console.log('8.'+j, extendResidue[j], Custom)
    makeExtend(Custom,extendResidue[j])
  }

  return Custom
}

function inherits(ctor, superCtor) {
  ctor.super_ = superCtor
  ctor.prototype = Object.create
    ( superCtor.prototype
    , { constructor: 
        { value: ctor
        , enumerable: false
        , writable: true
        , configurable: true
        }
      }
    )
}

/*
 Dit moet worden geadd voor V.Objects
/*
  object.new = function(params, constructor) {
  var vObj = function(val, hook, parent) {
      if (parent) this._parent = parent
      if (hook && this._hook) this._hook(val, hook)
      if (this._onConstruct) this._onConstruct(val, hook)
      if (val !== void 0) this.val = val
      // console.log(constructor)
      if(constructor) constructor.apply(this,arguments)  
    },
    proto = vObj.prototype = new this()
  vObj.new = object.new
  util.define(vObj, '_blacklist', proto._blacklist.concat())
  _params.call(vObj, params, ['mixed', 'merge'])
  util.define(vObj, '_class', vObj)
  return vObj
}

veel dingen werken als extension niet als losse class -- 

*/


},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/object.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var util = module.exports = exports = require('./')
  , vigour = require('../') //only here to be able to use util without vigour.Object maybe refactor this away?
  , DOT = '.'

/**
 * lookup
 * polyfill if __lookupSetter__ does not exist;
 */
exports.lookup = Object.__lookupSetter__ || function (i) {
  var t = this
    , a
  while (t) {
    a = Object.getOwnPropertyDescriptor(t, i)
    if (a && a.set) return true
    t = Object.getPrototypeOf(t)
  }
  return false
}

/**
 * Used to set a val to an field on a object, whether it is a vigour.Object or a regular object
 * @method set
 * @param {Object} obj   Defines target Object
 * @param {String} field Target field
 * @param {*}      val   Value to set
 * @todo                 Move this function to a different module (e.g. 'convenience' module)
 */
exports.set = function (obj, field, val, vobj, stamp, noupdate) {
  return (vigour.Object && (obj instanceof vigour.Object))
    ? obj.set(field, val, vobj, stamp, noupdate)
    : (obj[field] = val)
}


/**
 * Returns object on the end of a defined path
 * @method path
 * @example
 * // returns obj.a.b.c
 * var obj = { a: { b: { c: 1 }}}
 * V.util.object.path(obj,['a','b','c'])
 * @param  {Object}    obj            Object to search
 * @param  {Array}     path           Array of fields in path
 * @param  {*}         [val]          When defined, val will be set on endpoint of path if not already defined
 * @param  {Boolean}   [overwrite]    If true, val WILL overwrite existing value on endpoint of path when already defined
 * @param  {Function}  [writeHandler] Callback on write
 * @param  {Boolean}   [noupdate]     When true, updates will be skipped on write
 * @param  {Number}    [i = 0]        Starting point for searching through path
 * @return {*}                        Object on the end of a defined path
 */

exports.path = function ( obj, path, val, overwrite, writeHandler, vobj, stamp, noupdate, self, uid, i ) {
  if (!i) i = 0

  var field = path[i]
    , result
    , c
    , target = (!self && obj && obj.__t === 4) ? obj.from[field] : obj && obj[field]
    , l = i < path.length - 1

  // if(field === void 0) {
  //   throw new Error('path must not contain undefined')
  // }

  if (l && !(target instanceof Object)) target = void 0

  if ((val !== void 0) && (target === void 0 || (!l && overwrite))) {
    c = true
    exports.set(obj, field, l ? {} : val, l ? false : vobj, stamp, noupdate)
    target = obj[field]
  }

  if (l) {
    result = target
      ? this.path(target, path, val, overwrite, writeHandler, vobj, stamp, noupdate, self, uid, ++i)
      : target
  } else {
    result = (!self && target && target.__t === 4) ? target.from : target;
    if (c && writeHandler) writeHandler(result)
  }

  return result
}

/**
 * Adds path using 'dot-notation'
 * @method dotField
 * @example
 * // returns blur:{d:{a:{s:{}}}}
 * var blur = {};
 * V.util.object.dotField(blur,'d.a.s');
 * @param  {Object} obj   Object where field will be added
 * @param  {String} field String using 'dot-notation'
 * @return {Object}       Returns field
 */
exports.dotField = function (obj, field) {
  if (~field.indexOf(DOT)) {
    var path = field.split(DOT)
      , first = path.shift()
      , val = {}
    this.path(val, path, obj[field])
    delete obj[field]
    obj[first] = val
    field = first
  }
  return field
}

/**
 * Checks if two lists contain identical content
 * @method compareArrays
 * @param  {Array|Object} a         Takes any object with .length
 * @param  {Array|Object} b         Takes any object
 * @param  {Boolean}      keys      use Object.keys for b
 * @return {Boolean}      True/false
 * @todo                  Maybe change title => compareLists
 */
exports.compareArrays = function(a, b, keys) {
  var bl = keys ? Object.keys(b).length : b.length
  if (a.length !== bl) return false
  for (var i = a.length - 1; i >= 0; i--) {
    if (a[i] != b[i]) return false
  }
  return true
}

/**
 * Gets object from specified path. When path is a string checks for 'dotnotation'.
 * @method get
 * @example
 * // returns 'foo'
 * var a = {b:{c:'foo'}}
 * V.util.object.get(a,'b.c')
 * @param  {Object}       obj  Defines object or V.Value
 * @param  {String|Array} path Defines field {string} or path {array|'dot-notation'}
 * @return {*}                 obj[path]|nested object/value
 */
exports.get = function (obj, path, self) {
  //TODO: make one interface for get

  if (!obj || !path) return
  if (!self && obj.__t === 4 && !obj._filter) obj = obj.from
  if (!(path instanceof Array)) {
    if (~path.indexOf(DOT)) {
      path = path.split(DOT)
    } else {
      return (!self && obj[path] && obj[path].from) || obj[path]
    }
  }
  //self is too far away in the arguments
  return this.path(obj, path, void 0, false, false, false, false, false, self)
}

/**
 * Returns true if an object is an instance of an object and not a function , V.Object or V.Base
 * @method isObj
 * @param  {Object}  obj Object to inspect
 * @return {Boolean}     True/False
 */
exports.isObj = function (obj) {
  return (obj instanceof Object
    && typeof obj !== 'function'
    && (!vigour.Object || !(obj instanceof vigour.Object))
    && (!vigour.Base || !(obj instanceof vigour.Base)))
}

/**
 * Creates new object with the same value , takes custom objects into account (new obj.constructor())
 * @method clone
 * @param  {Object} obj Object to clone
 * @return {Object}     Returns clone
 */
exports.clone = function (obj, exclude, shallow) {
  if (this.isObj(obj)) {
    var copy = new obj.constructor()
    for (var i in obj) {
      if(!exclude || !exclude[i])
        copy[i] = !shallow
          ? this.clone(obj[i], exclude)
          : obj[i]
    }
    return copy
  }
  return obj
};

/**
 * Merges object b into object a and returns object a
 * @method merge
 * @param  {Object} a Object a
 * @param  {Object} b Object b
 * @return {Object}   Object a
 */
exports.merge = function (a, b, norefs, overwrite) {
  for (var i in b) {
    var aisobj = util.isObj(a[i])
      , bisobj = util.isObj(b[i])

    if (aisobj && bisobj) {
      util.merge(a[i], b[i], norefs, overwrite)
    } else if(!norefs || !bisobj){
      if( overwrite === void 0
       || !(i in a)
       || typeof overwrite === 'function' && overwrite(a[i], b[i])
        ){
        a[i] = b[i]
      }

    }else{
      a[i] = b[i] instanceof Array ? [] : {}
      util.merge(a[i], b[i], norefs, overwrite)
    }
  }
  return a
}

// exports.resolve = function(a, b, bFrom, j) {
//   var same = true;
//   if(b instanceof Object) {
//     for(var i in b) {
//       if(a[i]!==void 0) {
//         if(exports.resolve(a[i],b[i],bFrom ? bFrom[i] : b[i],i)) {
//           if(bFrom) {
//             delete bFrom[i]
//           }
//         } else {
//           same = false
//         }
//       } else {
//         same = false
//       }
//     }
//     if(same) {
//       if(!(bFrom&&j!==void 0)) return true
//       delete bFrom[j]
//     }
//     return same;
//   } else {
//     if(a==b) {
//       if(bFrom&&j!==void 0) {
//         delete bFrom[j]
//       }
//       return true
//     }
//   }
// }

exports.resolve = function(a, b, bFrom, j) {
  // console.log('lolresolve\n',bFrom)
  var same = true;
  if(b instanceof Object) {
    for(var i in b) {
      if(a[i]!==void 0) {
        if(exports.resolve(a[i],b[i],(bFrom!==void 0 && bFrom!==null) ? bFrom[i] : b[i],i)) {
          if(bFrom!==void 0 && bFrom!==null) {
            if(bFrom[i]===null) {
              same = false
            } else {
              delete bFrom[i]
            }
          }
        } else {
          same = false
        }
      } else {
        same = false
      }
    }
    if(same) {
      if(!(bFrom&&j!==void 0)) return true
      delete bFrom[j]
    }
    return same;
  } else {
    if(a==b) {
      if(bFrom&&j!==void 0) {
        delete bFrom[j]
      }
      return true
    }
  }
}

/**
 * Adds value to array if it is not contained in array, executes handler on encountering val in array
 * @method include
 * @param  {Object|Array}   obj       Takes any object with .length
 * @param  {*}              val       Value to add
 * @param  {Function}       [handler] Function to execute on encountering val in array
 * @param  {Boolean}        arr       Include elements of val separately rather than including val itself
 * @return {Boolean}                  True/false
 */
exports.include = function (obj, val, handler, arr) {

  if(arr && val instanceof Array) {
    var ret = false
    for(var i = 0 , len = val.length; i < len; i++) {
      ret = exports.include(obj, val[i], handler)
    }
    return ret
  }

  var i = 0
    , l = obj.length
    , field
    , check

  if (obj.__t === 1) {
    for (;i < l; i++) {
      field = check = obj[i]
      if (check.__t === 4) check = check.from
      if (check === val || check.val === val) {
        if (handler) handler(field)
        return false
      }
    }
    obj.push(val)
    return true
  } else if (obj instanceof Array) {
    for (;i < l; i++) {
      if (obj[i] === val) {
        return false
      }
    }
    obj.push(val)
    return true
  }
}

exports.changeType = function( obj ) {
  var result
  if(obj instanceof Array) {
    result = {}
    for(var i=0,len=obj.length;i<len;i++) {
      result[i]=obj[i]
    }
  } else {
    result = []
    for(var i in obj) {
      result.push(obj[i])
    }
  }
  return result
}

/**
 * Ensures a value is not or contains no V.Objects, only their "raw" versions
 * This needs to be unified with convert, or at least get a better name.
 * @method raw
 * @param  {*}   val   the value to be processed
 * @return {*}         the processed value
 */
exports.raw = function( val, rparams ) {
  if (val instanceof Object) {
    if (val instanceof vigour.Object) {
      return val.raw
    } else {
      var result
      if (val instanceof Array) {
        result = []
        for (var i = 0, l = val.length; i < l; i++) {
          result[i] = this.raw(val[i], rparams)
        }
      } else {
        result = {}
        for (var f in val) {
          result[f] = this.raw(val[f], rparams)
        }
      }
      return result
    }
  } else {
    return val
  }
}

//add level and stops for certain branches
exports.walk = function(obj, fn ) {
  for(var i in obj) {
    if(obj[i] instanceof Object) {
      if(!fn(i, obj[i], obj, true)) {
        if(exports.walk(obj[i], fn)) return true
      } else {
        return true
      }
    } else {
      if(fn(i, obj[i], obj)) {
        return true
      }
    }
  }
}

exports.checkParentFactory = function( parentField ) {
  return function(field, get, links, match) {
    if(get&&get!==true) {
      match = get
      get = false
    }
    var fields = field instanceof vigour.Object ? false : field,
      curr = this,
      found;
    while (curr) {
      found = fields === false ? curr === field : exports.get(curr, fields, !links);
      if (found) {
        if(match) {
          if(match === found || (found instanceof vigour.Object) && found.val === match) {
            return !get && fields ? curr : found;
          }
        } else {
          return !get && fields ? curr : found;
        }
      }
      curr = curr[parentField];
    }
  }
}

exports.disjoin = function disjoin(a, b, check) {
  // console.log('disjoin!')
  var fncheck = typeof check === 'function'
  
  a = getEndpoint(a)
  b = getEndpoint(b)

  a.each(function(){
    var item_a = this
    var item_a_from = item_a.from
    var remove
    b.each(function(){
      var item_b = this
      var item_b_from = item_b.from
      
      
      if(fncheck){
        remove = check(item_a_from, item_b_from)
      } else if(check === true){
        remove = item_a_from === item_b_from
      } else {
        // console.log('compare a', item_a_from.raw, 'to b', item_b_from.raw)
        // console.log('field', check)
        // console.log('a:', item_a_from[check].val)
        // console.log('b:', item_b_from[check].val)
        // console.log('same:', item_a_from[check].val === item_b_from[check].val)

        remove = item_a_from[check] && item_b_from[check] &&
          item_a_from[check].val === item_b_from[check].val
      }
      return remove
    })
    if(remove){
      // console.log('YES CHECK REMOVE')
      // TODO: 
      item_a.remove()
    }
  })

}

function getEndpoint(obj){
  while(obj && obj.__t === 4 && !obj._filter){
    obj = obj._val
  }
  return obj
}

},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/process.js":[function(require,module,exports){
//processes
var vObject = require('../object')

// console.log('init process!')

module.exports = {}

},{"../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/prop.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var util = module.exports = exports = require('./')
  , V = require('../')
/**
 * Setstores are used to avoid updates troughout prototype chains for changes of fields on objects
 * It uses two fields
 *   .__ to indicate own values for pieces of an object inherited trough the prototype chain
 *   ._ is the refence back to the objects as ste in the prototype
 * @constructor setstore
 */
exports.setstore = function() {
  if ( !this.__ ) this.__ = {}
}

//TODO: reconstruct value using pieces of objects in __

exports.getStore = function( name ) {
  return this.__ 
          ? ( this.__[name] !== void 0 
            ? this.__[name] 
            : this._[name]
            ) 
          : this._ && this._[name]
}

function extensions( extend, fn, base, args, extended ) {
    
  if(window.$TEST) {
    void(0)
  }

  if( !extend.extensions ) 
  {
    if(base) {
      extend.extensions = []
    } else {
      // console.log(extend)
      if(V.Object && extend instanceof V.Object ) {
        util.define( extend, 'extensions',[])
      } else {
        //gebruik deze extension stylo
        util.define( extend, 'extensions',{val:[], setClass:true} )
      }
    }
  }

  // console.log( 'EXTEND'.red, extend.extensions, base, fn, this, extended )

  if( util.checkArray( extend.extensions, this )===false ) 
  {

    // console.log( 'EXTEND -2'.red, this )

    if( !extended ) extend.extensions = [ this ].concat( extend.extensions ) 

      // console.log( 'EXTEND -3'.red, extend.extensions )
      //somethin weird!

    // console.log( 'EXTEND -3'.red, this, extend, extend.extensions.length )

    var myArgs = util.arg( args )
    if( base && !extended ) {
      myArgs[0] = base
    }
    if(window.$TEST) void(0)
    var ret = fn.apply( this, myArgs ) //this is the app, extend is the extension 
    if(window.$TEST, ret)
    return ret
  } else {
    if(window.$TEST) void(0)
  }

}

exports.extend = function() {


  var extendArray = util.arg( arguments )

  return function(extend) {

    if(window.$TEST) void(0)

    var base
      , proto

    if( typeof extend === 'function' ) 
    {
      if( V.Base && ( extend.prototype instanceof V.Base ) ) {
        base = extend.base
        proto = true
      } else {
        proto = extend.prototype
      }
    } else if( V.Base && ( extend instanceof V.Base ) ) 
    {
      proto = extend
    }

    for
    ( 
      var fn
        , ret
        , args = util.arg( arguments )
        , extendArr
        , xArg
        , i = 0
        , len = extendArray.length
        ; i < len
        ; i ++ 
    ) 
    {    
      if(extendArray[i] instanceof Array) 
      {
        extendArr = extendArray[i][0]
        xArg = util.arg(extendArray[i],1)
        xArg.unshift(extend)
      } else 
      {
        xArg = args
        extendArr = extendArray[i]
      }

      if(window.$TEST) {
        void(0)
      }

      ret = extensions.call 
      ( extendArr.extend ?  extendArr : this 
      , base || proto || extend
      , extendArr.extend ||  extendArr
      , base
      , xArg
      , extendArr.extend ? true : false 
      ) 
      || extend

    }
    return ret
  }

}

/**
 * Add is used as a shortcut method for Object.defineProperty and extends setstore functionality to normal prototypes
 * @method add
 * @param  {Object}          obj  When obj is a constructor it selects obj.prototype, when obj is a normal object this is used instead
 * @param  {String|Array}    name When name is a string it adds the name for the object, when name is a array do the same setting for each name
 * @param  {Object|Function} val  When val is an object , use this object for Object.defineProperty with default for enummerable:false, when object is empty adds {value:{},ennumerable:false}, when val is a function it automatically wraps a property definition object with {value: val , enummerable:false}, when val is not a function and not an object (boolean, string, number) adds special setstore value
 * @param  {Function}        [set]  Adds custom setters to a setstore object, when set is a string the add functions interprets the arguments as name : property definition pairs
 * @param  {Function}        [get]  Adds custom getters to a setstore object
 * @
 */
exports.define = function (obj, name, val, set, get, id) {
  if (typeof set === 'string') {
    var _args = util.arg(arguments)
    for (var i = 1, l = _args.length; i < l; i += 2) {
      exports.define(obj, _args[i], _args[i + 1])
    }
  } else {
    if (name instanceof Array) {
      for (var i = 0, l = name.length; i < l; i++) {
        exports.define(obj, name[i], val)
      }
    } else {
      if (typeof val === 'function' || val instanceof Array) {
        val = {
          enumerable: false,
          value: val,
          configurable: true
        }
      } else if (!val || ( !(val instanceof Object) || val.setClass  )) {

        if( val && val.setClass ) {
          val = val.val
        }

        var proto = obj.prototype || obj


        //

        //TODO: not a good solution -- has to redefine constantly ( too heavy )
        // if( proto !== obj.prototype && proto._ ) {
        //    //TODO: this can go completely wrong when you expect inheritance not to break when making a new class!
        //    if( proto.constructor.prototype._ === proto._ ) {
        //       var old = proto._
        //       proto._ = {}
        //       for(var key in old) {
        //         proto._[key] = old[key]
        //       }
        //    }
        // }
        
        //maybe make into a method
        if( id) {
          // console.log('DEFINE! DO IT'.red.inverse, name, id, proto)
          if (!proto.__) proto.__ = {}
          proto.__[name] = val
        } else {
          if (!proto._) proto._ = {}
          proto._[name] = val
        }



      

        //if proto is not a prototype (how to check?) then use __ perhaps?

        //moet hier niet altijd ze eiguh worden gemaakt?

       //default dit is eigenlijk het enige dat mis gaat

        var setter = function(val) {
              exports.setstore.call(this)
              //TODO: fix closure for val
              if (val || val === 0 || val === false) this.__[name] = val
            }
          , wset = function(val) {
              val = set.call(this, val);
              setter.call(this, val);
            }
          , getter = function() {
              return exports.getStore.call(this, name);
            }
          , wget = function() {
              var prop = getter.call(this);
              return get.call(this, prop);
            }

        val = {
          enumerable: false,
          configurable: true,
          get: get ? wget : getter,
          set: set ? wset : setter
        }

      } else if (!val.enumerable) {
        if (util.empty(val)) val.value = {}
        val.configurable = true
        val.enumerable = false
      }

      Object.defineProperty(obj.prototype || obj, name, val)

      // Object.defineProperty(obj.prototype || obj, name, val)
      //mayeb do both?
    }
  }
}
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/base.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var base = require('../base')
  , Value = require('./')
  , objectSet = require('../object').set
  , util = require('../util')
  // , raf = require('../browser/animation/raf')

exports.clonelist = [
  [ '_base', false ], '_caller', '_prop', '_name', '_skip'
]

function resolveListener( listener, val, prop, instance ) {
  if (listener) {
    if ( listener._bind === instance && listener.__t === 4 ) {
      // console.log('bind resolve'.red.bold, val )
      listener.val = val
    }
    else if (!listener._bind ) { 

      if( listener.__t === 4 && listener._val === prop )
      {
        // listener.val = 
        listener.val = val
        void(0)
      }
      else
      {
        // console.log('ultimate ugly!')
        val.addListener(listener) //dit fixed  
      }

      //TODO: implement this later
      // if( listener instanceof Array ) {
      //   var mark = listener[1]
      //   if( mark ) {
      //     if( mark === prop._base || mark === instance || instance instanceof mark._class ) {
      //       //TODO: propably need to check for inheritance ( mark instance of prop._base)
      //       // console.log('mark resolve'.green.inverse, listener)
      //       // val.addListener([ listener[0] , instance ], true)
      //     }
      //   }
      // }

      
      // val.addListener(_listeners[i])
    }
  }
}

// function resolveListener( ) {

// }

/**
 * V.value.base.type
 * Defines the base type used in V.Value
 * @type
 */
exports.type = {
  type: Value,
  /**
   * Defines what this type will do on creation.
   * @method create
   * @param  {*} val              Value
   * @param  {[type]}  [prop]     [description] //WORDT NIET GEBRUIKT
   * @param  {Object}  [settings] Settingobject
   * @param  {Boolean} [noupdate] When true, doesn't update the V.Value
   * @return {Object}             Returns the V.Value
   */
  create: function(val, prop, settings, noupdate) {
    var v = new Value()
    v._base = this
    v._caller = v._base
    v._prop = settings
    // console.log('set')
    objectSet.call(v, val, false, false, true)
    // console.log('done setting')
    if (this._class) this._class.prototype._[settings.name] = v
    if (settings.set) {
      if (!settings._vset) {
        settings._vset = function(stamp, from, remove, cval) {
          // var t = this
          // t.__s = true
          // if(!t._s) {
            // raf(function() {
              // console.log('IM HERE?')
              // t.__s = null
              settings.set.call(
                   this._caller
                || this._base
                || this, this, stamp, from, remove, cval
              )
            // })
          // }

        }
      }
      if (!noupdate) {
        // console.log('UPDATE creation')
        v._update(val)
      }
    }
    return v
  },
  /**
   * Defines what this type will do on set.
   * @method set
   * @param  {*}      val      Value
   * @param  {Object} prop     Properties
   * @param  {Object} settings Settingsobject
   * @return {*}               Returns value
   */
  set: function(val, prop, settings) {

    if(!prop) return
    // console.log('SET FUN!')
    prop._caller = this
    //deze bind zou alleen moeten werken voor als je iets op het exact goede momment changed!

    prop._bind = false
    if (this !== prop._base) {
      var _listeners = prop._listeners
        , _b = prop._base
        , i
        , _this = this

      util.setstore.call(this)
      exports.clonelist[0][1] = this //beetje dirty...

      //clone is always used to get rid of flags
      if (val !== void 0 && !val.clear) {
        val = prop.clone(val, false, exports.clonelist)
      } else {
        // if(prop._flag) {
        //   value.flags[prop._flag[0]].remove && value.flags[prop._flag[0]].remove.call(this,prop._flag)
        // }
        //listener on nested child on parent

         //--->  new width for this one
         // --->  hey a listener on me /w a bind on my instance!
         //  ----> add listener to me (listener on class prop)
         //   -----> hey lets reset this little guys width
         //    ------>  lets add Listener
         //     -------->  double listeners on this one
        var v = new Value()
        v._base = this
        v._prop = settings
        v._caller = this

        // clean FLAGS from node!
        if(val) delete val.clear
        v.val = val
        val = v
      }

      this.__[settings.name] = val

      if( this._class ) this._class.prototype._[settings.name] = val

      // for each field (only 1 level deep for now)
      prop.each
      ( 
        function(key) {
          // console.log('resolve', prop._prop.name, key)
           if( this._listeners ) {
            for (i =  this._listeners.length - 1; i >= 0; i--) {
              resolveListener( this._listeners[i], val[key], prop, _this )
            }
            //TODO: check if this is nessecary
            if(val[key].val !== this.val)
            {
              // console.log(val[key]) 
              // val[key]._update()
            }
          }
        }
      )

      if( _listeners ) {

        for (i = _listeners.length - 1; i >= 0; i--) {
          resolveListener( _listeners[i], val, prop, _this )
        }

      }

      val = null
      // console.log('UPDACE ----'.yellow)
      this[settings.name]._update(val)
    }

    return val
  },
  /**
   Defines what this type will do on get.
   * @method get
   * @param  {Object} prop     Properties
   * @param  {Object} settings Settingobject
   * @return {Object}          [description]
  */
  get: function(prop, settings) {
    // console.log('GETTING!', prop, settings.name)
    if (prop) prop._caller = this
    if (settings.get) return settings.get.call(this, prop)
    return prop
  }
}
},{"../base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js","../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/data.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var flags = module.exports = require('./'),
  util = require('../../util'),
  object = require('../../object'),
  ownModel = function(base) {
    if (!base.__ || !base.__.model) { //maybe a utility? use it at different spots like settings
      base.model = {};
      if (!base._.model) {
        base._dListen();
      }
    }
    return base.model;
  };
/**
 * data
 * data adds a reference to the data property of the current base class;
 * if there is not _base.model use data.base.extend(baseClass);
 * @flag
 */
flags.data = {
  useVal:true, //(reset???)
  set: function(val, stamp, reset) {

    var current = this.checkParent('_prop.name'),
      name = current._prop.name,
      base = current._base,
      model = ownModel(base);
    if (model.flags && model.flags[name]) {
      if (!(model.flags[name] instanceof Array)) {
        model.flags[name] = [model.flags[name]];
      }
      if (!util.checkArray(model.flags[name], this)) {
        model.flags[name].push(this);
      }
    } else {
      if (!base.model.flags) {
        base.model.flags = {};
      }
      base.model.flags[name] = this;
    }

    // console.log('LEZZ SET IT!', val, stamp, reset, current)

    var getData = function() {
      var data = this._d;
      if (data === void 0) {
        var parent = this;
        while (data === void 0 && parent) {

          // if(parent.model && (!parent.model.inherit || parent.model.inherit.val!==false)) {
          //   return data
          // }

          if (parent._d) {
            data = this._dSet(parent._d, true);
          } else {
            parent = parent.node.parentNode;
            if (parent) {
              parent = parent.base;
            }
          }
        }
      }
      return data;
    };
    if (val instanceof Object) {
      var v = val.val || val;
      this._val = function() {
        var data = getData.call(this);
        // console.log('---->',v,data)
        return data && v.call(this, data);
      };
      val = val.listen || true;
    } else {
      this._val = function() {
        var data = getData.call(this),
          ret;
        data = val === true ? data : util.get(data, val);
        if (data !== void 0) {
          ret = data.__t && !data._filter && data.val;
          if (!ret && ret !== 0 && ret !== '') { //weird
            ret = data;
          }
        } else {
          ret = '';
        }
        return ret;
      };
    }
    if(!this._flag) this._flag = {}

    // this.__lval = false
    // current._caller.setSetting({
    //   name: name,
    //   parent: function(parent) {
    //     console.log('!@#!@#!@#')
    //     this.updateData()
    //   }
    // });

    this._flag.data = ['data', this._val, val, name];
  },
  remove: function() {
    var current = this.checkParent('_prop.name'),
      model = ownModel(current._base),
      t = this;
    if (model && model.flags) {
      for (var i in model.flags) {
        if (i === current._prop.name) {
          var item = model.flags[i];
          if (item instanceof object || item.length === 1) {
            model.flags[i] = null;
            delete model.flags[i];
          } else {
            model.flags[i].splice(util.checkArray(item, t), 1);
          }
        }
      }
    }
    this._update() //pas hiermee op!
    // var t = this
    setTimeout(function() {
      //deze pas uitvoeren nadat alle klaar is! dit is dirty!
      t._update()
    },0)
  }
};
},{"../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var value = require('../'),
    base = require('../base'),
    flags = require('../../object/flags');
    
    base.clonelist.push(['_flag', true]); //true clone!
    flags.extend(value);
    module.exports = value.flags;
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../../object/flags":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/flags.js","../base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/base.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/parent.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var flags = module.exports = require('./')
  , value = require('../')
  , util = require('../../util')
  , vObject = require('../../object')


//todo add element signature in from so it can travel trough updates --- if parent (need less funky things)

/**
 * parent
 * parent makes it possible to add listeners to parent properties
 * using multiple parent properties in one property is still very wrong
 * @flag
 */
value.prototype._blacklist.push('_parentStore')

function baseReset(base,name) {
  if(base && base.node) {
    if(name==='x' || name ==='y') base.cleanCoordinates(name)
    if(base[name]) {
      base[name]._prop._vset.call(base[name])
    }
  }
}


// window.pcheck = 0

// window.pprops = {}

//base,vset,t,type,mparent,fbase, v, val, stamp, from, remove, added, oldval, true, firstSkip
function checker(vset, t, type, mparent, fbase, v, val, stamp, from, remove, added, oldval, first, firstSkip, p) {
  if(p&&(this.parent instanceof mparent) ||  (!p && this.parent===mparent) || firstSkip ) {

    // pcheck++

    var s
      , base = this._from.base.node && this._from.base
      , name = t._prop.name

    // if(!window.pprops[name]) window.pprops[name] = 0

    // window.pprops[name]++


    t._caller = this

    //gaurd voor changes -- if no change -- do nothing
    vset.call(t, stamp, from, remove, val)

    if(base&&base[name]&&base[name+'__p']!==stamp) {
      t._caller = base
      t._caller[name+'__p'] = stamp
      vset.call(t, stamp, from, remove, val)
      t._caller = this
      s=true
    }

    // console.log(this.node)
    for(var i in t._listeners) {
      if(t._listeners[i].pop && t._listeners[i][2]==='parent') {
        if(t._listeners[i][1]._lstamp===stamp) {
          t._listeners[i][1]._lstamp=null
        }
        t._listeners[i][0].call(t._listeners[i][1], type, this, base, v, val, stamp, from, remove, added, oldval, true)
      }
    }

    //reset this._from.base[t._prop.name]===t
    if(s) baseReset(base, name)

  }
}

function updateHandler(type,mparent,fbase,v, val, stamp, from, remove, added, oldval,firstSkip,inherit) {

  var t = this

  this._parentStore[0] = mparent

  this._update(val, from ? this.stamp() : stamp, from, remove, added, oldval, false, false, function() {
    var vset =  this.checkParent('_prop._vset', true)
      , base = this.checkParent('_base', true)
      , complexParent = true
      , p

    if( (mparent===base.parent && from)  ) {
      p = true
    }

    checker.call(base,vset,t,type,mparent,fbase, v, val, stamp, false, remove, added, oldval, true, firstSkip)

    base.eachInstance(function() {
     checker.call(this, vset, t,type, mparent,fbase, v, val, stamp, false, remove, added, oldval, false, p)
    }, t._prop.name)

    vObject.prototype._update.call(this, val, stamp, false, remove, added, oldval, function(l) {
      return l[2]==='parent'
    })

    if(!inherit && v._caller && mparent!==v._caller) {
      updateHandler.call(this,type,v._caller,fbase, v, val, stamp, false, remove, added, oldval,firstSkip,true)
    }

  })
}

function _parent(parent, noupdate, prop, flag, reset) {

  // console.log('_parent call'.cyan.inverse, flag)

  var _lparent = prop._parentStore[0]
    , pname = flag[2]   //flags.parent.val
    , pprop = parent[pname]
    , fbase = this._from.base
    , newP
    , baseSet

  if (!pprop) return

  // console.log('ADD LISTENER TO PARENT')

  pprop.addListener(
    [ updateHandler
    , prop
    , 'parent'
    , parent
    , this //fbase
  ], function(l,listeners,index) {

    if(l[3]!==parent &&  _lparent!==parent && l[4]!==fbase) {
      prop._parentStore[0] = parent
      l[4] = fbase
      newP = true //hoe deze smart afvangen?
    }
  }, false, true)

  // if(reset) {
  //   for(var i in pprop._listeners) {
  //     if(pprop._listeners[i].pop && pprop._listeners[i][1]===fbase[prop._prop.name]) {
  //       if(pprop!==parent._from.base[pname]) {
  //         pprop._listeners.splice(i,1)
  //         break;
  //       }
  //     }
  //   }
  // }

  if (newP || (!_lparent || (_lparent !== parent && _lparent[pname] !== pprop) ) ) {
    prop._parentStore[0] = parent
    if (!noupdate) {
      prop._caller = (baseSet = fbase.node && fbase || prop._base)
      prop._prop._vset.call(prop, prop)
      prop._caller = this
      updateHandler.call(prop,'parent',parent,fbase,pprop,false,vObject.stamp(),false,false,false,false,true,true)
      baseReset(baseSet,prop._prop.name)
    }
  }
}

function _init(val, flag, reset) {
  var parent = this.parent
  // console.log('try parent', flag, parent)
  if (parent) _parent.call(this, parent, true, val, flag, reset)
}

function _val(val) {
  var parent = this.parent || val.checkParent('_parentStore.0', true)
  //flags.parent.val
  if(parent && !val._flag.parent) {
    void(0)
    return
  }
  // console.log('---->',val._flag.parent[2])
  if (parent ) return parent[val._flag.parent[2]].val
}

flags.parent =
{ reset: true
, useVal: true
, set: function(val, stamp, reset) {
    var current = this.checkParent('_prop.name'),
      name = current._prop.name
    //flags.parent.val
    if(!this._flag) this._flag = {}

      //overwriting previous parent
      //
    // console.log('SET PARENT---->')
    this._flag.parent = ['parent', _val, val, this]
    if (!current._parentStore) current._parentStore = [false]

    // console.log('GOTS PARENTSTORE!', reset, current._parentStore, this._flag.parent)

    current._parentStore.push(this)
    //setParent settings
    // console.log('---> CREATE SETTING'.yellow.inverse)
    current._caller.setSetting({
      name: name,
      parent: function(parent) {

        // console.log('---> SET SETTING'.yellow.inverse)

        for (var store = this[name]._parentStore, i = store ? store.length - 1 : 0; i > 0; i--) {
          if(store[i]._flag.parent) {
            _parent.call(this, parent, false, this[name], store[i]._flag.parent)
          } else {
            void(0)
          }
        }
      }
    });
    //try to minimize val calulations
    this._val = _val
    this._skip = true
    //onInit (if it already has some parents)
    _init.call(current._base, current, this._flag.parent, reset)
    //reAttach listeners for instances
    current._base.eachInstance(_init, name, current, this._flag.parent)
  }
, remove: function(flag) {

    // console.log('REMOVE PARENT'.cyan.inverse)

    var current = this.checkParent('_prop.name'),
      base = current._base,
      listens = current._listens,
      name = current._prop.name,
      val = flag[2],  //flags.parent.val
      parentStore = current._parentStore,
      removelistener = function() {
        var parent = this.parent
        if (parent && parent[val]) {
          if (listens.length > 0) {
            if (util.checkArray(listens, parent[val])) {
              // console.log('REMOVE LISTENER!', parent[val], listens.length, parent[val]._listeners.length, parent[val]._listeners , current)


              //more specific only remove if val matches --- store function
              parent[val].removeListener( false, current )

              //mark = false


              // console.log('REMOVE LISTENER! -- result -- no update?', listens.length)

            }
          } else {
            return true
          }
        }
      }

    this._val = 0

    if (listens && !removelistener.call(base)) {
      base.eachInstance(removelistener, name)
    }

    // console.log('PARENTSTORE', parentStore, current)
    parentStore.splice(util.checkArray(parentStore, this, true), 1)

    if (parentStore.length === 1) {
      // console.log('---> REMOVE SETTING'.yellow.inverse, parentStore)
      base.removeSetting(name, 'parent') //ff corigeren voor andere parent settings!!! op andere fields
      //dit maakt het helemaal kapot!
      // console.warn('REMOVE PARENTSTORE!')
      current._parentStore = null
    }
  }
}
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/process.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

//TODO: flags on the basis of path ( similair to cases )

//TODO: make Value flags more injectable
var flags = module.exports = require( './' )
  , processes = require( '../../util/process' )
  , Value = require( '../' )
  , util = require( '../../util' )
  , ajax = require('../../browser/network/ajax')
  , vObject = require('../../object')

//TODO: maybe add promise

exports.create = function( flag, settings, Constructor, extendflags ) {

  if( !extendflags ) extendflags = flags
  if( !Constructor ) Constructor = Value

  var tempStore = '__temp'+flag+'__'
    , inProgress =  '__inprogress'+flag+'__'
    , origUpdate = Constructor.prototype._update
    , once = settings && settings.once
    , deferMethod = settings && settings.deferMethod
    , origSet
    , origRemove
    , deferflag = 
      { reset: true
      , set: function( val, stamp, reset ) {
          if( !this._flag ) this._flag = {}
          this._flag[flag] = [ flag, false, val, this ]
        }
      , remove: function() {
          var defer = this._flag && this._flag[flag]
            , vobj

          if( defer && defer[1] )
          {

            // if( deferMethod ) 
            // {
              // vobj = deferMethod.call( _this, arr, defer[2], _this[tempStore], origUpdate, Constructor )
            // }
            // if() {
              vobj = typeof defer[2] === 'string'
                   ? processes[defer[2]]
                   : typeof defer[2] !== 'function' && defer[2]
            // }

            if( vobj && vobj.removeListener )
            {
              vobj.removeListener( defer[1] )
            }
            else if( vobj && vobj !== true )
            {
              for( var vobj$ in vobj )
              {
                vobj.removeListener( vobj[vobj$] )
              }
            }
          }
        }
      }


  Constructor.prototype._blacklist.push
  ( tempStore
  , inProgress
  , '_history'
  // , '_initialised'
  )

  if( deferMethod ) {
    settings.deferMethod = null
  }

   if( once ) {
    settings.once = null
    Constructor.prototype._blacklist.push( once )
  }

  if( settings ) {
    for( var key in settings )
    {
      if( key === 'set' )
      {
        origSet = deferflag.set
        deferflag.set = function( val, stamp, reset ) {
          settings.set.call( this, origSet, arguments )
        }
      }
      else if( key === 'remove' )
      {
        origRemove = deferflag.remove
        deferflag.remove = function( val, stamp, reset ) {
          settings.remove.call( this, origRemove, arguments )
        }
      }
      else 
      {
        deferflag[key] = settings[key]
      }
    }
  }

  extendflags[flag] = deferflag

  //extend update
  util.define
  ( Constructor
  , '_update'
  , function( val, stamp ) {



      if( ( this._flag && this._flag[flag] ) && ( !once || !this[once] ) ) //&& !this._initialised 
      {

        // this.clearCache()

        // console.error('_updace', val, this._path)

        // console.error( '$EEEEE1', this._path)

        // console.log(this._path, val, stamp)
        var _this = this
          , defer = _this._flag && _this._flag[flag]
          , tempdefer = _this[tempStore]
          , add
          , arr
          , vobj
          , recur
          , fn

        if( !tempdefer )
        {
          _this[tempStore] = tempdefer = []
          add = true
        } else {
          //TODO: fix caching stamp, most efficient but may break things /w instances etc
          // console.log('stamp cahcing', this._path)

          if( stamp && tempdefer[0][1] !== stamp )
          {

            // tempdefer.push(util.arg( arguments ))
            // console.log('stamp cahcing pass' , this._path, tempdefer)
            // tempdefer[0][0] = val
            // tempdefer[0][1] = stamp
            var arg = util.arg(arguments)
            for(var i in arg) {
              tempdefer[0][i] = arg[i]
            }
          }


        // console.error('_updace 3', val, this._path)

         // if(this._name === '$test') console.log('stop its')
          return
        }

        arr = util.arg( arguments )

        // console.error('_updace 2', val, this._path)

        tempdefer.push( arr )

        if( add )
        {
          // if(this._name === '$test') console.error('do it 1')

          if( deferMethod ) 
          {
            vobj = deferMethod.call( _this, arr, defer[2], tempStore, origUpdate, Constructor, inProgress )
          }
          else 
          {
            vobj = typeof defer[2] === 'string'
               ? processes[defer[2]]
               : defer[2]
          }

          if( vobj )
          {

              // console.log('heyho2!!!!!', val,this._path)

          
            //TODO: replace with a standard function, lose the extra closure!
            recur = function() {

              if( once ) 
              {
                _this[once] = true
              }
              //dit ook kunnen meegeven
                // console.error('LETS TRY')

              //TODO: using a closure here may not be nessecary anymore, use another identifier
              for( var i = 0; i < tempdefer.length; i++ ) { //length needs to update
                // _this._caller = tempdefer[i].splice( tempdefer[i].length-1, 1 )
                // tempdefer[i][1] = this.stamp()
                // try{
                  // console.error('LETS TRY go go go',val, i, tempdefer[i])
                  // var stampx = tempdefer[i][1]
                    // , valx = tempdefer[i][0]

                  origUpdate.apply( _this, tempdefer[i] )  

                  // if( (tempdefer[i][1] && tempdefer[i][1]!==stampx) || (tempdefer[i][0] && tempdefer[i][0]!==valx) ) {
                  //   console.warn('defer new update within the loop now it fires! -- be carefull may break')
                  //   var ref = tempdefer[i]
                  //   // setTimeout( function() { 
                  //     _this.clearCache()
                  //     _this[tempStore] = null
                  //     _this[inProgress] = null
                  //     _this.clearReferencesCache()
                  //     // console.log('?????',ref)
                  //     _this._update.apply( _this, ref ) 
                  //   // } ,100) 
                  //   // alert('new update set within loop!')

                  // }
                // }catch(e){console.error('WA', e)}
                
              }

              //listener gets removed but order is different
              if( this.removeListener ) this.removeListener( recur )

              _this[tempStore] = null
            }

            if( typeof vobj === 'function' )
            {

              if( !_this[inProgress] )
              {
               
                fn = function( val ) {
                  
                  if( val!==true && _this[inProgress] ) {
                    _this[inProgress]()
                  }
                  _this[inProgress] = null
                  _this[tempStore] = null
                }

                _this[inProgress] = recur

                if( vobj.call( this, fn , arr, tempdefer ) === true )
                {
                  _this[tempStore] = null
                  _this[inProgress] = null
                }
                // else
                // {
                //   console.log( '?' )
                //   //TODO: check if this is the best way, (updating recur, or mayeb just use the same recur)
                //   _this._deferinprogress = recur
                // }

              }

            }
            else if( vobj === true )
            {

              if( this.val || this.val === 0 )
              {
                origUpdate.apply( _this, arr )
                _this[tempStore] = null
              }  
              else
              {
                void(0)
              }
            }
            else if( !vobj.addListener )
            {
              for( var vobj$ in vobj )
              {
                vobj[vobj$].addListener( recur )
              }
            }
            else
            {

              vobj.addListener( recur )
            }

            defer[1] = recur
          }
        }

      }
      else
      {
        // console.log( flag, once, 'should do orig update bitches!', arguments, this )
        origUpdate.apply( this, arguments )
      }

    }
  )

} 

//TODO: injectable
//TODO:_tempdefer hoeft niet altijd maak create -- update type flag
//always update method
// exports.create( 'force', 
// { deferMethod: function( args, vobj, tempStore, update ) {
//     var _this = this
//     //dit zit natuurlijk dieper!
//     _this._skip = true //maybe check if it rly gets reset?
//     _this._ignoreValue = true
//     _this.clearCache()
//     _this[ tempStore ] = null
//     update.apply( _this, args )
//   }  
// })
//deze moet nog wat dieper

// exports.create( 'history', 
// { deferMethod: function( args, vobj, tempStore, update, Constructor ) {
//     //vobj option voor flag
//     if(!this._history) this._history = []

//     this._history.unshift( args )
//     this[tempStore] = null //total control! (old including arguments)

//     //allright that works this.clearCache() //cache dingen adden
//     update.apply( this, args )
//   }
// })

// exports.create( '$type', 
// { deferMethod: function( args, vobj, tempStore, update ) {
//     var _this = this
//       , haveToUpdate

//     //arrays etc
//     _this.clearCache()

//     if( vobj === true )
//     {
//       if( _this.val ) haveToUpdate = true
//     }
//     else if( vobj === 'string' )
//     {
//       if( typeof _this.val === 'string' ) haveToUpdate = true
//     }
//     else if( vobj === 'number' )
//     {
//       if( typeof _this.val === 'number' ) haveToUpdate = true
//     }
//     else if( typeof vobj === 'function' )
//     {
//       if( vobj.apply( _this, args ) ) haveToUpdate = true
//     }

//     if( haveToUpdate ) {
//       _this[tempStore] = null
//       update.apply( _this, args )
//     }
//   }  
// })

exports.create( '$bubble', { 
  deferMethod: function( args, vobj, tempStore, update ) {
    var _this = this
    var doUpdate
    var references
    _this[tempStore] = null

    if( vobj ) {
      // console.log('deep check') 

      if(references = vobj.references) {

        if(references instanceof Object) {
          if(references.$lte 
            && _this.referenceLevel(_this._updateOrigin) <= references.$lte 
          ) {
            doUpdate = true
          }
        } else if(references > -1) {
          //also maximum for example
          // console.error(_this._path, _this.referenceLevel(_this._updateOrigin), 'uOriginPath', _this._updateOrigin._path, '._val',_this._val._path,  'cloud', !!_this._val.cloud)
          if( _this.referenceLevel(_this._updateOrigin) === references ) {
            doUpdate = true
          } 
        } else if(references === true) {
          //only if refference
          if(_this.referenceLevel(_this._updateOrigin)!==false) {
            doUpdate = true
          } 
        
        }

      } else if( vobj && vobj.self === true ){

          if( args[2] === void 0 || this._val === args[0] || !args[0] && this._updateOrigin===this) {
            doUpdate = true
          }
        }
        
        if(doUpdate) {  
          update.apply(_this, args)
        } else {
          _this.clearReferencesCache()
        }

      } else {
        update.apply(_this, args)
      }

   
  }  
})

exports.create( 'defer' )

//TODO: vObj flag ( accessable trough object[flag] )

Value.operators.responseData = function( val, operator ) {
  return operator===false ? val : operator
}

//vobj parser!

exports.create( 'ajax', 
{ remove: function( remove, args ) {
    //TODO: ajax call stop
    remove.apply( this, args )
  }
, set:function( set, args) {
//     console.log('set ajax defer')
    if( ! this.loading ) {
      //name, val, vobj, stamp, noupdate, from
      this.set( 'loading', false, false, false, true )
    }
    set.apply( this, args )
  }
, deferMethod: function( args, vobj, tempStore, update, Constructor ) {
    var _this = this  

    return vobj && function( update, args ) {

      var origu = update

      update = function( type, kill ) {
        _this.clearCache()
        _this._skip = true
        _this._ignoreValue = true
        if( type ) {
          args[0] = type
          if(! ( _this._val instanceof vObject ) ) {
            _this.val = type
          } 
        }
        if( _this.loading ) _this.loading.val = false
        origu( kill )
        _this._ignoreValue = null
      }

      if( typeof vobj === 'object' )
      {
        var params = vobj
        vobj = {}
        for( var key in params ) {
          if( key === 'defer' ) {
            vobj[key] = params[key]
          } else {
            if(!vobj[key]) {
              if( key !== 'complete' && key !== 'error' && typeof params[key] === 'function' ) {
                vobj[ key ] = params[ key ].call( _this, vobj, args[0], args )
                if( !vobj[key] ) {
                  return true
                }
              } else {
                vobj[key] = params[key]
              }

              if( vobj[key] instanceof vObject ) {
                vobj[key] = vobj[key].val //custom get or raw
              } 
            }
          }
        }
      }

      if( typeof vobj === 'function' ) 
      {
        vobj = vobj.call( _this, vobj, args[0], args )
        if(!vobj) return true
      }

      if( typeof vobj === 'string' ) 
      {
        vobj = { url: vobj }
      }

      if( vobj.url instanceof vObject ) {
        vobj.url = vobj.url.val
      }

      if( !vobj || !( vobj.url || vobj.api ) ) 
      {
        return true
      }

      var complete = vobj.complete
        , error = vobj.error

      vobj.complete = function( data ) {
        if( vobj.defer ) 
        {
          vobj.defer.call( _this, update, args, null, data, vobj )
        }
        else
        {
          if(!_this.responseData) {
            _this.set( 'responseData', data )
          }
          else {
            _this.responseData.merge( data )
          }
          ;complete && complete( data )
          update( 'success' )
        }
      }

      vobj.error = function( err ) {
        if( vobj.defer ) 
        {
          vobj.defer.call( _this, update, args, err, vobj )
        }
        else
        {
          if( _this.responseData )
          { 
            _this.responseData.each( function( key ) {
              if( !Constructor.operators[key] && !Constructor.flags[key] )
              {
                this.remove()
              }
            })
          }
          _this.set( 'responseData' , void 0 )
          if( error ) error( data )
          update( 'error' )
        }
      }

      if( _this.loading ) {
        //TODO:correct responses managemet -- pretty easy todo
        _this.loading.val = true
      }

      ajax( vobj ) //TODO: let it return a promise
    }  
  }
})

//temp args 

//TODO: dit later vervangen met local flags (api)
//TODO: unify ajax hiermee voor oncsitent error handeling -- of extension op ajax
exports.create( 'apiDefer', 
{ remove: function( remove, args ) {
    //TODO: ajax call stop
    remove.apply( this, args )
  }
, set:function( set, args) {
    if(! this.loading ) {
      this.set( 'loading', false, false, false, true )
    }
    set.apply( this, args )
  }
, deferMethod: function( args, vobj, tempStore, update, Constructor, inProgress ) {
    var _this = this  
   
    return vobj && function( update, args ) {

      if( !args[0] || args[0].apiDefer ) return true

      var wrappedUpdate = function( val, kill ) {

        // console.error('DO DO DO', val, _this, tempStore, _this[tempStore])

        // _this[tempStore] = null
           
        // _this[inProgress] = null


        _this.loading.val = false
        if( val && val!==true ) 
        {
          _this.val = args[0] = val
          try {
            update( val ) //val -- val
          } catch( err ) {
            // console.error( 'DEEPER ERROR IN API DEFER , SOMETHING WRONG /w this API', val )
            //best example is facebook login true and gone but only weh the .loading is there
            //most be a very deep issues i geuss... hard to recreate 
            _this.type = err

            //this is wrong misses _this call and other args
            update( 'error' )
          }

          _this.clearCache()
          _this._val = false
        }
        else 
        {
          //this is wrong misses _this call and other args
          update( val )
        }
      }
      
      _this.loading.val = true
      var api = _this.checkParent( 'api', true )

      if( api && api.val !== true ) 
      {

        api.once(function( val ) {
          if( val === 'error' ) 
          {
            _this.clearCache() //hier ff een functie voor maken!
            _this.val = args[0] = 'error'
            _this.type = this.type || 'api'
            _this.loading.val = false
            wrappedUpdate()
          }
          else if( val === true )
          {
            vobj.call( _this, wrappedUpdate, args )
          }
        })
        api.val = true
      } 
      else
      {
        vobj.call( _this, wrappedUpdate, args )
      }
    }
  }
})

exports.create( 'init', 
{ set: function( set, args ) {
    if( !this.initialised )
    {
      set.apply( this, args ) //niet nodig!
    }
  }
, remove: function( remove, args ) {
    remove.apply( this, args )
    this.initialised = null
  }
, once: 'initialised'
})

module.exports = exports

},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js","../../browser/network/ajax":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/network/ajax.js","../../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","../../util/process":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/process.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/self.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var flags = module.exports = require('./');

/**
 * self
 * @flag
 */
flags.self = {
  reset: true,
  useVal:true,
  set: function(val, stamp, reset) {
    var current = this.checkParent('_prop.name')
    if (current._base && current._base[val]) {
      current._base[val].addListener(this)
      this._val = function() {
        return this[val] && this[val].val
      }
      if(!this._flag)  this._flag = {}
      this._flag.self = ['self', this._val, val, this]
    }
  }
};

},{"./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/util.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

var flags = module.exports = require('./')
/**
 * listen
 * adds listeners to a V.Value
 * @property
 **/
flags.listen = {
  reset:true,
  set: function(val, stamp, reset) {
    if(!val)
    {
      void(0)
//       debugger
      return
    }
    if(!this._flag) this._flag = {}
    //eventueel mergen!
      
    // console.log('listen'.cyan.inverse, reset, val)
    //if reset make sure its resetted correctly!
    this._flag.listen = ['listen', false, val, this ] 
    if (val instanceof Array) {
      for (var i = val.length - 1; i >= 0; val[i--].addListener(this));
    } else {
      //ok
      var _this = this
      // val.addListener(function() {
      //   console.log('TROUGH LISTEN!!!!'.magenta.inverse, val._path)
      //   // _this._update.apply(_this, arguments)
      // }) 
      val.addListener(this) //dit moet beter (remove listener if possible)
    }
  },
  remove:function() {
    if(this._flag&&this._flag.listen) {
      var val = this._flag.listen[2]
      if (val instanceof Array) {
        for (var i = val.length - 1; i >= 0; val[i--].removeListener(this));
      } else {
        val.removeListener(this) //dit moet beter (remove listener if possible)
      }
    }
  }
}

},{"./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/flags/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */
var object = require( '../object' )
  , util = require( '../util' )
  , vigour = require( '../' )

/**
 * vigour.Value
 * v values are optimized for use in combination /w instances of vigourBase, have operators and support method values
 * @Class
 */
module.exports = exports = vigour.Value = object.new(
{ mixed: true
, merge: true
})

//parent problems

var _getOperator = function( val, force, i, t, bind, operators ) {
  var f = t[i]._get(bind, force, val);
  if (f !== void 0 && f !== null) {
    val = operators[i](val || ((typeof f === 'string') ? '' : 0), f);
  }
  return val;
};

exports.prototype._blacklist.push('_lstamp', '_clearCache', '_lval', '__lval','___lval', '_base', '_caller', '_bind', '_prop', '_instances', '_skip', '_overwrite')
//_caller stamp for get for lvals (last values)
util.define(exports,
  'clearCache', function() {
    this.___lval = null
    this.__lval = null
    this._lval = null 
  },
  'clearReferencesCache', function() {
    from = this._val
    while(from) {
      if(from.clearCache) from.clearCache()
      if(from && from._val) {
        from = from._val
      } else {
        from = null
      }
    }
  },
  'ignoreCache', { get:function() {
      var t = this
      while(t) {
        // console.log('hoe zit het??',t )
        if( t._prop && t._prop.cache === false ) return true
        t = t._parent
      } 
    } 
  },
  /**
   * Used to get .val which calculates a constructed value
   * _bind is very important binds listeners to specific instances
   * @method _get
   * @param  {[type]} bind  [description]
   * @param  {[type]} force [description]
   * @return {[type]}       [description]
   */
   '_get', function(bind, force, currentVal) {

    if(this._clearCache) {
      this.clearCache()
    }

    // console.log('_get',this._name, this._val,this);
    if (this._overwrite) {
      return this._overwrite;
    }
    if (!this._lval && this._lval !== 0 || force) {
      var val = this._val,
        nolval,
        operators = this.operators;

      if (val instanceof object) {
        val = val._get(this._bind || bind, force, currentVal);
      } else if (typeof val === 'function') {

        // console.log('RIGHT HERE', currentVal)
        var a = this;
        if (!bind) {
          while (a._parent && !a._caller) {
            a = a._parent;
          }
        }
        val = val.call(bind || a._caller || a._base || this, this, currentVal); //if currentval else something else;
        nolval = true;
        //for functions you need to clear _lval since you never know if there is something in the function updated
      }
      if (operators) {
        if (this.__t === 1 && operators[this._name]) { 
          //operator is an array
          val = 0; //string
          for (var j = 0, l = this.length; j < l; j++) {
            if (this[j]) {
              vj = this[j]._get(bind, false, (currentVal || 0) + val);
              if (!vj) {
                vj = 0; //string
              }
              if (typeof vj === 'string' && val === 0) {
                val = '';
              }
              val += vj; //only add no operator stuff
              if (!this[j]._lval) {
                nolval = true;
              }
            }
          }
        } else {
          //also add before
          var ordered;
          for (var i in this) {
            if (operators[i]) {
              if (!operators[i].order) {
                if (!force && this[i]._lstamp !== this._lstamp && this[i].__t === 1) {
                  force = true;
                }
                val = _getOperator(val, force, i, this, bind, operators);
                if (!nolval && !this[i]._lval) {
                  nolval = true;
                }
              } else {
                if (ordered) {
                  if (!ordered.pop) {
                    ordered = [ordered];
                  }
                  var o = operators[i].order,
                    ol = ordered.length - 1;
                  for (var h = 0; h !== true && h <= ol; h++) {
                    if (h === ol) {
                      if (o < operators[ordered[h]].order) {
                        var a = ordered[h];
                        ordered[ol] = i;
                        ordered.push(a);
                      } else {
                        ordered.push(i);
                      }
                      h = true;
                    } else if (h === ol && o > operators[ordered[h]].order) {
                      ordered.push(i);
                      h = true;
                    }
                  }
                } else {
                  ordered = i;
                }
              }
            }
          }
          //shorter
          if (ordered) {
            // console.log(ordered);
            var x;
            i = ordered.pop ? (x = 1) && ordered[0] : ordered;
            while (i && this[i]) {
              if (!force && this[i]._lstamp !== this._lstamp && this[i].__t === 1) force = true
              val = _getOperator(val, force, i, this, bind, operators);
              if (!nolval && !this[i]._lval) nolval = true
              i = ordered[x++];
            }
          }
        }
      }
      if (!nolval && !force) {
        this._lval = val;
        this.__lval = val;
      } else if (!(this._base && this._base.instances)) {
        this.__lval = val;
      }
      return val;
    } else {
      return this.__lval;
    }
  },
  /**
   * Fires all listeners
   * @method update
   * @param  {[type]} instance    [description]
   * @param  {[type]} noinstances [description]
   * @param  {[type]} stamp       [description]
   * @param  {[type]} from        [description]
   * @param  {[type]} remove      [description]
   * @param  {[type]} added       [description]
   * @return {[type]}             [description]
   */
  'update',
  function(instance, noinstances, instancesUpdates, stamp, from, remove, added) {
    //is this really nessecary?
    this._update.call( this, void 0, stamp || this.stamp(), from, remove, false, false, noinstances, instance, instancesUpdates  ); //this.val
    return this;
  },
  /**
   * Extends vigourObject._update
   * Adds loads of stuff to optimize updates for calculations
   * @method _update
   * @param  {[type]} val         [description]
   * @param  {[type]} stamp       [description]
   * @param  {[type]} from        [description]
   * @param  {[type]} remove      [description]
   * @param  {[type]} added       [description]
   * @param  {[type]} noinstances [description]
   * @param  {[type]} instance    [description]
   * @return {[type]}             [description]
   */
  '_update',
  function( val, stamp, from, remove, added, oldval, noinstances, instance, instancesUpdates ) {

    var t = this,
      base = t._base;

    if (val instanceof exports && !t._bind) 
    {
      if (val._caller) {
        t._bind = val._caller;
      }
    }

    if ( (!t._lstamp) || t._lstamp !== stamp  ) {

    // var operators = t.operators
    // var lval 
    // var calcVal
    // var passValueCache 

    // if( !t.ignoreCache ) {
    //   //TODO: this is a temporary fix needs to be faster
    //   //make this a method
    //   function cleanup(t) {
    //   	t._lval = void 0
    //   	t.__lval = void 0 
    //   	if(t._val instanceof object ) {
    //   		//TODO: if stuff doesnt update uncomment this line
    //   		// cleanup(t._val)
    //   	}
  	 //    for(var $field in t) {
  	 //    	if(operators[$field]) {
  	 //    		cleanup(t[$field])
  	 //    	} else if($field > -1) {
  	 //    		cleanup(t[$field])
  	 //    	}
  	 //    }
    // 	}
    //   cleanup(t)

    //   lval = t.___lval
    //   calcVal = t.val
    //   passValueCache = lval === void 0 || lval !== calcVal
    //   t.___lval = calcVal

    // } else {

      // t.clearCache()
      // passValueCache = true
    // }

     // if (  passValueCache || ( base && base.instances ) || t._skip ) { //pass this calculation to vset else its too heavy;

    t._lval = false  
    // t._skip = true
    if(base && base.instances || t._skip || t.__lval === void 0 || t.___lval !== t.val ) {

      // if(window.smut) {
        // console.log('wtf is happening!!!!', t._path, t, t._updateOrigin, arguments)
      // }

        var prop = t._prop,
          parent = t._parent,
          vset = prop && prop._vset;

        var operators = t.operators
  
        //make this better
        if (!(from && remove) && operators && (operators[t._name] || (parent && parent.__t === 1 && operators[parent._name] && (!from || t._name == parent.length - 1)))) {
          //works for arrays since arrays are always replaced on update , updating an individual item using .set will not result in an update at this pont which has to be resolved
          var _op = this._parent;
          while (operators[_op._name]) {
            _op._lval = false; //if no change to lval can go wrong...
            _op = _op._parent;
          }
          if (_op) {
          	//this geatly increases updates may be important for animation but not nessecary for anything else!
            _op._update(val, stamp, this, remove, added, oldval, noinstances, instance, instancesUpdates);
          }
        }

        if (instancesUpdates) {
          instancesUpdates.call(t, val, stamp, from, remove, added, oldval, noinstances, instance, instancesUpdates);
        } else {
          if (instance) {
            base = instance;
          }
          if (vset) {
            t._caller = base;
            vset.call(t, stamp, from, remove, val);
          }
          if (base && vset && base.instances && !noinstances && prop.updateinstances !== false) {
            base.eachInstance(function() { //look for current caller instance perhaps?
              t._caller = this;
              vset.call(t, stamp, from, remove, val);
            }, prop.name, t);
            t._caller = base;
          }
          //form gone lets see!
          //from self doorgeven in chain ==-- if ! not from from ---> , extra arg
          object.prototype._update.call(t, val, stamp, from || t, remove, added, oldval)
        }

        //pas op met deze!
        t._lstamp = stamp;
    }
    else {
      // if(window.smut) console.log('catch it!', arguments)
    }


    }
  })

//requiring operators does not automaticly require vigourValue, may be handy?
util.define(exports, 'operators', {
  value: exports.operators = require('./operators')
})




},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./operators":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/operators.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/length.js":[function(require,module,exports){
var Value = require('vigour-js/value'),
  util = require('vigour-js/util'),
  VObject = require('vigour-js/object')

exports.extend = util.extend(
  function(Target){
    if( Target.prototype instanceof VObject || Target === VObject) {
      // TODO: fix this to affect all VObject blacklists...
      Target.prototype._blacklist.push('_$length')

      util.define( Target,
        '$length', {
          get: function () {
            // TODO: ...so we dont have to do blacklist check:
            util.include(this._blacklist, '_$length')
            return this._$length || (this._$length = makeLength(this))
          }
        }
      )
    } else {
      throw new Error('cannot extend "$length" on non VObject Class')
    }
  }
)

function makeLength(instance) {
  var $length = new Value({
    val: function(){
      return getLength(instance)
    }
  })

  instance.on(function(val){

    // var identifier = instance._path.length 
    //   ? instance._path
    //   : instance._prop && instance._prop.name
    // console.log('UPDATE ON', identifier, 'SHINE DAT LENGTH?!', $length.val
    // )
    // TODO: only update if added or removed
    $length._update.apply($length, arguments)
  })

  return $length
}

function getLength (current) {
  if(!current){
    return 0
  } if (current._filter) {
    return current.length
  } else if (current.__t === 4) {
    return getLength(current._val)
  } else if (current.__t < 3) {
    return current.keys.length
  } else if (typeof current._val === 'string') {
    return current._val.length
  } else {
    return 0
  }
}

},{"vigour-js/object":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/object/index.js","vigour-js/util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","vigour-js/value":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/on.js":[function(require,module,exports){
/*!
 * @license Copyright (c) 2012-2014, Vigour. All rights reserved.
 * @author: Jim de Beer, jim@vigour.io
 */

  /*
    Extension for Base classes to create an inheritable on - value
  */

var Value = require('./')
  , util = require('../util')
  , Base = require('../base')

exports.extend = util.extend
( function(base)
  {
    if( base instanceof Base )
    {

      base.extend
      (
        {
          name:'on',
          set:function(val) {
            
          },
          remove:function(val) {
            //remove
            // console.log('im being removed!')
             if(this.on.$remove) {
              this.on.$remove.update()
            }
          },
          new:function(val) {
            //init
            // console.log('INIT!----', this, val, arguments)
            if(this.on.$new) {
              this.on.$new.update()
            }
          },
          parent:function(val) {
            //init
            if(this.on.$parent) {
              this.on.$parent.update()
            }
          },
          render:function(val) {
            //init
            // console.log('RENDER!----', this, val, arguments)
            if(this.on.$render) {
              this.on.$render.update()
            }
          }
        }
      )

    }
    else
    {
      throw new Error('cannot extend "on" on non Base Class')
    }
  }
)

},{"../base":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/base/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js","./":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/vigour-js/value/operators.js":[function(require,module,exports){
/**
 * operators
 * operators can be set on V.Value.operators
 * define operators on this module
 * @property
 */
var util = require('../util')
  , V = require('../')

exports.add = function( val, operator ) {
  return val + operator
}
exports.sub = function( val, operator ) {
  return val - operator
}
exports.multiply = function( val, operator ) {
  return val * operator
}
exports.divide = function( val, operator ) {
  return val / operator
}
exports.max = function( val, operator ) {
  return val > operator ? operator : val
}
exports.min = function( val, operator ) {
  return val < operator ? operator : val
}
exports.transform = function( val, operator ) {
  return operator===false ? val : operator
}
exports.abs = function( val, operator ) {
  return operator ? Math.abs(val) : val
}
exports.floor = function( val, operator ) {
  return val | 0
}
exports.ceil = function ( val, operator ) {
  return Math.ceil( val )
}
exports.$convertType = function ( val, operator ) {
  //convertType
  if( operator === 'boolean' )
  { 
    return val ? true : false
  } 
  else if( operator === 'number' )
  {
    //do isNan start using loDash for this kind of stuff ( almost nothing )
    //convert falsy or NaN values to 0
    return Number( val )
  }
}

exports.default = function( val, operator ) {

// console.log( '????', val )
  
  //pas op met die 0
  if( (!val && val !== 0) || val._val === false || val === 'error' || val === 'success' )
  {
    //TODO: Arrays for default operator
    return operator
  }
  return val
}
exports.default.order = 1000
},{"../":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/index.js","../util":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/util/index.js"}],"/Users/youzi/dev/mtv-play/node_modules/zepto-browserify/zepto.js":[function(require,module,exports){
/* Zepto v1.0 - polyfill zepto detect event ajax form fx - zeptojs.com/license */

;(function(undefined){
  if (String.prototype.trim === undefined) // fix for iOS 3.2
    String.prototype.trim = function(){ return this.replace(/^\s+|\s+$/g, '') }

  // For iOS 3.x
  // from https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/reduce
  if (Array.prototype.reduce === undefined)
    Array.prototype.reduce = function(fun){
      if(this === void 0 || this === null) throw new TypeError()
      var t = Object(this), len = t.length >>> 0, k = 0, accumulator
      if(typeof fun != 'function') throw new TypeError()
      if(len == 0 && arguments.length == 1) throw new TypeError()

      if(arguments.length >= 2)
       accumulator = arguments[1]
      else
        do{
          if(k in t){
            accumulator = t[k++]
            break
          }
          if(++k >= len) throw new TypeError()
        } while (true)

      while (k < len){
        if(k in t) accumulator = fun.call(undefined, accumulator, t[k], k, t)
        k++
      }
      return accumulator
    }

})()





var Zepto = (function() {
  var undefined, key, $, classList, emptyArray = [], slice = emptyArray.slice, filter = emptyArray.filter,
    document = window.document,
    elementDisplay = {}, classCache = {},
    getComputedStyle = document.defaultView.getComputedStyle,
    cssNumber = { 'column-count': 1, 'columns': 1, 'font-weight': 1, 'line-height': 1,'opacity': 1, 'z-index': 1, 'zoom': 1 },
    fragmentRE = /^\s*<(\w+|!)[^>]*>/,
    tagExpanderRE = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,
    rootNodeRE = /^(?:body|html)$/i,

    // special attributes that should be get/set via method calls
    methodAttributes = ['val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'],

    adjacencyOperators = [ 'after', 'prepend', 'before', 'append' ],
    table = document.createElement('table'),
    tableRow = document.createElement('tr'),
    containers = {
      'tr': document.createElement('tbody'),
      'tbody': table, 'thead': table, 'tfoot': table,
      'td': tableRow, 'th': tableRow,
      '*': document.createElement('div')
    },
    readyRE = /complete|loaded|interactive/,
    classSelectorRE = /^\.([\w-]+)$/,
    idSelectorRE = /^#([\w-]*)$/,
    tagSelectorRE = /^[\w-]+$/,
    class2type = {},
    toString = class2type.toString,
    zepto = {},
    camelize, uniq,
    tempParent = document.createElement('div')

  zepto.matches = function(element, selector) {
    if (!element || element.nodeType !== 1) return false
    var matchesSelector = element.webkitMatchesSelector || element.mozMatchesSelector ||
                          element.oMatchesSelector || element.matchesSelector
    if (matchesSelector) return matchesSelector.call(element, selector)
    // fall back to performing a selector:
    var match, parent = element.parentNode, temp = !parent
    if (temp) (parent = tempParent).appendChild(element)
    match = ~zepto.qsa(parent, selector).indexOf(element)
    temp && tempParent.removeChild(element)
    return match
  }

  function type(obj) {
    return obj == null ? String(obj) :
      class2type[toString.call(obj)] || "object"
  }

  function isFunction(value) { return type(value) == "function" }
  function isWindow(obj)     { return obj != null && obj == obj.window }
  function isDocument(obj)   { return obj != null && obj.nodeType == obj.DOCUMENT_NODE }
  function isObject(obj)     { return type(obj) == "object" }
  function isPlainObject(obj) {
    return isObject(obj) && !isWindow(obj) && obj.__proto__ == Object.prototype
  }
  function isArray(value) { return value instanceof Array }
  function likeArray(obj) { return typeof obj.length == 'number' }

  function compact(array) { return filter.call(array, function(item){ return item != null }) }
  function flatten(array) { return array.length > 0 ? $.fn.concat.apply([], array) : array }
  camelize = function(str){ return str.replace(/-+(.)?/g, function(match, chr){ return chr ? chr.toUpperCase() : '' }) }
  function dasherize(str) {
    return str.replace(/::/g, '/')
           .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')
           .replace(/([a-z\d])([A-Z])/g, '$1_$2')
           .replace(/_/g, '-')
           .toLowerCase()
  }
  uniq = function(array){ return filter.call(array, function(item, idx){ return array.indexOf(item) == idx }) }

  function classRE(name) {
    return name in classCache ?
      classCache[name] : (classCache[name] = new RegExp('(^|\\s)' + name + '(\\s|$)'))
  }

  function maybeAddPx(name, value) {
    return (typeof value == "number" && !cssNumber[dasherize(name)]) ? value + "px" : value
  }

  function defaultDisplay(nodeName) {
    var element, display
    if (!elementDisplay[nodeName]) {
      element = document.createElement(nodeName)
      document.body.appendChild(element)
      display = getComputedStyle(element, '').getPropertyValue("display")
      element.parentNode.removeChild(element)
      display == "none" && (display = "block")
      elementDisplay[nodeName] = display
    }
    return elementDisplay[nodeName]
  }

  function children(element) {
    return 'children' in element ?
      slice.call(element.children) :
      $.map(element.childNodes, function(node){ if (node.nodeType == 1) return node })
  }

  // `$.zepto.fragment` takes a html string and an optional tag name
  // to generate DOM nodes nodes from the given html string.
  // The generated DOM nodes are returned as an array.
  // This function can be overriden in plugins for example to make
  // it compatible with browsers that don't support the DOM fully.
  zepto.fragment = function(html, name, properties) {
    if (html.replace) html = html.replace(tagExpanderRE, "<$1></$2>")
    if (name === undefined) name = fragmentRE.test(html) && RegExp.$1
    if (!(name in containers)) name = '*'

    var nodes, dom, container = containers[name]
    container.innerHTML = '' + html
    dom = $.each(slice.call(container.childNodes), function(){
      container.removeChild(this)
    })
    if (isPlainObject(properties)) {
      nodes = $(dom)
      $.each(properties, function(key, value) {
        if (methodAttributes.indexOf(key) > -1) nodes[key](value)
        else nodes.attr(key, value)
      })
    }
    return dom
  }

  // `$.zepto.Z` swaps out the prototype of the given `dom` array
  // of nodes with `$.fn` and thus supplying all the Zepto functions
  // to the array. Note that `__proto__` is not supported on Internet
  // Explorer. This method can be overriden in plugins.
  zepto.Z = function(dom, selector) {
    dom = dom || []
    dom.__proto__ = $.fn
    dom.selector = selector || ''
    return dom
  }

  // `$.zepto.isZ` should return `true` if the given object is a Zepto
  // collection. This method can be overriden in plugins.
  zepto.isZ = function(object) {
    return object instanceof zepto.Z
  }

  // `$.zepto.init` is Zepto's counterpart to jQuery's `$.fn.init` and
  // takes a CSS selector and an optional context (and handles various
  // special cases).
  // This method can be overriden in plugins.
  zepto.init = function(selector, context) {
    // If nothing given, return an empty Zepto collection
    if (!selector) return zepto.Z()
    // If a function is given, call it when the DOM is ready
    else if (isFunction(selector)) return $(document).ready(selector)
    // If a Zepto collection is given, juts return it
    else if (zepto.isZ(selector)) return selector
    else {
      var dom
      // normalize array if an array of nodes is given
      if (isArray(selector)) dom = compact(selector)
      // Wrap DOM nodes. If a plain object is given, duplicate it.
      else if (isObject(selector))
        dom = [isPlainObject(selector) ? $.extend({}, selector) : selector], selector = null
      // If it's a html fragment, create nodes from it
      else if (fragmentRE.test(selector))
        dom = zepto.fragment(selector.trim(), RegExp.$1, context), selector = null
      // If there's a context, create a collection on that context first, and select
      // nodes from there
      else if (context !== undefined) return $(context).find(selector)
      // And last but no least, if it's a CSS selector, use it to select nodes.
      else dom = zepto.qsa(document, selector)
      // create a new Zepto collection from the nodes found
      return zepto.Z(dom, selector)
    }
  }

  // `$` will be the base `Zepto` object. When calling this
  // function just call `$.zepto.init, which makes the implementation
  // details of selecting nodes and creating Zepto collections
  // patchable in plugins.
  $ = function(selector, context){
    return zepto.init(selector, context)
  }

  function extend(target, source, deep) {
    for (key in source)
      if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {
        if (isPlainObject(source[key]) && !isPlainObject(target[key]))
          target[key] = {}
        if (isArray(source[key]) && !isArray(target[key]))
          target[key] = []
        extend(target[key], source[key], deep)
      }
      else if (source[key] !== undefined) target[key] = source[key]
  }

  // Copy all but undefined properties from one or more
  // objects to the `target` object.
  $.extend = function(target){
    var deep, args = slice.call(arguments, 1)
    if (typeof target == 'boolean') {
      deep = target
      target = args.shift()
    }
    args.forEach(function(arg){ extend(target, arg, deep) })
    return target
  }

  // `$.zepto.qsa` is Zepto's CSS selector implementation which
  // uses `document.querySelectorAll` and optimizes for some special cases, like `#id`.
  // This method can be overriden in plugins.
  zepto.qsa = function(element, selector){
    var found
    return (isDocument(element) && idSelectorRE.test(selector)) ?
      ( (found = element.getElementById(RegExp.$1)) ? [found] : [] ) :
      (element.nodeType !== 1 && element.nodeType !== 9) ? [] :
      slice.call(
        classSelectorRE.test(selector) ? element.getElementsByClassName(RegExp.$1) :
        tagSelectorRE.test(selector) ? element.getElementsByTagName(selector) :
        element.querySelectorAll(selector)
      )
  }

  function filtered(nodes, selector) {
    return selector === undefined ? $(nodes) : $(nodes).filter(selector)
  }

  $.contains = function(parent, node) {
    return parent !== node && parent.contains(node)
  }

  function funcArg(context, arg, idx, payload) {
    return isFunction(arg) ? arg.call(context, idx, payload) : arg
  }

  function setAttribute(node, name, value) {
    value == null ? node.removeAttribute(name) : node.setAttribute(name, value)
  }

  // access className property while respecting SVGAnimatedString
  function className(node, value){
    var klass = node.className,
        svg   = klass && klass.baseVal !== undefined

    if (value === undefined) return svg ? klass.baseVal : klass
    svg ? (klass.baseVal = value) : (node.className = value)
  }

  // "true"  => true
  // "false" => false
  // "null"  => null
  // "42"    => 42
  // "42.5"  => 42.5
  // JSON    => parse if valid
  // String  => self
  function deserializeValue(value) {
    var num
    try {
      return value ?
        value == "true" ||
        ( value == "false" ? false :
          value == "null" ? null :
          !isNaN(num = Number(value)) ? num :
          /^[\[\{]/.test(value) ? $.parseJSON(value) :
          value )
        : value
    } catch(e) {
      return value
    }
  }

  $.type = type
  $.isFunction = isFunction
  $.isWindow = isWindow
  $.isArray = isArray
  $.isPlainObject = isPlainObject

  $.isEmptyObject = function(obj) {
    var name
    for (name in obj) return false
    return true
  }

  $.inArray = function(elem, array, i){
    return emptyArray.indexOf.call(array, elem, i)
  }

  $.camelCase = camelize
  $.trim = function(str) { return str.trim() }

  // plugin compatibility
  $.uuid = 0
  $.support = { }
  $.expr = { }

  $.map = function(elements, callback){
    var value, values = [], i, key
    if (likeArray(elements))
      for (i = 0; i < elements.length; i++) {
        value = callback(elements[i], i)
        if (value != null) values.push(value)
      }
    else
      for (key in elements) {
        value = callback(elements[key], key)
        if (value != null) values.push(value)
      }
    return flatten(values)
  }

  $.each = function(elements, callback){
    var i, key
    if (likeArray(elements)) {
      for (i = 0; i < elements.length; i++)
        if (callback.call(elements[i], i, elements[i]) === false) return elements
    } else {
      for (key in elements)
        if (callback.call(elements[key], key, elements[key]) === false) return elements
    }

    return elements
  }

  $.grep = function(elements, callback){
    return filter.call(elements, callback)
  }

  if (window.JSON) $.parseJSON = JSON.parse

  // Populate the class2type map
  $.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase()
  })

  // Define methods that will be available on all
  // Zepto collections
  $.fn = {
    // Because a collection acts like an array
    // copy over these useful array functions.
    forEach: emptyArray.forEach,
    reduce: emptyArray.reduce,
    push: emptyArray.push,
    sort: emptyArray.sort,
    indexOf: emptyArray.indexOf,
    concat: emptyArray.concat,

    // `map` and `slice` in the jQuery API work differently
    // from their array counterparts
    map: function(fn){
      return $($.map(this, function(el, i){ return fn.call(el, i, el) }))
    },
    slice: function(){
      return $(slice.apply(this, arguments))
    },

    ready: function(callback){
      if (readyRE.test(document.readyState)) callback($)
      else document.addEventListener('DOMContentLoaded', function(){ callback($) }, false)
      return this
    },
    get: function(idx){
      return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]
    },
    toArray: function(){ return this.get() },
    size: function(){
      return this.length
    },
    remove: function(){
      return this.each(function(){
        if (this.parentNode != null)
          this.parentNode.removeChild(this)
      })
    },
    each: function(callback){
      emptyArray.every.call(this, function(el, idx){
        return callback.call(el, idx, el) !== false
      })
      return this
    },
    filter: function(selector){
      if (isFunction(selector)) return this.not(this.not(selector))
      return $(filter.call(this, function(element){
        return zepto.matches(element, selector)
      }))
    },
    add: function(selector,context){
      return $(uniq(this.concat($(selector,context))))
    },
    is: function(selector){
      return this.length > 0 && zepto.matches(this[0], selector)
    },
    not: function(selector){
      var nodes=[]
      if (isFunction(selector) && selector.call !== undefined)
        this.each(function(idx){
          if (!selector.call(this,idx)) nodes.push(this)
        })
      else {
        var excludes = typeof selector == 'string' ? this.filter(selector) :
          (likeArray(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)
        this.forEach(function(el){
          if (excludes.indexOf(el) < 0) nodes.push(el)
        })
      }
      return $(nodes)
    },
    has: function(selector){
      return this.filter(function(){
        return isObject(selector) ?
          $.contains(this, selector) :
          $(this).find(selector).size()
      })
    },
    eq: function(idx){
      return idx === -1 ? this.slice(idx) : this.slice(idx, + idx + 1)
    },
    first: function(){
      var el = this[0]
      return el && !isObject(el) ? el : $(el)
    },
    last: function(){
      var el = this[this.length - 1]
      return el && !isObject(el) ? el : $(el)
    },
    find: function(selector){
      var result, $this = this
      if (typeof selector == 'object')
        result = $(selector).filter(function(){
          var node = this
          return emptyArray.some.call($this, function(parent){
            return $.contains(parent, node)
          })
        })
      else if (this.length == 1) result = $(zepto.qsa(this[0], selector))
      else result = this.map(function(){ return zepto.qsa(this, selector) })
      return result
    },
    closest: function(selector, context){
      var node = this[0], collection = false
      if (typeof selector == 'object') collection = $(selector)
      while (node && !(collection ? collection.indexOf(node) >= 0 : zepto.matches(node, selector)))
        node = node !== context && !isDocument(node) && node.parentNode
      return $(node)
    },
    parents: function(selector){
      var ancestors = [], nodes = this
      while (nodes.length > 0)
        nodes = $.map(nodes, function(node){
          if ((node = node.parentNode) && !isDocument(node) && ancestors.indexOf(node) < 0) {
            ancestors.push(node)
            return node
          }
        })
      return filtered(ancestors, selector)
    },
    parent: function(selector){
      return filtered(uniq(this.pluck('parentNode')), selector)
    },
    children: function(selector){
      return filtered(this.map(function(){ return children(this) }), selector)
    },
    contents: function() {
      return this.map(function() { return slice.call(this.childNodes) })
    },
    siblings: function(selector){
      return filtered(this.map(function(i, el){
        return filter.call(children(el.parentNode), function(child){ return child!==el })
      }), selector)
    },
    empty: function(){
      return this.each(function(){ this.innerHTML = '' })
    },
    // `pluck` is borrowed from Prototype.js
    pluck: function(property){
      return $.map(this, function(el){ return el[property] })
    },
    show: function(){
      return this.each(function(){
        this.style.display == "none" && (this.style.display = null)
        if (getComputedStyle(this, '').getPropertyValue("display") == "none")
          this.style.display = defaultDisplay(this.nodeName)
      })
    },
    replaceWith: function(newContent){
      return this.before(newContent).remove()
    },
    wrap: function(structure){
      var func = isFunction(structure)
      if (this[0] && !func)
        var dom   = $(structure).get(0),
            clone = dom.parentNode || this.length > 1

      return this.each(function(index){
        $(this).wrapAll(
          func ? structure.call(this, index) :
            clone ? dom.cloneNode(true) : dom
        )
      })
    },
    wrapAll: function(structure){
      if (this[0]) {
        $(this[0]).before(structure = $(structure))
        var children
        // drill down to the inmost element
        while ((children = structure.children()).length) structure = children.first()
        $(structure).append(this)
      }
      return this
    },
    wrapInner: function(structure){
      var func = isFunction(structure)
      return this.each(function(index){
        var self = $(this), contents = self.contents(),
            dom  = func ? structure.call(this, index) : structure
        contents.length ? contents.wrapAll(dom) : self.append(dom)
      })
    },
    unwrap: function(){
      this.parent().each(function(){
        $(this).replaceWith($(this).children())
      })
      return this
    },
    clone: function(){
      return this.map(function(){ return this.cloneNode(true) })
    },
    hide: function(){
      return this.css("display", "none")
    },
    toggle: function(setting){
      return this.each(function(){
        var el = $(this)
        ;(setting === undefined ? el.css("display") == "none" : setting) ? el.show() : el.hide()
      })
    },
    prev: function(selector){ return $(this.pluck('previousElementSibling')).filter(selector || '*') },
    next: function(selector){ return $(this.pluck('nextElementSibling')).filter(selector || '*') },
    html: function(html){
      return html === undefined ?
        (this.length > 0 ? this[0].innerHTML : null) :
        this.each(function(idx){
          var originHtml = this.innerHTML
          $(this).empty().append( funcArg(this, html, idx, originHtml) )
        })
    },
    text: function(text){
      return text === undefined ?
        (this.length > 0 ? this[0].textContent : null) :
        this.each(function(){ this.textContent = text })
    },
    attr: function(name, value){
      var result
      return (typeof name == 'string' && value === undefined) ?
        (this.length == 0 || this[0].nodeType !== 1 ? undefined :
          (name == 'value' && this[0].nodeName == 'INPUT') ? this.val() :
          (!(result = this[0].getAttribute(name)) && name in this[0]) ? this[0][name] : result
        ) :
        this.each(function(idx){
          if (this.nodeType !== 1) return
          if (isObject(name)) for (key in name) setAttribute(this, key, name[key])
          else setAttribute(this, name, funcArg(this, value, idx, this.getAttribute(name)))
        })
    },
    removeAttr: function(name){
      return this.each(function(){ this.nodeType === 1 && setAttribute(this, name) })
    },
    prop: function(name, value){
      return (value === undefined) ?
        (this[0] && this[0][name]) :
        this.each(function(idx){
          this[name] = funcArg(this, value, idx, this[name])
        })
    },
    data: function(name, value){
      var data = this.attr('data-' + dasherize(name), value)
      return data !== null ? deserializeValue(data) : undefined
    },
    val: function(value){
      return (value === undefined) ?
        (this[0] && (this[0].multiple ?
           $(this[0]).find('option').filter(function(o){ return this.selected }).pluck('value') :
           this[0].value)
        ) :
        this.each(function(idx){
          this.value = funcArg(this, value, idx, this.value)
        })
    },
    offset: function(coordinates){
      if (coordinates) return this.each(function(index){
        var $this = $(this),
            coords = funcArg(this, coordinates, index, $this.offset()),
            parentOffset = $this.offsetParent().offset(),
            props = {
              top:  coords.top  - parentOffset.top,
              left: coords.left - parentOffset.left
            }

        if ($this.css('position') == 'static') props['position'] = 'relative'
        $this.css(props)
      })
      if (this.length==0) return null
      var obj = this[0].getBoundingClientRect()
      return {
        left: obj.left + window.pageXOffset,
        top: obj.top + window.pageYOffset,
        width: Math.round(obj.width),
        height: Math.round(obj.height)
      }
    },
    css: function(property, value){
      if (arguments.length < 2 && typeof property == 'string')
        return this[0] && (this[0].style[camelize(property)] || getComputedStyle(this[0], '').getPropertyValue(property))

      var css = ''
      if (type(property) == 'string') {
        if (!value && value !== 0)
          this.each(function(){ this.style.removeProperty(dasherize(property)) })
        else
          css = dasherize(property) + ":" + maybeAddPx(property, value)
      } else {
        for (key in property)
          if (!property[key] && property[key] !== 0)
            this.each(function(){ this.style.removeProperty(dasherize(key)) })
          else
            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'
      }

      return this.each(function(){ this.style.cssText += ';' + css })
    },
    index: function(element){
      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0])
    },
    hasClass: function(name){
      return emptyArray.some.call(this, function(el){
        return this.test(className(el))
      }, classRE(name))
    },
    addClass: function(name){
      return this.each(function(idx){
        classList = []
        var cls = className(this), newName = funcArg(this, name, idx, cls)
        newName.split(/\s+/g).forEach(function(klass){
          if (!$(this).hasClass(klass)) classList.push(klass)
        }, this)
        classList.length && className(this, cls + (cls ? " " : "") + classList.join(" "))
      })
    },
    removeClass: function(name){
      return this.each(function(idx){
        if (name === undefined) return className(this, '')
        classList = className(this)
        funcArg(this, name, idx, classList).split(/\s+/g).forEach(function(klass){
          classList = classList.replace(classRE(klass), " ")
        })
        className(this, classList.trim())
      })
    },
    toggleClass: function(name, when){
      return this.each(function(idx){
        var $this = $(this), names = funcArg(this, name, idx, className(this))
        names.split(/\s+/g).forEach(function(klass){
          (when === undefined ? !$this.hasClass(klass) : when) ?
            $this.addClass(klass) : $this.removeClass(klass)
        })
      })
    },
    scrollTop: function(){
      if (!this.length) return
      return ('scrollTop' in this[0]) ? this[0].scrollTop : this[0].scrollY
    },
    position: function() {
      if (!this.length) return

      var elem = this[0],
        // Get *real* offsetParent
        offsetParent = this.offsetParent(),
        // Get correct offsets
        offset       = this.offset(),
        parentOffset = rootNodeRE.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset()

      // Subtract element margins
      // note: when an element has margin: auto the offsetLeft and marginLeft
      // are the same in Safari causing offset.left to incorrectly be 0
      offset.top  -= parseFloat( $(elem).css('margin-top') ) || 0
      offset.left -= parseFloat( $(elem).css('margin-left') ) || 0

      // Add offsetParent borders
      parentOffset.top  += parseFloat( $(offsetParent[0]).css('border-top-width') ) || 0
      parentOffset.left += parseFloat( $(offsetParent[0]).css('border-left-width') ) || 0

      // Subtract the two offsets
      return {
        top:  offset.top  - parentOffset.top,
        left: offset.left - parentOffset.left
      }
    },
    offsetParent: function() {
      return this.map(function(){
        var parent = this.offsetParent || document.body
        while (parent && !rootNodeRE.test(parent.nodeName) && $(parent).css("position") == "static")
          parent = parent.offsetParent
        return parent
      })
    }
  }

  // for now
  $.fn.detach = $.fn.remove

  // Generate the `width` and `height` functions
  ;['width', 'height'].forEach(function(dimension){
    $.fn[dimension] = function(value){
      var offset, el = this[0],
        Dimension = dimension.replace(/./, function(m){ return m[0].toUpperCase() })
      if (value === undefined) return isWindow(el) ? el['inner' + Dimension] :
        isDocument(el) ? el.documentElement['offset' + Dimension] :
        (offset = this.offset()) && offset[dimension]
      else return this.each(function(idx){
        el = $(this)
        el.css(dimension, funcArg(this, value, idx, el[dimension]()))
      })
    }
  })

  function traverseNode(node, fun) {
    fun(node)
    for (var key in node.childNodes) traverseNode(node.childNodes[key], fun)
  }

  // Generate the `after`, `prepend`, `before`, `append`,
  // `insertAfter`, `insertBefore`, `appendTo`, and `prependTo` methods.
  adjacencyOperators.forEach(function(operator, operatorIndex) {
    var inside = operatorIndex % 2 //=> prepend, append

    $.fn[operator] = function(){
      // arguments can be nodes, arrays of nodes, Zepto objects and HTML strings
      var argType, nodes = $.map(arguments, function(arg) {
            argType = type(arg)
            return argType == "object" || argType == "array" || arg == null ?
              arg : zepto.fragment(arg)
          }),
          parent, copyByClone = this.length > 1
      if (nodes.length < 1) return this

      return this.each(function(_, target){
        parent = inside ? target : target.parentNode

        // convert all methods to a "before" operation
        target = operatorIndex == 0 ? target.nextSibling :
                 operatorIndex == 1 ? target.firstChild :
                 operatorIndex == 2 ? target :
                 null

        nodes.forEach(function(node){
          if (copyByClone) node = node.cloneNode(true)
          else if (!parent) return $(node).remove()

          traverseNode(parent.insertBefore(node, target), function(el){
            if (el.nodeName != null && el.nodeName.toUpperCase() === 'SCRIPT' &&
               (!el.type || el.type === 'text/javascript') && !el.src)
              window['eval'].call(window, el.innerHTML)
          })
        })
      })
    }

    // after    => insertAfter
    // prepend  => prependTo
    // before   => insertBefore
    // append   => appendTo
    $.fn[inside ? operator+'To' : 'insert'+(operatorIndex ? 'Before' : 'After')] = function(html){
      $(html)[operator](this)
      return this
    }
  })

  zepto.Z.prototype = $.fn

  // Export internal API functions in the `$.zepto` namespace
  zepto.uniq = uniq
  zepto.deserializeValue = deserializeValue
  $.zepto = zepto

  return $
})()

// @@ original loader
// window.Zepto = Zepto
// '$' in window || (window.$ = Zepto)
// @@ modified by jiyinyiyong
module.exports.$ = Zepto;
module.exports.Zepto = Zepto;
// @@ modifications end


;(function($){
  function detect(ua){
    var os = this.os = {}, browser = this.browser = {},
      webkit = ua.match(/WebKit\/([\d.]+)/),
      android = ua.match(/(Android)\s+([\d.]+)/),
      ipad = ua.match(/(iPad).*OS\s([\d_]+)/),
      iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/),
      webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/),
      touchpad = webos && ua.match(/TouchPad/),
      kindle = ua.match(/Kindle\/([\d.]+)/),
      silk = ua.match(/Silk\/([\d._]+)/),
      blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/),
      bb10 = ua.match(/(BB10).*Version\/([\d.]+)/),
      rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/),
      playbook = ua.match(/PlayBook/),
      chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/),
      firefox = ua.match(/Firefox\/([\d.]+)/)

    // Todo: clean this up with a better OS/browser seperation:
    // - discern (more) between multiple browsers on android
    // - decide if kindle fire in silk mode is android or not
    // - Firefox on Android doesn't specify the Android version
    // - possibly devide in os, device and browser hashes

    if (browser.webkit = !!webkit) browser.version = webkit[1]

    if (android) os.android = true, os.version = android[2]
    if (iphone) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.')
    if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.')
    if (webos) os.webos = true, os.version = webos[2]
    if (touchpad) os.touchpad = true
    if (blackberry) os.blackberry = true, os.version = blackberry[2]
    if (bb10) os.bb10 = true, os.version = bb10[2]
    if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2]
    if (playbook) browser.playbook = true
    if (kindle) os.kindle = true, os.version = kindle[1]
    if (silk) browser.silk = true, browser.version = silk[1]
    if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true
    if (chrome) browser.chrome = true, browser.version = chrome[1]
    if (firefox) browser.firefox = true, browser.version = firefox[1]

    os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) || (firefox && ua.match(/Tablet/)))
    os.phone  = !!(!os.tablet && (android || iphone || webos || blackberry || bb10 ||
      (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) || (firefox && ua.match(/Mobile/))))
  }

  detect.call($, navigator.userAgent)
  // make available to unit tests
  $.__detect = detect

})(Zepto)





;(function($){
  var $$ = $.zepto.qsa, handlers = {}, _zid = 1, specialEvents={},
      hover = { mouseenter: 'mouseover', mouseleave: 'mouseout' }

  specialEvents.click = specialEvents.mousedown = specialEvents.mouseup = specialEvents.mousemove = 'MouseEvents'

  function zid(element) {
    return element._zid || (element._zid = _zid++)
  }
  function findHandlers(element, event, fn, selector) {
    event = parse(event)
    if (event.ns) var matcher = matcherFor(event.ns)
    return (handlers[zid(element)] || []).filter(function(handler) {
      return handler
        && (!event.e  || handler.e == event.e)
        && (!event.ns || matcher.test(handler.ns))
        && (!fn       || zid(handler.fn) === zid(fn))
        && (!selector || handler.sel == selector)
    })
  }
  function parse(event) {
    var parts = ('' + event).split('.')
    return {e: parts[0], ns: parts.slice(1).sort().join(' ')}
  }
  function matcherFor(ns) {
    return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)')
  }

  function eachEvent(events, fn, iterator){
    if ($.type(events) != "string") $.each(events, iterator)
    else events.split(/\s/).forEach(function(type){ iterator(type, fn) })
  }

  function eventCapture(handler, captureSetting) {
    return handler.del &&
      (handler.e == 'focus' || handler.e == 'blur') ||
      !!captureSetting
  }

  function realEvent(type) {
    return hover[type] || type
  }

  function add(element, events, fn, selector, getDelegate, capture){
    var id = zid(element), set = (handlers[id] || (handlers[id] = []))
    eachEvent(events, fn, function(event, fn){
      var handler   = parse(event)
      handler.fn    = fn
      handler.sel   = selector
      // emulate mouseenter, mouseleave
      if (handler.e in hover) fn = function(e){
        var related = e.relatedTarget
        if (!related || (related !== this && !$.contains(this, related)))
          return handler.fn.apply(this, arguments)
      }
      handler.del   = getDelegate && getDelegate(fn, event)
      var callback  = handler.del || fn
      handler.proxy = function (e) {
        var result = callback.apply(element, [e].concat(e.data))
        if (result === false) e.preventDefault(), e.stopPropagation()
        return result
      }
      handler.i = set.length
      set.push(handler)
      element.addEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
    })
  }
  function remove(element, events, fn, selector, capture){
    var id = zid(element)
    eachEvent(events || '', fn, function(event, fn){
      findHandlers(element, event, fn, selector).forEach(function(handler){
        delete handlers[id][handler.i]
        element.removeEventListener(realEvent(handler.e), handler.proxy, eventCapture(handler, capture))
      })
    })
  }

  $.event = { add: add, remove: remove }

  $.proxy = function(fn, context) {
    if ($.isFunction(fn)) {
      var proxyFn = function(){ return fn.apply(context, arguments) }
      proxyFn._zid = zid(fn)
      return proxyFn
    } else if (typeof context == 'string') {
      return $.proxy(fn[context], fn)
    } else {
      throw new TypeError("expected function")
    }
  }

  $.fn.bind = function(event, callback){
    return this.each(function(){
      add(this, event, callback)
    })
  }
  $.fn.unbind = function(event, callback){
    return this.each(function(){
      remove(this, event, callback)
    })
  }
  $.fn.one = function(event, callback){
    return this.each(function(i, element){
      add(this, event, callback, null, function(fn, type){
        return function(){
          var result = fn.apply(element, arguments)
          remove(element, type, fn)
          return result
        }
      })
    })
  }

  var returnTrue = function(){return true},
      returnFalse = function(){return false},
      ignoreProperties = /^([A-Z]|layer[XY]$)/,
      eventMethods = {
        preventDefault: 'isDefaultPrevented',
        stopImmediatePropagation: 'isImmediatePropagationStopped',
        stopPropagation: 'isPropagationStopped'
      }
  function createProxy(event) {
    var key, proxy = { originalEvent: event }
    for (key in event)
      if (!ignoreProperties.test(key) && event[key] !== undefined) proxy[key] = event[key]

    $.each(eventMethods, function(name, predicate) {
      proxy[name] = function(){
        this[predicate] = returnTrue
        return event[name].apply(event, arguments)
      }
      proxy[predicate] = returnFalse
    })
    return proxy
  }

  // emulates the 'defaultPrevented' property for browsers that have none
  function fix(event) {
    if (!('defaultPrevented' in event)) {
      event.defaultPrevented = false
      var prevent = event.preventDefault
      event.preventDefault = function() {
        this.defaultPrevented = true
        prevent.call(this)
      }
    }
  }

  $.fn.delegate = function(selector, event, callback){
    return this.each(function(i, element){
      add(element, event, callback, selector, function(fn){
        return function(e){
          var evt, match = $(e.target).closest(selector, element).get(0)
          if (match) {
            evt = $.extend(createProxy(e), {currentTarget: match, liveFired: element})
            return fn.apply(match, [evt].concat([].slice.call(arguments, 1)))
          }
        }
      })
    })
  }
  $.fn.undelegate = function(selector, event, callback){
    return this.each(function(){
      remove(this, event, callback, selector)
    })
  }

  $.fn.live = function(event, callback){
    $(document.body).delegate(this.selector, event, callback)
    return this
  }
  $.fn.die = function(event, callback){
    $(document.body).undelegate(this.selector, event, callback)
    return this
  }

  $.fn.on = function(event, selector, callback){
    return !selector || $.isFunction(selector) ?
      this.bind(event, selector || callback) : this.delegate(selector, event, callback)
  }
  $.fn.off = function(event, selector, callback){
    return !selector || $.isFunction(selector) ?
      this.unbind(event, selector || callback) : this.undelegate(selector, event, callback)
  }

  $.fn.trigger = function(event, data){
    if (typeof event == 'string' || $.isPlainObject(event)) event = $.Event(event)
    fix(event)
    event.data = data
    return this.each(function(){
      // items in the collection might not be DOM elements
      // (todo: possibly support events on plain old objects)
      if('dispatchEvent' in this) this.dispatchEvent(event)
    })
  }

  // triggers event handlers on current element just as if an event occurred,
  // doesn't trigger an actual event, doesn't bubble
  $.fn.triggerHandler = function(event, data){
    var e, result
    this.each(function(i, element){
      e = createProxy(typeof event == 'string' ? $.Event(event) : event)
      e.data = data
      e.target = element
      $.each(findHandlers(element, event.type || event), function(i, handler){
        result = handler.proxy(e)
        if (e.isImmediatePropagationStopped()) return false
      })
    })
    return result
  }

  // shortcut methods for `.bind(event, fn)` for each event type
  ;('focusin focusout load resize scroll unload click dblclick '+
  'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave '+
  'change select keydown keypress keyup error').split(' ').forEach(function(event) {
    $.fn[event] = function(callback) {
      return callback ?
        this.bind(event, callback) :
        this.trigger(event)
    }
  })

  ;['focus', 'blur'].forEach(function(name) {
    $.fn[name] = function(callback) {
      if (callback) this.bind(name, callback)
      else this.each(function(){
        try { this[name]() }
        catch(e) {}
      })
      return this
    }
  })

  $.Event = function(type, props) {
    if (typeof type != 'string') props = type, type = props.type
    var event = document.createEvent(specialEvents[type] || 'Events'), bubbles = true
    if (props) for (var name in props) (name == 'bubbles') ? (bubbles = !!props[name]) : (event[name] = props[name])
    event.initEvent(type, bubbles, true, null, null, null, null, null, null, null, null, null, null, null, null)
    event.isDefaultPrevented = function(){ return this.defaultPrevented }
    return event
  }

})(Zepto)





;(function($){
  var jsonpID = 0,
      document = window.document,
      key,
      name,
      rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
      scriptTypeRE = /^(?:text|application)\/javascript/i,
      xmlTypeRE = /^(?:text|application)\/xml/i,
      jsonType = 'application/json',
      htmlType = 'text/html',
      blankRE = /^\s*$/

  // trigger a custom event and return false if it was cancelled
  function triggerAndReturn(context, eventName, data) {
    var event = $.Event(eventName)
    $(context).trigger(event, data)
    return !event.defaultPrevented
  }

  // trigger an Ajax "global" event
  function triggerGlobal(settings, context, eventName, data) {
    if (settings.global) return triggerAndReturn(context || document, eventName, data)
  }

  // Number of active Ajax requests
  $.active = 0

  function ajaxStart(settings) {
    if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')
  }
  function ajaxStop(settings) {
    if (settings.global && !(--$.active)) triggerGlobal(settings, null, 'ajaxStop')
  }

  // triggers an extra global event "ajaxBeforeSend" that's like "ajaxSend" but cancelable
  function ajaxBeforeSend(xhr, settings) {
    var context = settings.context
    if (settings.beforeSend.call(context, xhr, settings) === false ||
        triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false)
      return false

    triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])
  }
  function ajaxSuccess(data, xhr, settings) {
    var context = settings.context, status = 'success'
    settings.success.call(context, data, status, xhr)
    triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])
    ajaxComplete(status, xhr, settings)
  }
  // type: "timeout", "error", "abort", "parsererror"
  function ajaxError(error, type, xhr, settings) {
    var context = settings.context
    settings.error.call(context, xhr, type, error)
    triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error])
    ajaxComplete(type, xhr, settings)
  }
  // status: "success", "notmodified", "error", "timeout", "abort", "parsererror"
  function ajaxComplete(status, xhr, settings) {
    var context = settings.context
    settings.complete.call(context, xhr, status)
    triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])
    ajaxStop(settings)
  }

  // Empty function, used as default callback
  function empty() {}

  $.ajaxJSONP = function(options){
    if (!('type' in options)) return $.ajax(options)

    var callbackName = 'jsonp' + (++jsonpID),
      script = document.createElement('script'),
      cleanup = function() {
        clearTimeout(abortTimeout)
        $(script).remove()
        delete window[callbackName]
      },
      abort = function(type){
        cleanup()
        // In case of manual abort or timeout, keep an empty function as callback
        // so that the SCRIPT tag that eventually loads won't result in an error.
        if (!type || type == 'timeout') window[callbackName] = empty
        ajaxError(null, type || 'abort', xhr, options)
      },
      xhr = { abort: abort }, abortTimeout

    if (ajaxBeforeSend(xhr, options) === false) {
      abort('abort')
      return false
    }

    window[callbackName] = function(data){
      cleanup()
      ajaxSuccess(data, xhr, options)
    }

    script.onerror = function() { abort('error') }

    script.src = options.url.replace(/=\?/, '=' + callbackName)
    $('head').append(script)

    if (options.timeout > 0) abortTimeout = setTimeout(function(){
      abort('timeout')
    }, options.timeout)

    return xhr
  }

  $.ajaxSettings = {
    // Default type of request
    type: 'GET',
    // Callback that is executed before request
    beforeSend: empty,
    // Callback that is executed if the request succeeds
    success: empty,
    // Callback that is executed the the server drops error
    error: empty,
    // Callback that is executed on request complete (both: error and success)
    complete: empty,
    // The context for the callbacks
    context: null,
    // Whether to trigger "global" Ajax events
    global: true,
    // Transport
    xhr: function () {
      return new window.XMLHttpRequest()
    },
    // MIME types mapping
    accepts: {
      script: 'text/javascript, application/javascript',
      json:   jsonType,
      xml:    'application/xml, text/xml',
      html:   htmlType,
      text:   'text/plain'
    },
    // Whether the request is to another domain
    crossDomain: false,
    // Default timeout
    timeout: 0,
    // Whether data should be serialized to string
    processData: true,
    // Whether the browser should be allowed to cache GET responses
    cache: true,
  }

  function mimeToDataType(mime) {
    if (mime) mime = mime.split(';', 2)[0]
    return mime && ( mime == htmlType ? 'html' :
      mime == jsonType ? 'json' :
      scriptTypeRE.test(mime) ? 'script' :
      xmlTypeRE.test(mime) && 'xml' ) || 'text'
  }

  function appendQuery(url, query) {
    return (url + '&' + query).replace(/[&?]{1,2}/, '?')
  }

  // serialize payload and append it to the URL for GET requests
  function serializeData(options) {
    if (options.processData && options.data && $.type(options.data) != "string")
      options.data = $.param(options.data, options.traditional)
    if (options.data && (!options.type || options.type.toUpperCase() == 'GET'))
      options.url = appendQuery(options.url, options.data)
  }

  $.ajax = function(options){
    var settings = $.extend({}, options || {})
    for (key in $.ajaxSettings) if (settings[key] === undefined) settings[key] = $.ajaxSettings[key]

    ajaxStart(settings)

    if (!settings.crossDomain) settings.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(settings.url) &&
      RegExp.$2 != window.location.host

    if (!settings.url) settings.url = window.location.toString()
    serializeData(settings)
    if (settings.cache === false) settings.url = appendQuery(settings.url, '_=' + Date.now())

    var dataType = settings.dataType, hasPlaceholder = /=\?/.test(settings.url)
    if (dataType == 'jsonp' || hasPlaceholder) {
      if (!hasPlaceholder) settings.url = appendQuery(settings.url, 'callback=?')
      return $.ajaxJSONP(settings)
    }

    var mime = settings.accepts[dataType],
        baseHeaders = { },
        protocol = /^([\w-]+:)\/\//.test(settings.url) ? RegExp.$1 : window.location.protocol,
        xhr = settings.xhr(), abortTimeout

    if (!settings.crossDomain) baseHeaders['X-Requested-With'] = 'XMLHttpRequest'
    if (mime) {
      baseHeaders['Accept'] = mime
      if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]
      xhr.overrideMimeType && xhr.overrideMimeType(mime)
    }
    if (settings.contentType || (settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET'))
      baseHeaders['Content-Type'] = (settings.contentType || 'application/x-www-form-urlencoded')
    settings.headers = $.extend(baseHeaders, settings.headers || {})

    xhr.onreadystatechange = function(){
      if (xhr.readyState == 4) {
        xhr.onreadystatechange = empty;
        clearTimeout(abortTimeout)
        var result, error = false
        if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {
          dataType = dataType || mimeToDataType(xhr.getResponseHeader('content-type'))
          result = xhr.responseText

          try {
            // http://perfectionkills.com/global-eval-what-are-the-options/
            if (dataType == 'script')    (1,eval)(result)
            else if (dataType == 'xml')  result = xhr.responseXML
            else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result)
          } catch (e) { error = e }

          if (error) ajaxError(error, 'parsererror', xhr, settings)
          else ajaxSuccess(result, xhr, settings)
        } else {
          ajaxError(null, xhr.status ? 'error' : 'abort', xhr, settings)
        }
      }
    }

    var async = 'async' in settings ? settings.async : true
    xhr.open(settings.type, settings.url, async)

    for (name in settings.headers) xhr.setRequestHeader(name, settings.headers[name])

    if (ajaxBeforeSend(xhr, settings) === false) {
      xhr.abort()
      return false
    }

    if (settings.timeout > 0) abortTimeout = setTimeout(function(){
        xhr.onreadystatechange = empty
        xhr.abort()
        ajaxError(null, 'timeout', xhr, settings)
      }, settings.timeout)

    // avoid sending empty string (#319)
    xhr.send(settings.data ? settings.data : null)
    return xhr
  }

  // handle optional data/success arguments
  function parseArguments(url, data, success, dataType) {
    var hasData = !$.isFunction(data)
    return {
      url:      url,
      data:     hasData  ? data : undefined,
      success:  !hasData ? data : $.isFunction(success) ? success : undefined,
      dataType: hasData  ? dataType || success : success
    }
  }

  $.get = function(url, data, success, dataType){
    return $.ajax(parseArguments.apply(null, arguments))
  }

  $.post = function(url, data, success, dataType){
    var options = parseArguments.apply(null, arguments)
    options.type = 'POST'
    return $.ajax(options)
  }

  $.getJSON = function(url, data, success){
    var options = parseArguments.apply(null, arguments)
    options.dataType = 'json'
    return $.ajax(options)
  }

  $.fn.load = function(url, data, success){
    if (!this.length) return this
    var self = this, parts = url.split(/\s/), selector,
        options = parseArguments(url, data, success),
        callback = options.success
    if (parts.length > 1) options.url = parts[0], selector = parts[1]
    options.success = function(response){
      self.html(selector ?
        $('<div>').html(response.replace(rscript, "")).find(selector)
        : response)
      callback && callback.apply(self, arguments)
    }
    $.ajax(options)
    return this
  }

  var escape = encodeURIComponent

  function serialize(params, obj, traditional, scope){
    var type, array = $.isArray(obj)
    $.each(obj, function(key, value) {
      type = $.type(value)
      if (scope) key = traditional ? scope : scope + '[' + (array ? '' : key) + ']'
      // handle data in serializeArray() format
      if (!scope && array) params.add(value.name, value.value)
      // recurse into nested objects
      else if (type == "array" || (!traditional && type == "object"))
        serialize(params, value, traditional, key)
      else params.add(key, value)
    })
  }

  $.param = function(obj, traditional){
    var params = []
    params.add = function(k, v){ this.push(escape(k) + '=' + escape(v)) }
    serialize(params, obj, traditional)
    return params.join('&').replace(/%20/g, '+')
  }
})(Zepto)





;(function ($) {
  $.fn.serializeArray = function () {
    var result = [], el
    $( Array.prototype.slice.call(this.get(0).elements) ).each(function () {
      el = $(this)
      var type = el.attr('type')
      if (this.nodeName.toLowerCase() != 'fieldset' &&
        !this.disabled && type != 'submit' && type != 'reset' && type != 'button' &&
        ((type != 'radio' && type != 'checkbox') || this.checked))
        result.push({
          name: el.attr('name'),
          value: el.val()
        })
    })
    return result
  }

  $.fn.serialize = function () {
    var result = []
    this.serializeArray().forEach(function (elm) {
      result.push( encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value) )
    })
    return result.join('&')
  }

  $.fn.submit = function (callback) {
    if (callback) this.bind('submit', callback)
    else if (this.length) {
      var event = $.Event('submit')
      this.eq(0).trigger(event)
      if (!event.defaultPrevented) this.get(0).submit()
    }
    return this
  }

})(Zepto)





;(function($, undefined){
  var prefix = '', eventPrefix, endEventName, endAnimationName,
    vendors = { Webkit: 'webkit', Moz: '', O: 'o', ms: 'MS' },
    document = window.document, testEl = document.createElement('div'),
    supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,
    transform,
    transitionProperty, transitionDuration, transitionTiming,
    animationName, animationDuration, animationTiming,
    cssReset = {}

  function dasherize(str) { return downcase(str.replace(/([a-z])([A-Z])/, '$1-$2')) }
  function downcase(str) { return str.toLowerCase() }
  function normalizeEvent(name) { return eventPrefix ? eventPrefix + name : downcase(name) }

  $.each(vendors, function(vendor, event){
    if (testEl.style[vendor + 'TransitionProperty'] !== undefined) {
      prefix = '-' + downcase(vendor) + '-'
      eventPrefix = event
      return false
    }
  })

  transform = prefix + 'transform'
  cssReset[transitionProperty = prefix + 'transition-property'] =
  cssReset[transitionDuration = prefix + 'transition-duration'] =
  cssReset[transitionTiming   = prefix + 'transition-timing-function'] =
  cssReset[animationName      = prefix + 'animation-name'] =
  cssReset[animationDuration  = prefix + 'animation-duration'] =
  cssReset[animationTiming    = prefix + 'animation-timing-function'] = ''

  $.fx = {
    off: (eventPrefix === undefined && testEl.style.transitionProperty === undefined),
    speeds: { _default: 400, fast: 200, slow: 600 },
    cssPrefix: prefix,
    transitionEnd: normalizeEvent('TransitionEnd'),
    animationEnd: normalizeEvent('AnimationEnd')
  }

  $.fn.animate = function(properties, duration, ease, callback){
    if ($.isPlainObject(duration))
      ease = duration.easing, callback = duration.complete, duration = duration.duration
    if (duration) duration = (typeof duration == 'number' ? duration :
                    ($.fx.speeds[duration] || $.fx.speeds._default)) / 1000
    return this.anim(properties, duration, ease, callback)
  }

  $.fn.anim = function(properties, duration, ease, callback){
    var key, cssValues = {}, cssProperties, transforms = '',
        that = this, wrappedCallback, endEvent = $.fx.transitionEnd

    if (duration === undefined) duration = 0.4
    if ($.fx.off) duration = 0

    if (typeof properties == 'string') {
      // keyframe animation
      cssValues[animationName] = properties
      cssValues[animationDuration] = duration + 's'
      cssValues[animationTiming] = (ease || 'linear')
      endEvent = $.fx.animationEnd
    } else {
      cssProperties = []
      // CSS transitions
      for (key in properties)
        if (supportedTransforms.test(key)) transforms += key + '(' + properties[key] + ') '
        else cssValues[key] = properties[key], cssProperties.push(dasherize(key))

      if (transforms) cssValues[transform] = transforms, cssProperties.push(transform)
      if (duration > 0 && typeof properties === 'object') {
        cssValues[transitionProperty] = cssProperties.join(', ')
        cssValues[transitionDuration] = duration + 's'
        cssValues[transitionTiming] = (ease || 'linear')
      }
    }

    wrappedCallback = function(event){
      if (typeof event !== 'undefined') {
        if (event.target !== event.currentTarget) return // makes sure the event didn't bubble from "below"
        $(event.target).unbind(endEvent, wrappedCallback)
      }
      $(this).css(cssReset)
      callback && callback.call(this)
    }
    if (duration > 0) this.bind(endEvent, wrappedCallback)

    // trigger page reflow so new elements can animate
    this.size() && this.get(0).clientLeft

    this.css(cssValues)

    if (duration <= 0) setTimeout(function() {
      that.each(function(){ wrappedCallback.call(this) })
    }, 0)

    return this
  }

  testEl = null
})(Zepto)

},{}],"/Users/youzi/dev/mtv-play/platform/all.js":[function(require,module,exports){
var app = require('../app')
  // , mslogs = require('../test/multiscreen/log')
  , Switcher = require('../components/switcher')
  , cases = require('vigour-js/browser/cases')
  , msg

app.set( // switcher between first/second/player
{ switcher:new Switcher
  ({ on:
    { navigation: app.user.navigation
    , play: app.playing
    , receiver: app.user.receiver
    , favourites: app.user.favourites
    , usage: app.user.usage
    , content: app.content
    // , fullscreen: app.fullscreen
    , highlight: app.user.highlight
    , search: app.user.search
    , scroll: app.user.scroll
    , carousel: app.user.carousel
    , volume: app.volume
    , notification: app.notification
    , usage: app.user.usage
    , watched: app.user.watched.from
    , state: app.state
    , popup: app.popup
    , overlay: app.overlay
    , loading: app.loading
    , profilepic: app.user.profilepic
    , activeClient: app.user.activeClient
    }
  , display:'none'
  })
}
)

app.ready.once( true, function() {
  app.switcher.display = 'block'
})

if(cases.phone && !cases.native)
{
  function rotateMsg(){
    var w = window.innerWidth
      , h = window.innerHeight
    if( w > h )
    {
      app.set(
      { message:new (msg || ( msg = require('../components/rotate-message') ) )()
      })
    }
    else if(app.message)
    {
      app.message.remove()
    }
  }
  app.w.on(rotateMsg)
  rotateMsg()
}

app.initialised.val = true

},{"../app":"/Users/youzi/dev/mtv-play/app/index.js","../components/rotate-message":"/Users/youzi/dev/mtv-play/components/rotate-message/index.js","../components/switcher":"/Users/youzi/dev/mtv-play/components/switcher/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/platform/cast.js":[function(require,module,exports){

var app = require('../app')
  // , mslogs = require('../test/multiscreen/log')
  , Switcher = require('../components/switcher') // do tv switcher
  , cases = require('vigour-js/browser/cases')
  , msg


app.state.val = 
{ defer:function( update , args ){
    if(this._val === 'first') this._val = 'second'
    update()
}}

app.set( // switcher between first/second/player

//mischien gewoon ze eiguh swticher geven?
//first is bijvoorbeeld different

{ switcher:new Switcher
  ({ on:
    { navigation: app.user.navigation
    , play: app.playing
    , receiver: app.user.receiver
    , favourites: app.user.favourites
    , usage: app.user.usage
    , content: app.content
    , fullscreen: app.fullscreen
    , highlight: app.user.highlight
    , search: app.user.search
    , scroll: app.user.scroll
    , carousel: app.user.carousel
    , volume: app.volume
    , notification: app.notification
    , usage: app.user.usage
    , watched: app.user.watched.from
    , state: app.state
    , popup: app.popup
    , overlay: app.overlay
    , loading: app.loading
    , profilepic: app.user.profilepic
    , activeClient: app.user.activeClient
    }
  })

// , pleaseConnect:require('../components/connect-message')

})

app.initialised.val = true

},{"../app":"/Users/youzi/dev/mtv-play/app/index.js","../components/switcher":"/Users/youzi/dev/mtv-play/components/switcher/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"/Users/youzi/dev/mtv-play/platform/tv.js":[function(require,module,exports){

var tv = require('vigour-js/app/ui/tv') //events and stuff make inject on app?
  , app = require('../app')
  , Switcher = require('../components/switcher') // do tv switcher
  , cases = require('vigour-js/browser/cases')
  , msg

// app.user.navigation.page.$userOrigin = 'shows'

app.set( // switcher between first/second/player

//mischien gewoon ze eiguh swticher geven?
//first is bijvoorbeeld different

  //kan minder
{ switcher:new Switcher
  ({ on:
    { navigation: app.user.navigation
    , play: app.playing
    , receiver: app.user.receiver
    , favourites: app.user.favourites
    , usage: app.user.usage
    , content: app.content
    , fullscreen: app.fullscreen
    , highlight: app.user.highlight
    , search: app.user.search
    , scroll: app.user.scroll
    , carousel: app.user.carousel
    , volume: app.volume
    , notification: app.notification
    , usage: app.user.usage
    , watched: app.user.watched.from
    , state: app.state
    , popup: app.popup
    , overlay: app.overlay
    , loading: app.loading
    , profilepic: app.user.profilepic
    , activeClient: app.user.activeClient
    }
  })
// , pleaseConnect:require('../components/connect-message')
})

// app.ready.once( true, function() {
  // app.switcher.display = 'block'
// })

app.initialised.val = true

},{"../app":"/Users/youzi/dev/mtv-play/app/index.js","../components/switcher":"/Users/youzi/dev/mtv-play/components/switcher/index.js","vigour-js/app/ui/tv":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/app/ui/tv/index.js","vigour-js/browser/cases":"/Users/youzi/dev/mtv-play/node_modules/vigour-js/browser/cases/index.js"}],"package.json":[function(require,module,exports){
module.exports={"name":"mtv-play","version":"1.2.67","description":"mtv's multiscreen adventure","main":"index.js","scripts":{"start":"gaston -d","test":"test/test.js","release":"packer -r -c package.json,.package.json"},"repository":{"type":"git","url":"https://github.com/vigour-io/mtv-play","branch":"demo"},"keywords":["multiscreen","play","shows","smart","tv","js"],"dependencies":{"lodash":"3.2.0","monotonic-timestamp":"0.0.9","package-branch-config":"^1.2.2","promise":"6.1.0","through2":"^2.0.0","vigour-js":"git+ssh://git@github.com:vigour-io/vigour-js.git#mtvplay","zepto-browserify":"x"},"devDependencies":{"vigour-dev-tools":"git+ssh://git@github.com:vigour-io/vigour-dev-tools.git#master","vigour-packer-server":"git+ssh://git@github.com:vigour-io/vigour-packer-server.git#master"},"author":"Jim de Beer","license":"other","bugs":{"url":"https://github.com/vigour-io/mtv-play/issues"},"homepage":"https://github.com/vigour-io/mtv-play","vigour":{"ga":"UA-43955457-3","hashUrl":true,"defaultRegion":false,"regionOverride":"DE","availableRegions":["DE","NL","CH","PL","RO","BE"],"geo":"https://wwwmtvplay-a.akamaihd.net/geo/","development":{"button":false},"cloud":"http://demohub.dev.vigour.io:80","othercloud":"http://localhost:10001","languages":["en","de","nl","pl","ro","it","fr"],"mtvmobile":["de","ch","ro"],"roles":["free","premium","mtv","trial"],"countrycodes":{"de":49,"ch":41,"ro":40,"nl":31},"dictionary":"http://wwwmtvplay-a.akamaihd.net/translations/lang_$language.json","webtranslateit":{"files":{"de":374130,"en":374126,"nl":374128,"pl":374129,"ro":374131,"fr":404562,"it":404563},"token":"-rN-CdCWmgh4IDxFRT-MEg"},"epg":"https://wwwmtvplay-a.akamaihd.net/xhr/index.html","img":"https://imgmtvplay-a.akamaihd.net","api":{"type":"production","url":"https://utt.mtvnn.com/","acceptHeader":"application/json","key":"4e99c9381b74354fbae9f468497912f0"},"player":{"debug":false,"web":"http://player.mtvnn.com/html5player/production/player.js","settings":{"domain":"mtv","tld":"de","localization":{"language":"de","country":"DE"},"ads":{"enabled":false,"engine":"Freewheel","networkID":174975,"profileID":"174975:MTVNE_live_HTML5","viralSID":"mtvplaytv/test","defaultAssetID":41349526,"server":"http://2ab7f.v.fwmrm.net/ad/p/1"},"controls":false,"blankVideo":"http://player.mtvnn.com/codebase/blank.m4v","simulcastApiKey":"c153f28d950ae49a"}},"chromecast":{"id":"30C914C1","web":"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js"},"facebook":{"id":"709421825777638","web":"https://connect.facebook.net/de_DE/sdk.js"},"packer":{"language":"https://wwwmtvplay-a.akamaihd.net/translations/","url":"https://wwwmtvplay-a.akamaihd.net/","domain":"http://demo.packer.mtv.vigour.io","assets":{"index.html":true,"bundle.js":true,"bundle.css":true,"build.html":true,"build.js":true,"build.css":true,"img":"*","assets":"*","fonts":"*","fonts.css":true,"translations":"*"},"transforms":{"build.js":["inform"],"bundle.css":["rebase"],"build.css":["rebase"]},"main":"build.js","web":"build.html","fbDefaults":{"title":"MTV Play","description":"Mtv's new app to view shows on all devices","image":"http://img.mtvutt.com/image/180/180?url=http://play.mtvutt.com/apple-touch-icon-180x180.png"}},"store":{"ios":{"monthly":"$region_subscription_monthly","yearly":"$region_subscription_annual","single":"$region_single_purchase"},"android":{"monthly":"mtvplay_subscription_monthly","yearly":"mtvplay_subscription_annually","single":"mtvplay_single_purchase"},"windows":{"monthly":"mtvplay_subscription_monthly","yearly":"mtvplay_subscription_annual","single":"mtvplay_single_purchase"}}},"gaston":{"port":8080,"socket-port":9000,"no-auto-reload":false,"no-package":false,"bundle":"./","build":"./","browserify":{"transforms":[{"path":"package-branch-config","options":{"section":"vigour"}}]},"less":{"options":{}},"smaps":true,"source-maps":true,"remote-logging":true,"require-paths":{}},"sha":"1.2.67"}
},{}]},{},["/Users/youzi/dev/mtv-play/index.js"])
//# sourceMappingURL=bundle.js.map
